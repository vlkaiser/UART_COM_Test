
UART_COM_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028ec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080029ac  080029ac  000129ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029e4  080029e4  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080029e4  080029e4  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029e4  080029e4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029e4  080029e4  000129e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029e8  080029e8  000129e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080029ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000068  08002a54  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08002a54  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006a67  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000161c  00000000  00000000  00026af7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000710  00000000  00000000  00028118  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000648  00000000  00000000  00028828  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014ecf  00000000  00000000  00028e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000067b8  00000000  00000000  0003dd3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000743aa  00000000  00000000  000444f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b88a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001794  00000000  00000000  000b891c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002994 	.word	0x08002994

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08002994 	.word	0x08002994

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa92 	bl	800074c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f842 	bl	80002b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8c8 	bl	80003c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f896 	bl	8000360 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

Station_Status.ctrlStatus = 0;
 8000234:	4b1a      	ldr	r3, [pc, #104]	; (80002a0 <main+0x80>)
 8000236:	2200      	movs	r2, #0
 8000238:	701a      	strb	r2, [r3, #0]
Station_Status.obs1Status = 1;
 800023a:	4b19      	ldr	r3, [pc, #100]	; (80002a0 <main+0x80>)
 800023c:	2201      	movs	r2, #1
 800023e:	705a      	strb	r2, [r3, #1]
  {

	#ifdef TRANSMITTER_BOARD
	  /* Wait for User push-button press before starting the Communication.  In the meantime, LED2 is blinking */

	   while(UserButtonStatus == 0)
 8000240:	e008      	b.n	8000254 <main+0x34>
	   {
	       /* Toggle LED2*/
	       HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000242:	2390      	movs	r3, #144	; 0x90
 8000244:	05db      	lsls	r3, r3, #23
 8000246:	2120      	movs	r1, #32
 8000248:	0018      	movs	r0, r3
 800024a:	f000 fdbe 	bl	8000dca <HAL_GPIO_TogglePin>
	       HAL_Delay(100);
 800024e:	2064      	movs	r0, #100	; 0x64
 8000250:	f000 fae0 	bl	8000814 <HAL_Delay>
	   while(UserButtonStatus == 0)
 8000254:	4b13      	ldr	r3, [pc, #76]	; (80002a4 <main+0x84>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d0f2      	beq.n	8000242 <main+0x22>
	   }

	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800025c:	2390      	movs	r3, #144	; 0x90
 800025e:	05db      	lsls	r3, r3, #23
 8000260:	2200      	movs	r2, #0
 8000262:	2120      	movs	r1, #32
 8000264:	0018      	movs	r0, r3
 8000266:	f000 fd93 	bl	8000d90 <HAL_GPIO_WritePin>

	  CtrlSendData();
 800026a:	f000 f91b 	bl	80004a4 <CtrlSendData>
	  PeriphReceiveData();

	#endif

		/*##-5- Wait for the end of the transfer ###################################*/
		while (UartReady != SET)
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	4b0d      	ldr	r3, [pc, #52]	; (80002a8 <main+0x88>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	b2db      	uxtb	r3, r3
 8000276:	2b01      	cmp	r3, #1
 8000278:	d1fa      	bne.n	8000270 <main+0x50>
		{
		}

		/* Reset transmission flag */
		UartReady = RESET;
 800027a:	4b0b      	ldr	r3, [pc, #44]	; (80002a8 <main+0x88>)
 800027c:	2200      	movs	r2, #0
 800027e:	701a      	strb	r2, [r3, #0]
		  Error_Handler();
		}
*/

		/* Turn on LED2 if test passes then enter infinite loop */
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000280:	2390      	movs	r3, #144	; 0x90
 8000282:	05db      	lsls	r3, r3, #23
 8000284:	2201      	movs	r2, #1
 8000286:	2120      	movs	r1, #32
 8000288:	0018      	movs	r0, r3
 800028a:	f000 fd81 	bl	8000d90 <HAL_GPIO_WritePin>
		UserButtonStatus = 0;		//clear UserButtonStatus
 800028e:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <main+0x84>)
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]

		//Wait
		HAL_Delay(3000);
 8000294:	4b05      	ldr	r3, [pc, #20]	; (80002ac <main+0x8c>)
 8000296:	0018      	movs	r0, r3
 8000298:	f000 fabc 	bl	8000814 <HAL_Delay>
	   while(UserButtonStatus == 0)
 800029c:	e7da      	b.n	8000254 <main+0x34>
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	2000008c 	.word	0x2000008c
 80002a4:	20000088 	.word	0x20000088
 80002a8:	20000084 	.word	0x20000084
 80002ac:	00000bb8 	.word	0x00000bb8

080002b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b0:	b590      	push	{r4, r7, lr}
 80002b2:	b099      	sub	sp, #100	; 0x64
 80002b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b6:	242c      	movs	r4, #44	; 0x2c
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	0018      	movs	r0, r3
 80002bc:	2334      	movs	r3, #52	; 0x34
 80002be:	001a      	movs	r2, r3
 80002c0:	2100      	movs	r1, #0
 80002c2:	f002 fb5f 	bl	8002984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c6:	231c      	movs	r3, #28
 80002c8:	18fb      	adds	r3, r7, r3
 80002ca:	0018      	movs	r0, r3
 80002cc:	2310      	movs	r3, #16
 80002ce:	001a      	movs	r2, r3
 80002d0:	2100      	movs	r1, #0
 80002d2:	f002 fb57 	bl	8002984 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d6:	003b      	movs	r3, r7
 80002d8:	0018      	movs	r0, r3
 80002da:	231c      	movs	r3, #28
 80002dc:	001a      	movs	r2, r3
 80002de:	2100      	movs	r1, #0
 80002e0:	f002 fb50 	bl	8002984 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e4:	0021      	movs	r1, r4
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2202      	movs	r2, #2
 80002ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2201      	movs	r2, #1
 80002f0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2210      	movs	r2, #16
 80002f6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2200      	movs	r2, #0
 80002fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	0018      	movs	r0, r3
 8000302:	f000 fd99 	bl	8000e38 <HAL_RCC_OscConfig>
 8000306:	1e03      	subs	r3, r0, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800030a:	f000 f931 	bl	8000570 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030e:	211c      	movs	r1, #28
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2207      	movs	r2, #7
 8000314:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2200      	movs	r2, #0
 800031a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2200      	movs	r2, #0
 8000326:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000328:	187b      	adds	r3, r7, r1
 800032a:	2100      	movs	r1, #0
 800032c:	0018      	movs	r0, r3
 800032e:	f001 f909 	bl	8001544 <HAL_RCC_ClockConfig>
 8000332:	1e03      	subs	r3, r0, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000336:	f000 f91b 	bl	8000570 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800033a:	003b      	movs	r3, r7
 800033c:	2202      	movs	r2, #2
 800033e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000340:	003b      	movs	r3, r7
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000346:	003b      	movs	r3, r7
 8000348:	0018      	movs	r0, r3
 800034a:	f001 fa73 	bl	8001834 <HAL_RCCEx_PeriphCLKConfig>
 800034e:	1e03      	subs	r3, r0, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000352:	f000 f90d 	bl	8000570 <Error_Handler>
  }
}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	46bd      	mov	sp, r7
 800035a:	b019      	add	sp, #100	; 0x64
 800035c:	bd90      	pop	{r4, r7, pc}
	...

08000360 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000364:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 8000366:	4a15      	ldr	r2, [pc, #84]	; (80003bc <MX_USART2_UART_Init+0x5c>)
 8000368:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800036a:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 800036c:	22e1      	movs	r2, #225	; 0xe1
 800036e:	0252      	lsls	r2, r2, #9
 8000370:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000372:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 800037a:	2200      	movs	r2, #0
 800037c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 8000380:	2200      	movs	r2, #0
 8000382:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 8000386:	220c      	movs	r2, #12
 8000388:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 800038c:	2200      	movs	r2, #0
 800038e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 8000392:	2200      	movs	r2, #0
 8000394:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 8000398:	2200      	movs	r2, #0
 800039a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 800039e:	2200      	movs	r2, #0
 80003a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003a2:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 80003a4:	0018      	movs	r0, r3
 80003a6:	f001 fb45 	bl	8001a34 <HAL_UART_Init>
 80003aa:	1e03      	subs	r3, r0, #0
 80003ac:	d001      	beq.n	80003b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003ae:	f000 f8df 	bl	8000570 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	200000f0 	.word	0x200000f0
 80003bc:	40004400 	.word	0x40004400

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b590      	push	{r4, r7, lr}
 80003c2:	b089      	sub	sp, #36	; 0x24
 80003c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	240c      	movs	r4, #12
 80003c8:	193b      	adds	r3, r7, r4
 80003ca:	0018      	movs	r0, r3
 80003cc:	2314      	movs	r3, #20
 80003ce:	001a      	movs	r2, r3
 80003d0:	2100      	movs	r1, #0
 80003d2:	f002 fad7 	bl	8002984 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d6:	4b30      	ldr	r3, [pc, #192]	; (8000498 <MX_GPIO_Init+0xd8>)
 80003d8:	695a      	ldr	r2, [r3, #20]
 80003da:	4b2f      	ldr	r3, [pc, #188]	; (8000498 <MX_GPIO_Init+0xd8>)
 80003dc:	2180      	movs	r1, #128	; 0x80
 80003de:	0309      	lsls	r1, r1, #12
 80003e0:	430a      	orrs	r2, r1
 80003e2:	615a      	str	r2, [r3, #20]
 80003e4:	4b2c      	ldr	r3, [pc, #176]	; (8000498 <MX_GPIO_Init+0xd8>)
 80003e6:	695a      	ldr	r2, [r3, #20]
 80003e8:	2380      	movs	r3, #128	; 0x80
 80003ea:	031b      	lsls	r3, r3, #12
 80003ec:	4013      	ands	r3, r2
 80003ee:	60bb      	str	r3, [r7, #8]
 80003f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003f2:	4b29      	ldr	r3, [pc, #164]	; (8000498 <MX_GPIO_Init+0xd8>)
 80003f4:	695a      	ldr	r2, [r3, #20]
 80003f6:	4b28      	ldr	r3, [pc, #160]	; (8000498 <MX_GPIO_Init+0xd8>)
 80003f8:	2180      	movs	r1, #128	; 0x80
 80003fa:	03c9      	lsls	r1, r1, #15
 80003fc:	430a      	orrs	r2, r1
 80003fe:	615a      	str	r2, [r3, #20]
 8000400:	4b25      	ldr	r3, [pc, #148]	; (8000498 <MX_GPIO_Init+0xd8>)
 8000402:	695a      	ldr	r2, [r3, #20]
 8000404:	2380      	movs	r3, #128	; 0x80
 8000406:	03db      	lsls	r3, r3, #15
 8000408:	4013      	ands	r3, r2
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040e:	4b22      	ldr	r3, [pc, #136]	; (8000498 <MX_GPIO_Init+0xd8>)
 8000410:	695a      	ldr	r2, [r3, #20]
 8000412:	4b21      	ldr	r3, [pc, #132]	; (8000498 <MX_GPIO_Init+0xd8>)
 8000414:	2180      	movs	r1, #128	; 0x80
 8000416:	0289      	lsls	r1, r1, #10
 8000418:	430a      	orrs	r2, r1
 800041a:	615a      	str	r2, [r3, #20]
 800041c:	4b1e      	ldr	r3, [pc, #120]	; (8000498 <MX_GPIO_Init+0xd8>)
 800041e:	695a      	ldr	r2, [r3, #20]
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	029b      	lsls	r3, r3, #10
 8000424:	4013      	ands	r3, r2
 8000426:	603b      	str	r3, [r7, #0]
 8000428:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800042a:	2390      	movs	r3, #144	; 0x90
 800042c:	05db      	lsls	r3, r3, #23
 800042e:	2201      	movs	r2, #1
 8000430:	2120      	movs	r1, #32
 8000432:	0018      	movs	r0, r3
 8000434:	f000 fcac 	bl	8000d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_USER_Pin */
  GPIO_InitStruct.Pin = BUTTON_USER_Pin;
 8000438:	193b      	adds	r3, r7, r4
 800043a:	2280      	movs	r2, #128	; 0x80
 800043c:	0192      	lsls	r2, r2, #6
 800043e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000440:	193b      	adds	r3, r7, r4
 8000442:	4a16      	ldr	r2, [pc, #88]	; (800049c <MX_GPIO_Init+0xdc>)
 8000444:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000446:	193b      	adds	r3, r7, r4
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_USER_GPIO_Port, &GPIO_InitStruct);
 800044c:	193b      	adds	r3, r7, r4
 800044e:	4a14      	ldr	r2, [pc, #80]	; (80004a0 <MX_GPIO_Init+0xe0>)
 8000450:	0019      	movs	r1, r3
 8000452:	0010      	movs	r0, r2
 8000454:	f000 fb24 	bl	8000aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000458:	0021      	movs	r1, r4
 800045a:	187b      	adds	r3, r7, r1
 800045c:	2220      	movs	r2, #32
 800045e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000460:	187b      	adds	r3, r7, r1
 8000462:	2201      	movs	r2, #1
 8000464:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	187b      	adds	r3, r7, r1
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046c:	187b      	adds	r3, r7, r1
 800046e:	2200      	movs	r2, #0
 8000470:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000472:	187a      	adds	r2, r7, r1
 8000474:	2390      	movs	r3, #144	; 0x90
 8000476:	05db      	lsls	r3, r3, #23
 8000478:	0011      	movs	r1, r2
 800047a:	0018      	movs	r0, r3
 800047c:	f000 fb10 	bl	8000aa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000480:	2200      	movs	r2, #0
 8000482:	2100      	movs	r1, #0
 8000484:	2007      	movs	r0, #7
 8000486:	f000 fa93 	bl	80009b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800048a:	2007      	movs	r0, #7
 800048c:	f000 faa5 	bl	80009da <HAL_NVIC_EnableIRQ>

}
 8000490:	46c0      	nop			; (mov r8, r8)
 8000492:	46bd      	mov	sp, r7
 8000494:	b009      	add	sp, #36	; 0x24
 8000496:	bd90      	pop	{r4, r7, pc}
 8000498:	40021000 	.word	0x40021000
 800049c:	10310000 	.word	0x10310000
 80004a0:	48000800 	.word	0x48000800

080004a4 <CtrlSendData>:

/* USER CODE BEGIN 4 */

void CtrlSendData()
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	  /* The board sends the message and expects to receive it back */

	  /*##-2- Start the transmission process #####################################*/
	  /* While the UART in reception process, user can transmit data through "aTxBuffer" buffer */

	  if(HAL_UART_Transmit_IT(&huart2, (uint8_t*)aTxBuffer, TXBUFFERSIZE)!= HAL_OK)
 80004a8:	490f      	ldr	r1, [pc, #60]	; (80004e8 <CtrlSendData+0x44>)
 80004aa:	4b10      	ldr	r3, [pc, #64]	; (80004ec <CtrlSendData+0x48>)
 80004ac:	225a      	movs	r2, #90	; 0x5a
 80004ae:	0018      	movs	r0, r3
 80004b0:	f001 fb14 	bl	8001adc <HAL_UART_Transmit_IT>
 80004b4:	1e03      	subs	r3, r0, #0
 80004b6:	d001      	beq.n	80004bc <CtrlSendData+0x18>
	  {
		Error_Handler();
 80004b8:	f000 f85a 	bl	8000570 <Error_Handler>
	  }

	  /*##-3- Wait for the end of the transfer ###################################*/
	  while (UartReady != SET)
 80004bc:	46c0      	nop			; (mov r8, r8)
 80004be:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <CtrlSendData+0x4c>)
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d1fa      	bne.n	80004be <CtrlSendData+0x1a>
	  {
	  }

	  /* Reset transmission flag */
	  UartReady = RESET;
 80004c8:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <CtrlSendData+0x4c>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	701a      	strb	r2, [r3, #0]

	  /*##-4- Put UART peripheral in reception process ###########################*/
	  if(HAL_UART_Receive_IT(&huart2, (uint8_t *)aRxBuffer, RXBUFFERSIZE) != HAL_OK)
 80004ce:	4909      	ldr	r1, [pc, #36]	; (80004f4 <CtrlSendData+0x50>)
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <CtrlSendData+0x48>)
 80004d2:	225a      	movs	r2, #90	; 0x5a
 80004d4:	0018      	movs	r0, r3
 80004d6:	f001 fb6f 	bl	8001bb8 <HAL_UART_Receive_IT>
 80004da:	1e03      	subs	r3, r0, #0
 80004dc:	d001      	beq.n	80004e2 <CtrlSendData+0x3e>
	  {
		Error_Handler();
 80004de:	f000 f847 	bl	8000570 <Error_Handler>
	  }
}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000000 	.word	0x20000000
 80004ec:	200000f0 	.word	0x200000f0
 80004f0:	20000084 	.word	0x20000084
 80004f4:	20000094 	.word	0x20000094

080004f8 <HAL_UART_TxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Tx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartReady = SET;
 8000500:	4b03      	ldr	r3, [pc, #12]	; (8000510 <HAL_UART_TxCpltCallback+0x18>)
 8000502:	2201      	movs	r2, #1
 8000504:	701a      	strb	r2, [r3, #0]

}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	b002      	add	sp, #8
 800050c:	bd80      	pop	{r7, pc}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	20000084 	.word	0x20000084

08000514 <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartReady = SET;
 800051c:	4b03      	ldr	r3, [pc, #12]	; (800052c <HAL_UART_RxCpltCallback+0x18>)
 800051e:	2201      	movs	r2, #1
 8000520:	701a      	strb	r2, [r3, #0]


}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	46bd      	mov	sp, r7
 8000526:	b002      	add	sp, #8
 8000528:	bd80      	pop	{r7, pc}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	20000084 	.word	0x20000084

08000530 <HAL_UART_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart2)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
    Error_Handler();
 8000538:	f000 f81a 	bl	8000570 <Error_Handler>
}
 800053c:	46c0      	nop			; (mov r8, r8)
 800053e:	46bd      	mov	sp, r7
 8000540:	b002      	add	sp, #8
 8000542:	bd80      	pop	{r7, pc}

08000544 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	0002      	movs	r2, r0
 800054c:	1dbb      	adds	r3, r7, #6
 800054e:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == BUTTON_USER_Pin)
 8000550:	1dbb      	adds	r3, r7, #6
 8000552:	881a      	ldrh	r2, [r3, #0]
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	019b      	lsls	r3, r3, #6
 8000558:	429a      	cmp	r2, r3
 800055a:	d102      	bne.n	8000562 <HAL_GPIO_EXTI_Callback+0x1e>
  {
    UserButtonStatus = 1;
 800055c:	4b03      	ldr	r3, [pc, #12]	; (800056c <HAL_GPIO_EXTI_Callback+0x28>)
 800055e:	2201      	movs	r2, #1
 8000560:	601a      	str	r2, [r3, #0]
  }
}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	b002      	add	sp, #8
 8000568:	bd80      	pop	{r7, pc}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	20000088 	.word	0x20000088

08000570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	  /* Turn LED2 on */
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000574:	2390      	movs	r3, #144	; 0x90
 8000576:	05db      	lsls	r3, r3, #23
 8000578:	2201      	movs	r2, #1
 800057a:	2120      	movs	r1, #32
 800057c:	0018      	movs	r0, r3
 800057e:	f000 fc07 	bl	8000d90 <HAL_GPIO_WritePin>
	    while(1)
	  {
	    /* Error if LED2 is slowly blinking (1 sec. period) */
	    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000582:	2390      	movs	r3, #144	; 0x90
 8000584:	05db      	lsls	r3, r3, #23
 8000586:	2120      	movs	r1, #32
 8000588:	0018      	movs	r0, r3
 800058a:	f000 fc1e 	bl	8000dca <HAL_GPIO_TogglePin>
	    HAL_Delay(1000);
 800058e:	23fa      	movs	r3, #250	; 0xfa
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	0018      	movs	r0, r3
 8000594:	f000 f93e 	bl	8000814 <HAL_Delay>
	    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000598:	e7f3      	b.n	8000582 <Error_Handler+0x12>
	...

0800059c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <HAL_MspInit+0x44>)
 80005a4:	699a      	ldr	r2, [r3, #24]
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_MspInit+0x44>)
 80005a8:	2101      	movs	r1, #1
 80005aa:	430a      	orrs	r2, r1
 80005ac:	619a      	str	r2, [r3, #24]
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <HAL_MspInit+0x44>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	2201      	movs	r2, #1
 80005b4:	4013      	ands	r3, r2
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <HAL_MspInit+0x44>)
 80005bc:	69da      	ldr	r2, [r3, #28]
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <HAL_MspInit+0x44>)
 80005c0:	2180      	movs	r1, #128	; 0x80
 80005c2:	0549      	lsls	r1, r1, #21
 80005c4:	430a      	orrs	r2, r1
 80005c6:	61da      	str	r2, [r3, #28]
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <HAL_MspInit+0x44>)
 80005ca:	69da      	ldr	r2, [r3, #28]
 80005cc:	2380      	movs	r3, #128	; 0x80
 80005ce:	055b      	lsls	r3, r3, #21
 80005d0:	4013      	ands	r3, r2
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	b002      	add	sp, #8
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	40021000 	.word	0x40021000

080005e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ec:	2314      	movs	r3, #20
 80005ee:	18fb      	adds	r3, r7, r3
 80005f0:	0018      	movs	r0, r3
 80005f2:	2314      	movs	r3, #20
 80005f4:	001a      	movs	r2, r3
 80005f6:	2100      	movs	r1, #0
 80005f8:	f002 f9c4 	bl	8002984 <memset>
  if(huart->Instance==USART2)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a20      	ldr	r2, [pc, #128]	; (8000684 <HAL_UART_MspInit+0xa0>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d13a      	bne.n	800067c <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000606:	4b20      	ldr	r3, [pc, #128]	; (8000688 <HAL_UART_MspInit+0xa4>)
 8000608:	69da      	ldr	r2, [r3, #28]
 800060a:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <HAL_UART_MspInit+0xa4>)
 800060c:	2180      	movs	r1, #128	; 0x80
 800060e:	0289      	lsls	r1, r1, #10
 8000610:	430a      	orrs	r2, r1
 8000612:	61da      	str	r2, [r3, #28]
 8000614:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <HAL_UART_MspInit+0xa4>)
 8000616:	69da      	ldr	r2, [r3, #28]
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	029b      	lsls	r3, r3, #10
 800061c:	4013      	ands	r3, r2
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b19      	ldr	r3, [pc, #100]	; (8000688 <HAL_UART_MspInit+0xa4>)
 8000624:	695a      	ldr	r2, [r3, #20]
 8000626:	4b18      	ldr	r3, [pc, #96]	; (8000688 <HAL_UART_MspInit+0xa4>)
 8000628:	2180      	movs	r1, #128	; 0x80
 800062a:	0289      	lsls	r1, r1, #10
 800062c:	430a      	orrs	r2, r1
 800062e:	615a      	str	r2, [r3, #20]
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <HAL_UART_MspInit+0xa4>)
 8000632:	695a      	ldr	r2, [r3, #20]
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	029b      	lsls	r3, r3, #10
 8000638:	4013      	ands	r3, r2
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800063e:	2114      	movs	r1, #20
 8000640:	187b      	adds	r3, r7, r1
 8000642:	220c      	movs	r2, #12
 8000644:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2202      	movs	r2, #2
 800064a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2203      	movs	r2, #3
 8000656:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2201      	movs	r2, #1
 800065c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065e:	187a      	adds	r2, r7, r1
 8000660:	2390      	movs	r3, #144	; 0x90
 8000662:	05db      	lsls	r3, r3, #23
 8000664:	0011      	movs	r1, r2
 8000666:	0018      	movs	r0, r3
 8000668:	f000 fa1a 	bl	8000aa0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	2100      	movs	r1, #0
 8000670:	201c      	movs	r0, #28
 8000672:	f000 f99d 	bl	80009b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000676:	201c      	movs	r0, #28
 8000678:	f000 f9af 	bl	80009da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b00a      	add	sp, #40	; 0x28
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40004400 	.word	0x40004400
 8000688:	40021000 	.word	0x40021000

0800068c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069a:	e7fe      	b.n	800069a <HardFault_Handler+0x4>

0800069c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b4:	f000 f892 	bl	80007dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80006c2:	2380      	movs	r3, #128	; 0x80
 80006c4:	019b      	lsls	r3, r3, #6
 80006c6:	0018      	movs	r0, r3
 80006c8:	f000 fb9a 	bl	8000e00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80006d8:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <USART2_IRQHandler+0x14>)
 80006da:	0018      	movs	r0, r3
 80006dc:	f001 fb24 	bl	8001d28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	200000f0 	.word	0x200000f0

080006ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006f8:	480d      	ldr	r0, [pc, #52]	; (8000730 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006fc:	480d      	ldr	r0, [pc, #52]	; (8000734 <LoopForever+0x6>)
  ldr r1, =_edata
 80006fe:	490e      	ldr	r1, [pc, #56]	; (8000738 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000700:	4a0e      	ldr	r2, [pc, #56]	; (800073c <LoopForever+0xe>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000704:	e002      	b.n	800070c <LoopCopyDataInit>

08000706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070a:	3304      	adds	r3, #4

0800070c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800070c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000710:	d3f9      	bcc.n	8000706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000712:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000714:	4c0b      	ldr	r4, [pc, #44]	; (8000744 <LoopForever+0x16>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000718:	e001      	b.n	800071e <LoopFillZerobss>

0800071a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800071c:	3204      	adds	r2, #4

0800071e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000720:	d3fb      	bcc.n	800071a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000722:	f7ff ffe3 	bl	80006ec <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000726:	f002 f909 	bl	800293c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800072a:	f7ff fd79 	bl	8000220 <main>

0800072e <LoopForever>:

LoopForever:
    b LoopForever
 800072e:	e7fe      	b.n	800072e <LoopForever>
  ldr   r0, =_estack
 8000730:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000738:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800073c:	080029ec 	.word	0x080029ec
  ldr r2, =_sbss
 8000740:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000744:	20000174 	.word	0x20000174

08000748 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000748:	e7fe      	b.n	8000748 <ADC1_COMP_IRQHandler>
	...

0800074c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <HAL_Init+0x24>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HAL_Init+0x24>)
 8000756:	2110      	movs	r1, #16
 8000758:	430a      	orrs	r2, r1
 800075a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800075c:	2000      	movs	r0, #0
 800075e:	f000 f809 	bl	8000774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000762:	f7ff ff1b 	bl	800059c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000766:	2300      	movs	r3, #0
}
 8000768:	0018      	movs	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	40022000 	.word	0x40022000

08000774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <HAL_InitTick+0x5c>)
 800077e:	681c      	ldr	r4, [r3, #0]
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <HAL_InitTick+0x60>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	0019      	movs	r1, r3
 8000786:	23fa      	movs	r3, #250	; 0xfa
 8000788:	0098      	lsls	r0, r3, #2
 800078a:	f7ff fcbd 	bl	8000108 <__udivsi3>
 800078e:	0003      	movs	r3, r0
 8000790:	0019      	movs	r1, r3
 8000792:	0020      	movs	r0, r4
 8000794:	f7ff fcb8 	bl	8000108 <__udivsi3>
 8000798:	0003      	movs	r3, r0
 800079a:	0018      	movs	r0, r3
 800079c:	f000 f92d 	bl	80009fa <HAL_SYSTICK_Config>
 80007a0:	1e03      	subs	r3, r0, #0
 80007a2:	d001      	beq.n	80007a8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007a4:	2301      	movs	r3, #1
 80007a6:	e00f      	b.n	80007c8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b03      	cmp	r3, #3
 80007ac:	d80b      	bhi.n	80007c6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	2301      	movs	r3, #1
 80007b2:	425b      	negs	r3, r3
 80007b4:	2200      	movs	r2, #0
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 f8fa 	bl	80009b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_InitTick+0x64>)
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007c2:	2300      	movs	r3, #0
 80007c4:	e000      	b.n	80007c8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
}
 80007c8:	0018      	movs	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b003      	add	sp, #12
 80007ce:	bd90      	pop	{r4, r7, pc}
 80007d0:	2000005c 	.word	0x2000005c
 80007d4:	20000064 	.word	0x20000064
 80007d8:	20000060 	.word	0x20000060

080007dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <HAL_IncTick+0x1c>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	001a      	movs	r2, r3
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <HAL_IncTick+0x20>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	18d2      	adds	r2, r2, r3
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <HAL_IncTick+0x20>)
 80007ee:	601a      	str	r2, [r3, #0]
}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	20000064 	.word	0x20000064
 80007fc:	20000170 	.word	0x20000170

08000800 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  return uwTick;
 8000804:	4b02      	ldr	r3, [pc, #8]	; (8000810 <HAL_GetTick+0x10>)
 8000806:	681b      	ldr	r3, [r3, #0]
}
 8000808:	0018      	movs	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	20000170 	.word	0x20000170

08000814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800081c:	f7ff fff0 	bl	8000800 <HAL_GetTick>
 8000820:	0003      	movs	r3, r0
 8000822:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	3301      	adds	r3, #1
 800082c:	d005      	beq.n	800083a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <HAL_Delay+0x40>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	001a      	movs	r2, r3
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	189b      	adds	r3, r3, r2
 8000838:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	f7ff ffe0 	bl	8000800 <HAL_GetTick>
 8000840:	0002      	movs	r2, r0
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	429a      	cmp	r2, r3
 800084a:	d8f7      	bhi.n	800083c <HAL_Delay+0x28>
  {
  }
}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b004      	add	sp, #16
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000064 	.word	0x20000064

08000858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	0002      	movs	r2, r0
 8000860:	1dfb      	adds	r3, r7, #7
 8000862:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000864:	1dfb      	adds	r3, r7, #7
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b7f      	cmp	r3, #127	; 0x7f
 800086a:	d809      	bhi.n	8000880 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800086c:	1dfb      	adds	r3, r7, #7
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	001a      	movs	r2, r3
 8000872:	231f      	movs	r3, #31
 8000874:	401a      	ands	r2, r3
 8000876:	4b04      	ldr	r3, [pc, #16]	; (8000888 <__NVIC_EnableIRQ+0x30>)
 8000878:	2101      	movs	r1, #1
 800087a:	4091      	lsls	r1, r2
 800087c:	000a      	movs	r2, r1
 800087e:	601a      	str	r2, [r3, #0]
  }
}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	b002      	add	sp, #8
 8000886:	bd80      	pop	{r7, pc}
 8000888:	e000e100 	.word	0xe000e100

0800088c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	0002      	movs	r2, r0
 8000894:	6039      	str	r1, [r7, #0]
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800089a:	1dfb      	adds	r3, r7, #7
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b7f      	cmp	r3, #127	; 0x7f
 80008a0:	d828      	bhi.n	80008f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008a2:	4a2f      	ldr	r2, [pc, #188]	; (8000960 <__NVIC_SetPriority+0xd4>)
 80008a4:	1dfb      	adds	r3, r7, #7
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	b25b      	sxtb	r3, r3
 80008aa:	089b      	lsrs	r3, r3, #2
 80008ac:	33c0      	adds	r3, #192	; 0xc0
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	589b      	ldr	r3, [r3, r2]
 80008b2:	1dfa      	adds	r2, r7, #7
 80008b4:	7812      	ldrb	r2, [r2, #0]
 80008b6:	0011      	movs	r1, r2
 80008b8:	2203      	movs	r2, #3
 80008ba:	400a      	ands	r2, r1
 80008bc:	00d2      	lsls	r2, r2, #3
 80008be:	21ff      	movs	r1, #255	; 0xff
 80008c0:	4091      	lsls	r1, r2
 80008c2:	000a      	movs	r2, r1
 80008c4:	43d2      	mvns	r2, r2
 80008c6:	401a      	ands	r2, r3
 80008c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	019b      	lsls	r3, r3, #6
 80008ce:	22ff      	movs	r2, #255	; 0xff
 80008d0:	401a      	ands	r2, r3
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	0018      	movs	r0, r3
 80008d8:	2303      	movs	r3, #3
 80008da:	4003      	ands	r3, r0
 80008dc:	00db      	lsls	r3, r3, #3
 80008de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e0:	481f      	ldr	r0, [pc, #124]	; (8000960 <__NVIC_SetPriority+0xd4>)
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	b25b      	sxtb	r3, r3
 80008e8:	089b      	lsrs	r3, r3, #2
 80008ea:	430a      	orrs	r2, r1
 80008ec:	33c0      	adds	r3, #192	; 0xc0
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008f2:	e031      	b.n	8000958 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008f4:	4a1b      	ldr	r2, [pc, #108]	; (8000964 <__NVIC_SetPriority+0xd8>)
 80008f6:	1dfb      	adds	r3, r7, #7
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	0019      	movs	r1, r3
 80008fc:	230f      	movs	r3, #15
 80008fe:	400b      	ands	r3, r1
 8000900:	3b08      	subs	r3, #8
 8000902:	089b      	lsrs	r3, r3, #2
 8000904:	3306      	adds	r3, #6
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	18d3      	adds	r3, r2, r3
 800090a:	3304      	adds	r3, #4
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	1dfa      	adds	r2, r7, #7
 8000910:	7812      	ldrb	r2, [r2, #0]
 8000912:	0011      	movs	r1, r2
 8000914:	2203      	movs	r2, #3
 8000916:	400a      	ands	r2, r1
 8000918:	00d2      	lsls	r2, r2, #3
 800091a:	21ff      	movs	r1, #255	; 0xff
 800091c:	4091      	lsls	r1, r2
 800091e:	000a      	movs	r2, r1
 8000920:	43d2      	mvns	r2, r2
 8000922:	401a      	ands	r2, r3
 8000924:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	019b      	lsls	r3, r3, #6
 800092a:	22ff      	movs	r2, #255	; 0xff
 800092c:	401a      	ands	r2, r3
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	0018      	movs	r0, r3
 8000934:	2303      	movs	r3, #3
 8000936:	4003      	ands	r3, r0
 8000938:	00db      	lsls	r3, r3, #3
 800093a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800093c:	4809      	ldr	r0, [pc, #36]	; (8000964 <__NVIC_SetPriority+0xd8>)
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	001c      	movs	r4, r3
 8000944:	230f      	movs	r3, #15
 8000946:	4023      	ands	r3, r4
 8000948:	3b08      	subs	r3, #8
 800094a:	089b      	lsrs	r3, r3, #2
 800094c:	430a      	orrs	r2, r1
 800094e:	3306      	adds	r3, #6
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	18c3      	adds	r3, r0, r3
 8000954:	3304      	adds	r3, #4
 8000956:	601a      	str	r2, [r3, #0]
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	b003      	add	sp, #12
 800095e:	bd90      	pop	{r4, r7, pc}
 8000960:	e000e100 	.word	0xe000e100
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3b01      	subs	r3, #1
 8000974:	4a0c      	ldr	r2, [pc, #48]	; (80009a8 <SysTick_Config+0x40>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d901      	bls.n	800097e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800097a:	2301      	movs	r3, #1
 800097c:	e010      	b.n	80009a0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <SysTick_Config+0x44>)
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	3a01      	subs	r2, #1
 8000984:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000986:	2301      	movs	r3, #1
 8000988:	425b      	negs	r3, r3
 800098a:	2103      	movs	r1, #3
 800098c:	0018      	movs	r0, r3
 800098e:	f7ff ff7d 	bl	800088c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <SysTick_Config+0x44>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <SysTick_Config+0x44>)
 800099a:	2207      	movs	r2, #7
 800099c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800099e:	2300      	movs	r3, #0
}
 80009a0:	0018      	movs	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b002      	add	sp, #8
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	00ffffff 	.word	0x00ffffff
 80009ac:	e000e010 	.word	0xe000e010

080009b0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60b9      	str	r1, [r7, #8]
 80009b8:	607a      	str	r2, [r7, #4]
 80009ba:	210f      	movs	r1, #15
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	1c02      	adds	r2, r0, #0
 80009c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	b25b      	sxtb	r3, r3
 80009ca:	0011      	movs	r1, r2
 80009cc:	0018      	movs	r0, r3
 80009ce:	f7ff ff5d 	bl	800088c <__NVIC_SetPriority>
}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b004      	add	sp, #16
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	0002      	movs	r2, r0
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b25b      	sxtb	r3, r3
 80009ec:	0018      	movs	r0, r3
 80009ee:	f7ff ff33 	bl	8000858 <__NVIC_EnableIRQ>
}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b002      	add	sp, #8
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	0018      	movs	r0, r3
 8000a06:	f7ff ffaf 	bl	8000968 <SysTick_Config>
 8000a0a:	0003      	movs	r3, r0
}
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b002      	add	sp, #8
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	18fb      	adds	r3, r7, r3
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2221      	movs	r2, #33	; 0x21
 8000a28:	5c9b      	ldrb	r3, [r3, r2]
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d007      	beq.n	8000a40 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2204      	movs	r2, #4
 8000a34:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a36:	230f      	movs	r3, #15
 8000a38:	18fb      	adds	r3, r7, r3
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	701a      	strb	r2, [r3, #0]
 8000a3e:	e028      	b.n	8000a92 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	210e      	movs	r1, #14
 8000a4c:	438a      	bics	r2, r1
 8000a4e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	438a      	bics	r2, r1
 8000a5e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a68:	2101      	movs	r1, #1
 8000a6a:	4091      	lsls	r1, r2
 8000a6c:	000a      	movs	r2, r1
 8000a6e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2221      	movs	r2, #33	; 0x21
 8000a74:	2101      	movs	r1, #1
 8000a76:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2220      	movs	r2, #32
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d004      	beq.n	8000a92 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	0010      	movs	r0, r2
 8000a90:	4798      	blx	r3
    } 
  }
  return status;
 8000a92:	230f      	movs	r3, #15
 8000a94:	18fb      	adds	r3, r7, r3
 8000a96:	781b      	ldrb	r3, [r3, #0]
}
 8000a98:	0018      	movs	r0, r3
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b004      	add	sp, #16
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aae:	e155      	b.n	8000d5c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	697a      	ldr	r2, [r7, #20]
 8000ab8:	4091      	lsls	r1, r2
 8000aba:	000a      	movs	r2, r1
 8000abc:	4013      	ands	r3, r2
 8000abe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d100      	bne.n	8000ac8 <HAL_GPIO_Init+0x28>
 8000ac6:	e146      	b.n	8000d56 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d00b      	beq.n	8000ae8 <HAL_GPIO_Init+0x48>
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	d007      	beq.n	8000ae8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000adc:	2b11      	cmp	r3, #17
 8000ade:	d003      	beq.n	8000ae8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2b12      	cmp	r3, #18
 8000ae6:	d130      	bne.n	8000b4a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	2203      	movs	r2, #3
 8000af4:	409a      	lsls	r2, r3
 8000af6:	0013      	movs	r3, r2
 8000af8:	43da      	mvns	r2, r3
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	4013      	ands	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	68da      	ldr	r2, [r3, #12]
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	409a      	lsls	r2, r3
 8000b0a:	0013      	movs	r3, r2
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b1e:	2201      	movs	r2, #1
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	409a      	lsls	r2, r3
 8000b24:	0013      	movs	r3, r2
 8000b26:	43da      	mvns	r2, r3
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	091b      	lsrs	r3, r3, #4
 8000b34:	2201      	movs	r2, #1
 8000b36:	401a      	ands	r2, r3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	409a      	lsls	r2, r3
 8000b3c:	0013      	movs	r3, r2
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	2203      	movs	r2, #3
 8000b56:	409a      	lsls	r2, r3
 8000b58:	0013      	movs	r3, r2
 8000b5a:	43da      	mvns	r2, r3
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	689a      	ldr	r2, [r3, #8]
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	409a      	lsls	r2, r3
 8000b6c:	0013      	movs	r3, r2
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d003      	beq.n	8000b8a <HAL_GPIO_Init+0xea>
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2b12      	cmp	r3, #18
 8000b88:	d123      	bne.n	8000bd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	08da      	lsrs	r2, r3, #3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3208      	adds	r2, #8
 8000b92:	0092      	lsls	r2, r2, #2
 8000b94:	58d3      	ldr	r3, [r2, r3]
 8000b96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	2207      	movs	r2, #7
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	220f      	movs	r2, #15
 8000ba2:	409a      	lsls	r2, r3
 8000ba4:	0013      	movs	r3, r2
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	691a      	ldr	r2, [r3, #16]
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	2107      	movs	r1, #7
 8000bb6:	400b      	ands	r3, r1
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	409a      	lsls	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	08da      	lsrs	r2, r3, #3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3208      	adds	r2, #8
 8000bcc:	0092      	lsls	r2, r2, #2
 8000bce:	6939      	ldr	r1, [r7, #16]
 8000bd0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	2203      	movs	r2, #3
 8000bde:	409a      	lsls	r2, r3
 8000be0:	0013      	movs	r3, r2
 8000be2:	43da      	mvns	r2, r3
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	4013      	ands	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	2203      	movs	r2, #3
 8000bf0:	401a      	ands	r2, r3
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	409a      	lsls	r2, r3
 8000bf8:	0013      	movs	r3, r2
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685a      	ldr	r2, [r3, #4]
 8000c0a:	2380      	movs	r3, #128	; 0x80
 8000c0c:	055b      	lsls	r3, r3, #21
 8000c0e:	4013      	ands	r3, r2
 8000c10:	d100      	bne.n	8000c14 <HAL_GPIO_Init+0x174>
 8000c12:	e0a0      	b.n	8000d56 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c14:	4b57      	ldr	r3, [pc, #348]	; (8000d74 <HAL_GPIO_Init+0x2d4>)
 8000c16:	699a      	ldr	r2, [r3, #24]
 8000c18:	4b56      	ldr	r3, [pc, #344]	; (8000d74 <HAL_GPIO_Init+0x2d4>)
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	619a      	str	r2, [r3, #24]
 8000c20:	4b54      	ldr	r3, [pc, #336]	; (8000d74 <HAL_GPIO_Init+0x2d4>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	2201      	movs	r2, #1
 8000c26:	4013      	ands	r3, r2
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c2c:	4a52      	ldr	r2, [pc, #328]	; (8000d78 <HAL_GPIO_Init+0x2d8>)
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	089b      	lsrs	r3, r3, #2
 8000c32:	3302      	adds	r3, #2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	589b      	ldr	r3, [r3, r2]
 8000c38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	4013      	ands	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	220f      	movs	r2, #15
 8000c44:	409a      	lsls	r2, r3
 8000c46:	0013      	movs	r3, r2
 8000c48:	43da      	mvns	r2, r3
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	2390      	movs	r3, #144	; 0x90
 8000c54:	05db      	lsls	r3, r3, #23
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d019      	beq.n	8000c8e <HAL_GPIO_Init+0x1ee>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a47      	ldr	r2, [pc, #284]	; (8000d7c <HAL_GPIO_Init+0x2dc>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d013      	beq.n	8000c8a <HAL_GPIO_Init+0x1ea>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a46      	ldr	r2, [pc, #280]	; (8000d80 <HAL_GPIO_Init+0x2e0>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d00d      	beq.n	8000c86 <HAL_GPIO_Init+0x1e6>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a45      	ldr	r2, [pc, #276]	; (8000d84 <HAL_GPIO_Init+0x2e4>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d007      	beq.n	8000c82 <HAL_GPIO_Init+0x1e2>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a44      	ldr	r2, [pc, #272]	; (8000d88 <HAL_GPIO_Init+0x2e8>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d101      	bne.n	8000c7e <HAL_GPIO_Init+0x1de>
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	e008      	b.n	8000c90 <HAL_GPIO_Init+0x1f0>
 8000c7e:	2305      	movs	r3, #5
 8000c80:	e006      	b.n	8000c90 <HAL_GPIO_Init+0x1f0>
 8000c82:	2303      	movs	r3, #3
 8000c84:	e004      	b.n	8000c90 <HAL_GPIO_Init+0x1f0>
 8000c86:	2302      	movs	r3, #2
 8000c88:	e002      	b.n	8000c90 <HAL_GPIO_Init+0x1f0>
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e000      	b.n	8000c90 <HAL_GPIO_Init+0x1f0>
 8000c8e:	2300      	movs	r3, #0
 8000c90:	697a      	ldr	r2, [r7, #20]
 8000c92:	2103      	movs	r1, #3
 8000c94:	400a      	ands	r2, r1
 8000c96:	0092      	lsls	r2, r2, #2
 8000c98:	4093      	lsls	r3, r2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ca0:	4935      	ldr	r1, [pc, #212]	; (8000d78 <HAL_GPIO_Init+0x2d8>)
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	089b      	lsrs	r3, r3, #2
 8000ca6:	3302      	adds	r3, #2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cae:	4b37      	ldr	r3, [pc, #220]	; (8000d8c <HAL_GPIO_Init+0x2ec>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	2380      	movs	r3, #128	; 0x80
 8000cc4:	025b      	lsls	r3, r3, #9
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	d003      	beq.n	8000cd2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cd2:	4b2e      	ldr	r3, [pc, #184]	; (8000d8c <HAL_GPIO_Init+0x2ec>)
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000cd8:	4b2c      	ldr	r3, [pc, #176]	; (8000d8c <HAL_GPIO_Init+0x2ec>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	43da      	mvns	r2, r3
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	2380      	movs	r3, #128	; 0x80
 8000cee:	029b      	lsls	r3, r3, #10
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	d003      	beq.n	8000cfc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cfc:	4b23      	ldr	r3, [pc, #140]	; (8000d8c <HAL_GPIO_Init+0x2ec>)
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d02:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <HAL_GPIO_Init+0x2ec>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685a      	ldr	r2, [r3, #4]
 8000d16:	2380      	movs	r3, #128	; 0x80
 8000d18:	035b      	lsls	r3, r3, #13
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	d003      	beq.n	8000d26 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <HAL_GPIO_Init+0x2ec>)
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d2c:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <HAL_GPIO_Init+0x2ec>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	43da      	mvns	r2, r3
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	2380      	movs	r3, #128	; 0x80
 8000d42:	039b      	lsls	r3, r3, #14
 8000d44:	4013      	ands	r3, r2
 8000d46:	d003      	beq.n	8000d50 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d50:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_GPIO_Init+0x2ec>)
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	40da      	lsrs	r2, r3
 8000d64:	1e13      	subs	r3, r2, #0
 8000d66:	d000      	beq.n	8000d6a <HAL_GPIO_Init+0x2ca>
 8000d68:	e6a2      	b.n	8000ab0 <HAL_GPIO_Init+0x10>
  } 
}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b006      	add	sp, #24
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010000 	.word	0x40010000
 8000d7c:	48000400 	.word	0x48000400
 8000d80:	48000800 	.word	0x48000800
 8000d84:	48000c00 	.word	0x48000c00
 8000d88:	48001000 	.word	0x48001000
 8000d8c:	40010400 	.word	0x40010400

08000d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	0008      	movs	r0, r1
 8000d9a:	0011      	movs	r1, r2
 8000d9c:	1cbb      	adds	r3, r7, #2
 8000d9e:	1c02      	adds	r2, r0, #0
 8000da0:	801a      	strh	r2, [r3, #0]
 8000da2:	1c7b      	adds	r3, r7, #1
 8000da4:	1c0a      	adds	r2, r1, #0
 8000da6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000da8:	1c7b      	adds	r3, r7, #1
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d004      	beq.n	8000dba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000db0:	1cbb      	adds	r3, r7, #2
 8000db2:	881a      	ldrh	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000db8:	e003      	b.n	8000dc2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dba:	1cbb      	adds	r3, r7, #2
 8000dbc:	881a      	ldrh	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b002      	add	sp, #8
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b084      	sub	sp, #16
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	000a      	movs	r2, r1
 8000dd4:	1cbb      	adds	r3, r7, #2
 8000dd6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	695b      	ldr	r3, [r3, #20]
 8000ddc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000dde:	1cbb      	adds	r3, r7, #2
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	4013      	ands	r3, r2
 8000de6:	041a      	lsls	r2, r3, #16
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	1cb9      	adds	r1, r7, #2
 8000dee:	8809      	ldrh	r1, [r1, #0]
 8000df0:	400b      	ands	r3, r1
 8000df2:	431a      	orrs	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	619a      	str	r2, [r3, #24]
}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b004      	add	sp, #16
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	0002      	movs	r2, r0
 8000e08:	1dbb      	adds	r3, r7, #6
 8000e0a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e0c:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	1dba      	adds	r2, r7, #6
 8000e12:	8812      	ldrh	r2, [r2, #0]
 8000e14:	4013      	ands	r3, r2
 8000e16:	d008      	beq.n	8000e2a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000e1a:	1dba      	adds	r2, r7, #6
 8000e1c:	8812      	ldrh	r2, [r2, #0]
 8000e1e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e20:	1dbb      	adds	r3, r7, #6
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	0018      	movs	r0, r3
 8000e26:	f7ff fb8d 	bl	8000544 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b002      	add	sp, #8
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	40010400 	.word	0x40010400

08000e38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d102      	bne.n	8000e4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	f000 fb76 	bl	8001538 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2201      	movs	r2, #1
 8000e52:	4013      	ands	r3, r2
 8000e54:	d100      	bne.n	8000e58 <HAL_RCC_OscConfig+0x20>
 8000e56:	e08e      	b.n	8000f76 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e58:	4bc5      	ldr	r3, [pc, #788]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	220c      	movs	r2, #12
 8000e5e:	4013      	ands	r3, r2
 8000e60:	2b04      	cmp	r3, #4
 8000e62:	d00e      	beq.n	8000e82 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e64:	4bc2      	ldr	r3, [pc, #776]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	220c      	movs	r2, #12
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	2b08      	cmp	r3, #8
 8000e6e:	d117      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x68>
 8000e70:	4bbf      	ldr	r3, [pc, #764]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	23c0      	movs	r3, #192	; 0xc0
 8000e76:	025b      	lsls	r3, r3, #9
 8000e78:	401a      	ands	r2, r3
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	025b      	lsls	r3, r3, #9
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d10e      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e82:	4bbb      	ldr	r3, [pc, #748]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	2380      	movs	r3, #128	; 0x80
 8000e88:	029b      	lsls	r3, r3, #10
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	d100      	bne.n	8000e90 <HAL_RCC_OscConfig+0x58>
 8000e8e:	e071      	b.n	8000f74 <HAL_RCC_OscConfig+0x13c>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d000      	beq.n	8000e9a <HAL_RCC_OscConfig+0x62>
 8000e98:	e06c      	b.n	8000f74 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	f000 fb4c 	bl	8001538 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d107      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x80>
 8000ea8:	4bb1      	ldr	r3, [pc, #708]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4bb0      	ldr	r3, [pc, #704]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000eae:	2180      	movs	r1, #128	; 0x80
 8000eb0:	0249      	lsls	r1, r1, #9
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	e02f      	b.n	8000f18 <HAL_RCC_OscConfig+0xe0>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d10c      	bne.n	8000eda <HAL_RCC_OscConfig+0xa2>
 8000ec0:	4bab      	ldr	r3, [pc, #684]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4baa      	ldr	r3, [pc, #680]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000ec6:	49ab      	ldr	r1, [pc, #684]	; (8001174 <HAL_RCC_OscConfig+0x33c>)
 8000ec8:	400a      	ands	r2, r1
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	4ba8      	ldr	r3, [pc, #672]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4ba7      	ldr	r3, [pc, #668]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000ed2:	49a9      	ldr	r1, [pc, #676]	; (8001178 <HAL_RCC_OscConfig+0x340>)
 8000ed4:	400a      	ands	r2, r1
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	e01e      	b.n	8000f18 <HAL_RCC_OscConfig+0xe0>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b05      	cmp	r3, #5
 8000ee0:	d10e      	bne.n	8000f00 <HAL_RCC_OscConfig+0xc8>
 8000ee2:	4ba3      	ldr	r3, [pc, #652]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	4ba2      	ldr	r3, [pc, #648]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000ee8:	2180      	movs	r1, #128	; 0x80
 8000eea:	02c9      	lsls	r1, r1, #11
 8000eec:	430a      	orrs	r2, r1
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	4b9f      	ldr	r3, [pc, #636]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b9e      	ldr	r3, [pc, #632]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	0249      	lsls	r1, r1, #9
 8000efa:	430a      	orrs	r2, r1
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	e00b      	b.n	8000f18 <HAL_RCC_OscConfig+0xe0>
 8000f00:	4b9b      	ldr	r3, [pc, #620]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b9a      	ldr	r3, [pc, #616]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000f06:	499b      	ldr	r1, [pc, #620]	; (8001174 <HAL_RCC_OscConfig+0x33c>)
 8000f08:	400a      	ands	r2, r1
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	4b98      	ldr	r3, [pc, #608]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b97      	ldr	r3, [pc, #604]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000f12:	4999      	ldr	r1, [pc, #612]	; (8001178 <HAL_RCC_OscConfig+0x340>)
 8000f14:	400a      	ands	r2, r1
 8000f16:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d014      	beq.n	8000f4a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f20:	f7ff fc6e 	bl	8000800 <HAL_GetTick>
 8000f24:	0003      	movs	r3, r0
 8000f26:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f28:	e008      	b.n	8000f3c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f2a:	f7ff fc69 	bl	8000800 <HAL_GetTick>
 8000f2e:	0002      	movs	r2, r0
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b64      	cmp	r3, #100	; 0x64
 8000f36:	d901      	bls.n	8000f3c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e2fd      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f3c:	4b8c      	ldr	r3, [pc, #560]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	029b      	lsls	r3, r3, #10
 8000f44:	4013      	ands	r3, r2
 8000f46:	d0f0      	beq.n	8000f2a <HAL_RCC_OscConfig+0xf2>
 8000f48:	e015      	b.n	8000f76 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4a:	f7ff fc59 	bl	8000800 <HAL_GetTick>
 8000f4e:	0003      	movs	r3, r0
 8000f50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f54:	f7ff fc54 	bl	8000800 <HAL_GetTick>
 8000f58:	0002      	movs	r2, r0
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b64      	cmp	r3, #100	; 0x64
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e2e8      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f66:	4b82      	ldr	r3, [pc, #520]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	029b      	lsls	r3, r3, #10
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d1f0      	bne.n	8000f54 <HAL_RCC_OscConfig+0x11c>
 8000f72:	e000      	b.n	8000f76 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f74:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	d100      	bne.n	8000f82 <HAL_RCC_OscConfig+0x14a>
 8000f80:	e06c      	b.n	800105c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f82:	4b7b      	ldr	r3, [pc, #492]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	220c      	movs	r2, #12
 8000f88:	4013      	ands	r3, r2
 8000f8a:	d00e      	beq.n	8000faa <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f8c:	4b78      	ldr	r3, [pc, #480]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	220c      	movs	r2, #12
 8000f92:	4013      	ands	r3, r2
 8000f94:	2b08      	cmp	r3, #8
 8000f96:	d11f      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x1a0>
 8000f98:	4b75      	ldr	r3, [pc, #468]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	23c0      	movs	r3, #192	; 0xc0
 8000f9e:	025b      	lsls	r3, r3, #9
 8000fa0:	401a      	ands	r2, r3
 8000fa2:	2380      	movs	r3, #128	; 0x80
 8000fa4:	021b      	lsls	r3, r3, #8
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d116      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000faa:	4b71      	ldr	r3, [pc, #452]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2202      	movs	r2, #2
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	d005      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x188>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d001      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e2bb      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc0:	4b6b      	ldr	r3, [pc, #428]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	22f8      	movs	r2, #248	; 0xf8
 8000fc6:	4393      	bics	r3, r2
 8000fc8:	0019      	movs	r1, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	691b      	ldr	r3, [r3, #16]
 8000fce:	00da      	lsls	r2, r3, #3
 8000fd0:	4b67      	ldr	r3, [pc, #412]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd6:	e041      	b.n	800105c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d024      	beq.n	800102a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fe0:	4b63      	ldr	r3, [pc, #396]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b62      	ldr	r3, [pc, #392]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fec:	f7ff fc08 	bl	8000800 <HAL_GetTick>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ff6:	f7ff fc03 	bl	8000800 <HAL_GetTick>
 8000ffa:	0002      	movs	r2, r0
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e297      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001008:	4b59      	ldr	r3, [pc, #356]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2202      	movs	r2, #2
 800100e:	4013      	ands	r3, r2
 8001010:	d0f1      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001012:	4b57      	ldr	r3, [pc, #348]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	22f8      	movs	r2, #248	; 0xf8
 8001018:	4393      	bics	r3, r2
 800101a:	0019      	movs	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	00da      	lsls	r2, r3, #3
 8001022:	4b53      	ldr	r3, [pc, #332]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8001024:	430a      	orrs	r2, r1
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	e018      	b.n	800105c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800102a:	4b51      	ldr	r3, [pc, #324]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	4b50      	ldr	r3, [pc, #320]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8001030:	2101      	movs	r1, #1
 8001032:	438a      	bics	r2, r1
 8001034:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001036:	f7ff fbe3 	bl	8000800 <HAL_GetTick>
 800103a:	0003      	movs	r3, r0
 800103c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001040:	f7ff fbde 	bl	8000800 <HAL_GetTick>
 8001044:	0002      	movs	r2, r0
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e272      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001052:	4b47      	ldr	r3, [pc, #284]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2202      	movs	r2, #2
 8001058:	4013      	ands	r3, r2
 800105a:	d1f1      	bne.n	8001040 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2208      	movs	r2, #8
 8001062:	4013      	ands	r3, r2
 8001064:	d036      	beq.n	80010d4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d019      	beq.n	80010a2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800106e:	4b40      	ldr	r3, [pc, #256]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8001070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001072:	4b3f      	ldr	r3, [pc, #252]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8001074:	2101      	movs	r1, #1
 8001076:	430a      	orrs	r2, r1
 8001078:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800107a:	f7ff fbc1 	bl	8000800 <HAL_GetTick>
 800107e:	0003      	movs	r3, r0
 8001080:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001084:	f7ff fbbc 	bl	8000800 <HAL_GetTick>
 8001088:	0002      	movs	r2, r0
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e250      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001096:	4b36      	ldr	r3, [pc, #216]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8001098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109a:	2202      	movs	r2, #2
 800109c:	4013      	ands	r3, r2
 800109e:	d0f1      	beq.n	8001084 <HAL_RCC_OscConfig+0x24c>
 80010a0:	e018      	b.n	80010d4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010a2:	4b33      	ldr	r3, [pc, #204]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 80010a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010a6:	4b32      	ldr	r3, [pc, #200]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 80010a8:	2101      	movs	r1, #1
 80010aa:	438a      	bics	r2, r1
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ae:	f7ff fba7 	bl	8000800 <HAL_GetTick>
 80010b2:	0003      	movs	r3, r0
 80010b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010b6:	e008      	b.n	80010ca <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010b8:	f7ff fba2 	bl	8000800 <HAL_GetTick>
 80010bc:	0002      	movs	r2, r0
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e236      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ca:	4b29      	ldr	r3, [pc, #164]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 80010cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ce:	2202      	movs	r2, #2
 80010d0:	4013      	ands	r3, r2
 80010d2:	d1f1      	bne.n	80010b8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2204      	movs	r2, #4
 80010da:	4013      	ands	r3, r2
 80010dc:	d100      	bne.n	80010e0 <HAL_RCC_OscConfig+0x2a8>
 80010de:	e0b5      	b.n	800124c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010e0:	231f      	movs	r3, #31
 80010e2:	18fb      	adds	r3, r7, r3
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010e8:	4b21      	ldr	r3, [pc, #132]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 80010ea:	69da      	ldr	r2, [r3, #28]
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	055b      	lsls	r3, r3, #21
 80010f0:	4013      	ands	r3, r2
 80010f2:	d111      	bne.n	8001118 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010f4:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 80010f6:	69da      	ldr	r2, [r3, #28]
 80010f8:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 80010fa:	2180      	movs	r1, #128	; 0x80
 80010fc:	0549      	lsls	r1, r1, #21
 80010fe:	430a      	orrs	r2, r1
 8001100:	61da      	str	r2, [r3, #28]
 8001102:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8001104:	69da      	ldr	r2, [r3, #28]
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	055b      	lsls	r3, r3, #21
 800110a:	4013      	ands	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001110:	231f      	movs	r3, #31
 8001112:	18fb      	adds	r3, r7, r3
 8001114:	2201      	movs	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <HAL_RCC_OscConfig+0x344>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	4013      	ands	r3, r2
 8001122:	d11a      	bne.n	800115a <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <HAL_RCC_OscConfig+0x344>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <HAL_RCC_OscConfig+0x344>)
 800112a:	2180      	movs	r1, #128	; 0x80
 800112c:	0049      	lsls	r1, r1, #1
 800112e:	430a      	orrs	r2, r1
 8001130:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001132:	f7ff fb65 	bl	8000800 <HAL_GetTick>
 8001136:	0003      	movs	r3, r0
 8001138:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800113c:	f7ff fb60 	bl	8000800 <HAL_GetTick>
 8001140:	0002      	movs	r2, r0
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b64      	cmp	r3, #100	; 0x64
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e1f4      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_RCC_OscConfig+0x344>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	4013      	ands	r3, r2
 8001158:	d0f0      	beq.n	800113c <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d10e      	bne.n	8001180 <HAL_RCC_OscConfig+0x348>
 8001162:	4b03      	ldr	r3, [pc, #12]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8001164:	6a1a      	ldr	r2, [r3, #32]
 8001166:	4b02      	ldr	r3, [pc, #8]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8001168:	2101      	movs	r1, #1
 800116a:	430a      	orrs	r2, r1
 800116c:	621a      	str	r2, [r3, #32]
 800116e:	e035      	b.n	80011dc <HAL_RCC_OscConfig+0x3a4>
 8001170:	40021000 	.word	0x40021000
 8001174:	fffeffff 	.word	0xfffeffff
 8001178:	fffbffff 	.word	0xfffbffff
 800117c:	40007000 	.word	0x40007000
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d10c      	bne.n	80011a2 <HAL_RCC_OscConfig+0x36a>
 8001188:	4bca      	ldr	r3, [pc, #808]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 800118a:	6a1a      	ldr	r2, [r3, #32]
 800118c:	4bc9      	ldr	r3, [pc, #804]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 800118e:	2101      	movs	r1, #1
 8001190:	438a      	bics	r2, r1
 8001192:	621a      	str	r2, [r3, #32]
 8001194:	4bc7      	ldr	r3, [pc, #796]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001196:	6a1a      	ldr	r2, [r3, #32]
 8001198:	4bc6      	ldr	r3, [pc, #792]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 800119a:	2104      	movs	r1, #4
 800119c:	438a      	bics	r2, r1
 800119e:	621a      	str	r2, [r3, #32]
 80011a0:	e01c      	b.n	80011dc <HAL_RCC_OscConfig+0x3a4>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2b05      	cmp	r3, #5
 80011a8:	d10c      	bne.n	80011c4 <HAL_RCC_OscConfig+0x38c>
 80011aa:	4bc2      	ldr	r3, [pc, #776]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80011ac:	6a1a      	ldr	r2, [r3, #32]
 80011ae:	4bc1      	ldr	r3, [pc, #772]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80011b0:	2104      	movs	r1, #4
 80011b2:	430a      	orrs	r2, r1
 80011b4:	621a      	str	r2, [r3, #32]
 80011b6:	4bbf      	ldr	r3, [pc, #764]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80011b8:	6a1a      	ldr	r2, [r3, #32]
 80011ba:	4bbe      	ldr	r3, [pc, #760]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80011bc:	2101      	movs	r1, #1
 80011be:	430a      	orrs	r2, r1
 80011c0:	621a      	str	r2, [r3, #32]
 80011c2:	e00b      	b.n	80011dc <HAL_RCC_OscConfig+0x3a4>
 80011c4:	4bbb      	ldr	r3, [pc, #748]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80011c6:	6a1a      	ldr	r2, [r3, #32]
 80011c8:	4bba      	ldr	r3, [pc, #744]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80011ca:	2101      	movs	r1, #1
 80011cc:	438a      	bics	r2, r1
 80011ce:	621a      	str	r2, [r3, #32]
 80011d0:	4bb8      	ldr	r3, [pc, #736]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80011d2:	6a1a      	ldr	r2, [r3, #32]
 80011d4:	4bb7      	ldr	r3, [pc, #732]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80011d6:	2104      	movs	r1, #4
 80011d8:	438a      	bics	r2, r1
 80011da:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d014      	beq.n	800120e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e4:	f7ff fb0c 	bl	8000800 <HAL_GetTick>
 80011e8:	0003      	movs	r3, r0
 80011ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ec:	e009      	b.n	8001202 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ee:	f7ff fb07 	bl	8000800 <HAL_GetTick>
 80011f2:	0002      	movs	r2, r0
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	4aaf      	ldr	r2, [pc, #700]	; (80014b8 <HAL_RCC_OscConfig+0x680>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e19a      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001202:	4bac      	ldr	r3, [pc, #688]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001204:	6a1b      	ldr	r3, [r3, #32]
 8001206:	2202      	movs	r2, #2
 8001208:	4013      	ands	r3, r2
 800120a:	d0f0      	beq.n	80011ee <HAL_RCC_OscConfig+0x3b6>
 800120c:	e013      	b.n	8001236 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800120e:	f7ff faf7 	bl	8000800 <HAL_GetTick>
 8001212:	0003      	movs	r3, r0
 8001214:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001216:	e009      	b.n	800122c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001218:	f7ff faf2 	bl	8000800 <HAL_GetTick>
 800121c:	0002      	movs	r2, r0
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	4aa5      	ldr	r2, [pc, #660]	; (80014b8 <HAL_RCC_OscConfig+0x680>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e185      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800122c:	4ba1      	ldr	r3, [pc, #644]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	2202      	movs	r2, #2
 8001232:	4013      	ands	r3, r2
 8001234:	d1f0      	bne.n	8001218 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001236:	231f      	movs	r3, #31
 8001238:	18fb      	adds	r3, r7, r3
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d105      	bne.n	800124c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001240:	4b9c      	ldr	r3, [pc, #624]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001242:	69da      	ldr	r2, [r3, #28]
 8001244:	4b9b      	ldr	r3, [pc, #620]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001246:	499d      	ldr	r1, [pc, #628]	; (80014bc <HAL_RCC_OscConfig+0x684>)
 8001248:	400a      	ands	r2, r1
 800124a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2210      	movs	r2, #16
 8001252:	4013      	ands	r3, r2
 8001254:	d063      	beq.n	800131e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d12a      	bne.n	80012b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800125e:	4b95      	ldr	r3, [pc, #596]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001262:	4b94      	ldr	r3, [pc, #592]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001264:	2104      	movs	r1, #4
 8001266:	430a      	orrs	r2, r1
 8001268:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800126a:	4b92      	ldr	r3, [pc, #584]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 800126c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800126e:	4b91      	ldr	r3, [pc, #580]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001270:	2101      	movs	r1, #1
 8001272:	430a      	orrs	r2, r1
 8001274:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001276:	f7ff fac3 	bl	8000800 <HAL_GetTick>
 800127a:	0003      	movs	r3, r0
 800127c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001280:	f7ff fabe 	bl	8000800 <HAL_GetTick>
 8001284:	0002      	movs	r2, r0
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e152      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001292:	4b88      	ldr	r3, [pc, #544]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001296:	2202      	movs	r2, #2
 8001298:	4013      	ands	r3, r2
 800129a:	d0f1      	beq.n	8001280 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800129c:	4b85      	ldr	r3, [pc, #532]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 800129e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a0:	22f8      	movs	r2, #248	; 0xf8
 80012a2:	4393      	bics	r3, r2
 80012a4:	0019      	movs	r1, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	00da      	lsls	r2, r3, #3
 80012ac:	4b81      	ldr	r3, [pc, #516]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80012ae:	430a      	orrs	r2, r1
 80012b0:	635a      	str	r2, [r3, #52]	; 0x34
 80012b2:	e034      	b.n	800131e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	3305      	adds	r3, #5
 80012ba:	d111      	bne.n	80012e0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80012bc:	4b7d      	ldr	r3, [pc, #500]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80012be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012c0:	4b7c      	ldr	r3, [pc, #496]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80012c2:	2104      	movs	r1, #4
 80012c4:	438a      	bics	r2, r1
 80012c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012c8:	4b7a      	ldr	r3, [pc, #488]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80012ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012cc:	22f8      	movs	r2, #248	; 0xf8
 80012ce:	4393      	bics	r3, r2
 80012d0:	0019      	movs	r1, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	00da      	lsls	r2, r3, #3
 80012d8:	4b76      	ldr	r3, [pc, #472]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80012da:	430a      	orrs	r2, r1
 80012dc:	635a      	str	r2, [r3, #52]	; 0x34
 80012de:	e01e      	b.n	800131e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80012e0:	4b74      	ldr	r3, [pc, #464]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80012e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012e4:	4b73      	ldr	r3, [pc, #460]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80012e6:	2104      	movs	r1, #4
 80012e8:	430a      	orrs	r2, r1
 80012ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80012ec:	4b71      	ldr	r3, [pc, #452]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80012ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012f0:	4b70      	ldr	r3, [pc, #448]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80012f2:	2101      	movs	r1, #1
 80012f4:	438a      	bics	r2, r1
 80012f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f8:	f7ff fa82 	bl	8000800 <HAL_GetTick>
 80012fc:	0003      	movs	r3, r0
 80012fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001302:	f7ff fa7d 	bl	8000800 <HAL_GetTick>
 8001306:	0002      	movs	r2, r0
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e111      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001314:	4b67      	ldr	r3, [pc, #412]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001318:	2202      	movs	r2, #2
 800131a:	4013      	ands	r3, r2
 800131c:	d1f1      	bne.n	8001302 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2220      	movs	r2, #32
 8001324:	4013      	ands	r3, r2
 8001326:	d05c      	beq.n	80013e2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001328:	4b62      	ldr	r3, [pc, #392]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	220c      	movs	r2, #12
 800132e:	4013      	ands	r3, r2
 8001330:	2b0c      	cmp	r3, #12
 8001332:	d00e      	beq.n	8001352 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001334:	4b5f      	ldr	r3, [pc, #380]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	220c      	movs	r2, #12
 800133a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800133c:	2b08      	cmp	r3, #8
 800133e:	d114      	bne.n	800136a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001340:	4b5c      	ldr	r3, [pc, #368]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	23c0      	movs	r3, #192	; 0xc0
 8001346:	025b      	lsls	r3, r3, #9
 8001348:	401a      	ands	r2, r3
 800134a:	23c0      	movs	r3, #192	; 0xc0
 800134c:	025b      	lsls	r3, r3, #9
 800134e:	429a      	cmp	r2, r3
 8001350:	d10b      	bne.n	800136a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001352:	4b58      	ldr	r3, [pc, #352]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	025b      	lsls	r3, r3, #9
 800135a:	4013      	ands	r3, r2
 800135c:	d040      	beq.n	80013e0 <HAL_RCC_OscConfig+0x5a8>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d03c      	beq.n	80013e0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e0e6      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d01b      	beq.n	80013aa <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001372:	4b50      	ldr	r3, [pc, #320]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001376:	4b4f      	ldr	r3, [pc, #316]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001378:	2180      	movs	r1, #128	; 0x80
 800137a:	0249      	lsls	r1, r1, #9
 800137c:	430a      	orrs	r2, r1
 800137e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff fa3e 	bl	8000800 <HAL_GetTick>
 8001384:	0003      	movs	r3, r0
 8001386:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800138a:	f7ff fa39 	bl	8000800 <HAL_GetTick>
 800138e:	0002      	movs	r2, r0
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e0cd      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800139c:	4b45      	ldr	r3, [pc, #276]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 800139e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	025b      	lsls	r3, r3, #9
 80013a4:	4013      	ands	r3, r2
 80013a6:	d0f0      	beq.n	800138a <HAL_RCC_OscConfig+0x552>
 80013a8:	e01b      	b.n	80013e2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80013aa:	4b42      	ldr	r3, [pc, #264]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80013ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ae:	4b41      	ldr	r3, [pc, #260]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80013b0:	4943      	ldr	r1, [pc, #268]	; (80014c0 <HAL_RCC_OscConfig+0x688>)
 80013b2:	400a      	ands	r2, r1
 80013b4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b6:	f7ff fa23 	bl	8000800 <HAL_GetTick>
 80013ba:	0003      	movs	r3, r0
 80013bc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013c0:	f7ff fa1e 	bl	8000800 <HAL_GetTick>
 80013c4:	0002      	movs	r2, r0
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e0b2      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80013d2:	4b38      	ldr	r3, [pc, #224]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80013d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013d6:	2380      	movs	r3, #128	; 0x80
 80013d8:	025b      	lsls	r3, r3, #9
 80013da:	4013      	ands	r3, r2
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0x588>
 80013de:	e000      	b.n	80013e2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80013e0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d100      	bne.n	80013ec <HAL_RCC_OscConfig+0x5b4>
 80013ea:	e0a4      	b.n	8001536 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013ec:	4b31      	ldr	r3, [pc, #196]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	220c      	movs	r2, #12
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b08      	cmp	r3, #8
 80013f6:	d100      	bne.n	80013fa <HAL_RCC_OscConfig+0x5c2>
 80013f8:	e078      	b.n	80014ec <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d14c      	bne.n	800149c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001402:	4b2c      	ldr	r3, [pc, #176]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001408:	492e      	ldr	r1, [pc, #184]	; (80014c4 <HAL_RCC_OscConfig+0x68c>)
 800140a:	400a      	ands	r2, r1
 800140c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140e:	f7ff f9f7 	bl	8000800 <HAL_GetTick>
 8001412:	0003      	movs	r3, r0
 8001414:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001418:	f7ff f9f2 	bl	8000800 <HAL_GetTick>
 800141c:	0002      	movs	r2, r0
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e086      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800142a:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	049b      	lsls	r3, r3, #18
 8001432:	4013      	ands	r3, r2
 8001434:	d1f0      	bne.n	8001418 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001436:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143a:	220f      	movs	r2, #15
 800143c:	4393      	bics	r3, r2
 800143e:	0019      	movs	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001444:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001446:	430a      	orrs	r2, r1
 8001448:	62da      	str	r2, [r3, #44]	; 0x2c
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <HAL_RCC_OscConfig+0x690>)
 8001450:	4013      	ands	r3, r2
 8001452:	0019      	movs	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145c:	431a      	orrs	r2, r3
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001460:	430a      	orrs	r2, r1
 8001462:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001464:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 800146a:	2180      	movs	r1, #128	; 0x80
 800146c:	0449      	lsls	r1, r1, #17
 800146e:	430a      	orrs	r2, r1
 8001470:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001472:	f7ff f9c5 	bl	8000800 <HAL_GetTick>
 8001476:	0003      	movs	r3, r0
 8001478:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800147c:	f7ff f9c0 	bl	8000800 <HAL_GetTick>
 8001480:	0002      	movs	r2, r0
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e054      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	049b      	lsls	r3, r3, #18
 8001496:	4013      	ands	r3, r2
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0x644>
 800149a:	e04c      	b.n	8001536 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80014a2:	4908      	ldr	r1, [pc, #32]	; (80014c4 <HAL_RCC_OscConfig+0x68c>)
 80014a4:	400a      	ands	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff f9aa 	bl	8000800 <HAL_GetTick>
 80014ac:	0003      	movs	r3, r0
 80014ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b0:	e015      	b.n	80014de <HAL_RCC_OscConfig+0x6a6>
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	40021000 	.word	0x40021000
 80014b8:	00001388 	.word	0x00001388
 80014bc:	efffffff 	.word	0xefffffff
 80014c0:	fffeffff 	.word	0xfffeffff
 80014c4:	feffffff 	.word	0xfeffffff
 80014c8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014cc:	f7ff f998 	bl	8000800 <HAL_GetTick>
 80014d0:	0002      	movs	r2, r0
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e02c      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <HAL_RCC_OscConfig+0x708>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	2380      	movs	r3, #128	; 0x80
 80014e4:	049b      	lsls	r3, r3, #18
 80014e6:	4013      	ands	r3, r2
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x694>
 80014ea:	e024      	b.n	8001536 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d101      	bne.n	80014f8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e01f      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <HAL_RCC_OscConfig+0x708>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_RCC_OscConfig+0x708>)
 8001500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001502:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	23c0      	movs	r3, #192	; 0xc0
 8001508:	025b      	lsls	r3, r3, #9
 800150a:	401a      	ands	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	429a      	cmp	r2, r3
 8001512:	d10e      	bne.n	8001532 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	220f      	movs	r2, #15
 8001518:	401a      	ands	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800151e:	429a      	cmp	r2, r3
 8001520:	d107      	bne.n	8001532 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	23f0      	movs	r3, #240	; 0xf0
 8001526:	039b      	lsls	r3, r3, #14
 8001528:	401a      	ands	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800152e:	429a      	cmp	r2, r3
 8001530:	d001      	beq.n	8001536 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	0018      	movs	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	b008      	add	sp, #32
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40021000 	.word	0x40021000

08001544 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0bf      	b.n	80016d8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001558:	4b61      	ldr	r3, [pc, #388]	; (80016e0 <HAL_RCC_ClockConfig+0x19c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2201      	movs	r2, #1
 800155e:	4013      	ands	r3, r2
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	429a      	cmp	r2, r3
 8001564:	d911      	bls.n	800158a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001566:	4b5e      	ldr	r3, [pc, #376]	; (80016e0 <HAL_RCC_ClockConfig+0x19c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2201      	movs	r2, #1
 800156c:	4393      	bics	r3, r2
 800156e:	0019      	movs	r1, r3
 8001570:	4b5b      	ldr	r3, [pc, #364]	; (80016e0 <HAL_RCC_ClockConfig+0x19c>)
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001578:	4b59      	ldr	r3, [pc, #356]	; (80016e0 <HAL_RCC_ClockConfig+0x19c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2201      	movs	r2, #1
 800157e:	4013      	ands	r3, r2
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d001      	beq.n	800158a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e0a6      	b.n	80016d8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2202      	movs	r2, #2
 8001590:	4013      	ands	r3, r2
 8001592:	d015      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2204      	movs	r2, #4
 800159a:	4013      	ands	r3, r2
 800159c:	d006      	beq.n	80015ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800159e:	4b51      	ldr	r3, [pc, #324]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	4b50      	ldr	r3, [pc, #320]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 80015a4:	21e0      	movs	r1, #224	; 0xe0
 80015a6:	00c9      	lsls	r1, r1, #3
 80015a8:	430a      	orrs	r2, r1
 80015aa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ac:	4b4d      	ldr	r3, [pc, #308]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	22f0      	movs	r2, #240	; 0xf0
 80015b2:	4393      	bics	r3, r2
 80015b4:	0019      	movs	r1, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	4b4a      	ldr	r3, [pc, #296]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 80015bc:	430a      	orrs	r2, r1
 80015be:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2201      	movs	r2, #1
 80015c6:	4013      	ands	r3, r2
 80015c8:	d04c      	beq.n	8001664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d107      	bne.n	80015e2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d2:	4b44      	ldr	r3, [pc, #272]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	029b      	lsls	r3, r3, #10
 80015da:	4013      	ands	r3, r2
 80015dc:	d120      	bne.n	8001620 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e07a      	b.n	80016d8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d107      	bne.n	80015fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ea:	4b3e      	ldr	r3, [pc, #248]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	049b      	lsls	r3, r3, #18
 80015f2:	4013      	ands	r3, r2
 80015f4:	d114      	bne.n	8001620 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e06e      	b.n	80016d8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b03      	cmp	r3, #3
 8001600:	d107      	bne.n	8001612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001602:	4b38      	ldr	r3, [pc, #224]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	025b      	lsls	r3, r3, #9
 800160a:	4013      	ands	r3, r2
 800160c:	d108      	bne.n	8001620 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e062      	b.n	80016d8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001612:	4b34      	ldr	r3, [pc, #208]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2202      	movs	r2, #2
 8001618:	4013      	ands	r3, r2
 800161a:	d101      	bne.n	8001620 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e05b      	b.n	80016d8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001620:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2203      	movs	r2, #3
 8001626:	4393      	bics	r3, r2
 8001628:	0019      	movs	r1, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	4b2d      	ldr	r3, [pc, #180]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001630:	430a      	orrs	r2, r1
 8001632:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001634:	f7ff f8e4 	bl	8000800 <HAL_GetTick>
 8001638:	0003      	movs	r3, r0
 800163a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163c:	e009      	b.n	8001652 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800163e:	f7ff f8df 	bl	8000800 <HAL_GetTick>
 8001642:	0002      	movs	r2, r0
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	4a27      	ldr	r2, [pc, #156]	; (80016e8 <HAL_RCC_ClockConfig+0x1a4>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e042      	b.n	80016d8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001652:	4b24      	ldr	r3, [pc, #144]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	220c      	movs	r2, #12
 8001658:	401a      	ands	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	429a      	cmp	r2, r3
 8001662:	d1ec      	bne.n	800163e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001664:	4b1e      	ldr	r3, [pc, #120]	; (80016e0 <HAL_RCC_ClockConfig+0x19c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2201      	movs	r2, #1
 800166a:	4013      	ands	r3, r2
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d211      	bcs.n	8001696 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001672:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <HAL_RCC_ClockConfig+0x19c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2201      	movs	r2, #1
 8001678:	4393      	bics	r3, r2
 800167a:	0019      	movs	r1, r3
 800167c:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <HAL_RCC_ClockConfig+0x19c>)
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001684:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <HAL_RCC_ClockConfig+0x19c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2201      	movs	r2, #1
 800168a:	4013      	ands	r3, r2
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d001      	beq.n	8001696 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e020      	b.n	80016d8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2204      	movs	r2, #4
 800169c:	4013      	ands	r3, r2
 800169e:	d009      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016a0:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	4a11      	ldr	r2, [pc, #68]	; (80016ec <HAL_RCC_ClockConfig+0x1a8>)
 80016a6:	4013      	ands	r3, r2
 80016a8:	0019      	movs	r1, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 80016b0:	430a      	orrs	r2, r1
 80016b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80016b4:	f000 f820 	bl	80016f8 <HAL_RCC_GetSysClockFreq>
 80016b8:	0001      	movs	r1, r0
 80016ba:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	091b      	lsrs	r3, r3, #4
 80016c0:	220f      	movs	r2, #15
 80016c2:	4013      	ands	r3, r2
 80016c4:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <HAL_RCC_ClockConfig+0x1ac>)
 80016c6:	5cd3      	ldrb	r3, [r2, r3]
 80016c8:	000a      	movs	r2, r1
 80016ca:	40da      	lsrs	r2, r3
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_RCC_ClockConfig+0x1b0>)
 80016ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016d0:	2000      	movs	r0, #0
 80016d2:	f7ff f84f 	bl	8000774 <HAL_InitTick>
  
  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	0018      	movs	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	b004      	add	sp, #16
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40022000 	.word	0x40022000
 80016e4:	40021000 	.word	0x40021000
 80016e8:	00001388 	.word	0x00001388
 80016ec:	fffff8ff 	.word	0xfffff8ff
 80016f0:	080029cc 	.word	0x080029cc
 80016f4:	2000005c 	.word	0x2000005c

080016f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b08f      	sub	sp, #60	; 0x3c
 80016fc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80016fe:	2314      	movs	r3, #20
 8001700:	18fb      	adds	r3, r7, r3
 8001702:	4a37      	ldr	r2, [pc, #220]	; (80017e0 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001704:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001706:	c313      	stmia	r3!, {r0, r1, r4}
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	4a35      	ldr	r2, [pc, #212]	; (80017e4 <HAL_RCC_GetSysClockFreq+0xec>)
 8001710:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001712:	c313      	stmia	r3!, {r0, r1, r4}
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800171c:	2300      	movs	r3, #0
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001720:	2300      	movs	r3, #0
 8001722:	637b      	str	r3, [r7, #52]	; 0x34
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001728:	2300      	movs	r3, #0
 800172a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800172c:	4b2e      	ldr	r3, [pc, #184]	; (80017e8 <HAL_RCC_GetSysClockFreq+0xf0>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001734:	220c      	movs	r2, #12
 8001736:	4013      	ands	r3, r2
 8001738:	2b08      	cmp	r3, #8
 800173a:	d006      	beq.n	800174a <HAL_RCC_GetSysClockFreq+0x52>
 800173c:	2b0c      	cmp	r3, #12
 800173e:	d043      	beq.n	80017c8 <HAL_RCC_GetSysClockFreq+0xd0>
 8001740:	2b04      	cmp	r3, #4
 8001742:	d144      	bne.n	80017ce <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001744:	4b29      	ldr	r3, [pc, #164]	; (80017ec <HAL_RCC_GetSysClockFreq+0xf4>)
 8001746:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001748:	e044      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800174a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174c:	0c9b      	lsrs	r3, r3, #18
 800174e:	220f      	movs	r2, #15
 8001750:	4013      	ands	r3, r2
 8001752:	2214      	movs	r2, #20
 8001754:	18ba      	adds	r2, r7, r2
 8001756:	5cd3      	ldrb	r3, [r2, r3]
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800175a:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <HAL_RCC_GetSysClockFreq+0xf0>)
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	220f      	movs	r2, #15
 8001760:	4013      	ands	r3, r2
 8001762:	1d3a      	adds	r2, r7, #4
 8001764:	5cd3      	ldrb	r3, [r2, r3]
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800176a:	23c0      	movs	r3, #192	; 0xc0
 800176c:	025b      	lsls	r3, r3, #9
 800176e:	401a      	ands	r2, r3
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	025b      	lsls	r3, r3, #9
 8001774:	429a      	cmp	r2, r3
 8001776:	d109      	bne.n	800178c <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001778:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800177a:	481c      	ldr	r0, [pc, #112]	; (80017ec <HAL_RCC_GetSysClockFreq+0xf4>)
 800177c:	f7fe fcc4 	bl	8000108 <__udivsi3>
 8001780:	0003      	movs	r3, r0
 8001782:	001a      	movs	r2, r3
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	4353      	muls	r3, r2
 8001788:	637b      	str	r3, [r7, #52]	; 0x34
 800178a:	e01a      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800178c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800178e:	23c0      	movs	r3, #192	; 0xc0
 8001790:	025b      	lsls	r3, r3, #9
 8001792:	401a      	ands	r2, r3
 8001794:	23c0      	movs	r3, #192	; 0xc0
 8001796:	025b      	lsls	r3, r3, #9
 8001798:	429a      	cmp	r2, r3
 800179a:	d109      	bne.n	80017b0 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800179c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800179e:	4814      	ldr	r0, [pc, #80]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017a0:	f7fe fcb2 	bl	8000108 <__udivsi3>
 80017a4:	0003      	movs	r3, r0
 80017a6:	001a      	movs	r2, r3
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	4353      	muls	r3, r2
 80017ac:	637b      	str	r3, [r7, #52]	; 0x34
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80017b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017b2:	480e      	ldr	r0, [pc, #56]	; (80017ec <HAL_RCC_GetSysClockFreq+0xf4>)
 80017b4:	f7fe fca8 	bl	8000108 <__udivsi3>
 80017b8:	0003      	movs	r3, r0
 80017ba:	001a      	movs	r2, r3
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	4353      	muls	r3, r2
 80017c0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80017c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017c6:	e005      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017cc:	e002      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017ce:	4b07      	ldr	r3, [pc, #28]	; (80017ec <HAL_RCC_GetSysClockFreq+0xf4>)
 80017d0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017d2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80017d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80017d6:	0018      	movs	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	b00f      	add	sp, #60	; 0x3c
 80017dc:	bd90      	pop	{r4, r7, pc}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	080029ac 	.word	0x080029ac
 80017e4:	080029bc 	.word	0x080029bc
 80017e8:	40021000 	.word	0x40021000
 80017ec:	007a1200 	.word	0x007a1200
 80017f0:	02dc6c00 	.word	0x02dc6c00

080017f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017f8:	4b02      	ldr	r3, [pc, #8]	; (8001804 <HAL_RCC_GetHCLKFreq+0x10>)
 80017fa:	681b      	ldr	r3, [r3, #0]
}
 80017fc:	0018      	movs	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	2000005c 	.word	0x2000005c

08001808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800180c:	f7ff fff2 	bl	80017f4 <HAL_RCC_GetHCLKFreq>
 8001810:	0001      	movs	r1, r0
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	0a1b      	lsrs	r3, r3, #8
 8001818:	2207      	movs	r2, #7
 800181a:	4013      	ands	r3, r2
 800181c:	4a04      	ldr	r2, [pc, #16]	; (8001830 <HAL_RCC_GetPCLK1Freq+0x28>)
 800181e:	5cd3      	ldrb	r3, [r2, r3]
 8001820:	40d9      	lsrs	r1, r3
 8001822:	000b      	movs	r3, r1
}    
 8001824:	0018      	movs	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	40021000 	.word	0x40021000
 8001830:	080029dc 	.word	0x080029dc

08001834 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	025b      	lsls	r3, r3, #9
 800184c:	4013      	ands	r3, r2
 800184e:	d100      	bne.n	8001852 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001850:	e08f      	b.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001852:	2317      	movs	r3, #23
 8001854:	18fb      	adds	r3, r7, r3
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800185a:	4b6f      	ldr	r3, [pc, #444]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800185c:	69da      	ldr	r2, [r3, #28]
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	055b      	lsls	r3, r3, #21
 8001862:	4013      	ands	r3, r2
 8001864:	d111      	bne.n	800188a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001866:	4b6c      	ldr	r3, [pc, #432]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001868:	69da      	ldr	r2, [r3, #28]
 800186a:	4b6b      	ldr	r3, [pc, #428]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800186c:	2180      	movs	r1, #128	; 0x80
 800186e:	0549      	lsls	r1, r1, #21
 8001870:	430a      	orrs	r2, r1
 8001872:	61da      	str	r2, [r3, #28]
 8001874:	4b68      	ldr	r3, [pc, #416]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001876:	69da      	ldr	r2, [r3, #28]
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	055b      	lsls	r3, r3, #21
 800187c:	4013      	ands	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001882:	2317      	movs	r3, #23
 8001884:	18fb      	adds	r3, r7, r3
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188a:	4b64      	ldr	r3, [pc, #400]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4013      	ands	r3, r2
 8001894:	d11a      	bne.n	80018cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001896:	4b61      	ldr	r3, [pc, #388]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	4b60      	ldr	r3, [pc, #384]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800189c:	2180      	movs	r1, #128	; 0x80
 800189e:	0049      	lsls	r1, r1, #1
 80018a0:	430a      	orrs	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a4:	f7fe ffac 	bl	8000800 <HAL_GetTick>
 80018a8:	0003      	movs	r3, r0
 80018aa:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ac:	e008      	b.n	80018c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ae:	f7fe ffa7 	bl	8000800 <HAL_GetTick>
 80018b2:	0002      	movs	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b64      	cmp	r3, #100	; 0x64
 80018ba:	d901      	bls.n	80018c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e0a6      	b.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c0:	4b56      	ldr	r3, [pc, #344]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	4013      	ands	r3, r2
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018cc:	4b52      	ldr	r3, [pc, #328]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018ce:	6a1a      	ldr	r2, [r3, #32]
 80018d0:	23c0      	movs	r3, #192	; 0xc0
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4013      	ands	r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d034      	beq.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	23c0      	movs	r3, #192	; 0xc0
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4013      	ands	r3, r2
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d02c      	beq.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018ee:	4b4a      	ldr	r3, [pc, #296]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	4a4b      	ldr	r2, [pc, #300]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018f8:	4b47      	ldr	r3, [pc, #284]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018fa:	6a1a      	ldr	r2, [r3, #32]
 80018fc:	4b46      	ldr	r3, [pc, #280]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018fe:	2180      	movs	r1, #128	; 0x80
 8001900:	0249      	lsls	r1, r1, #9
 8001902:	430a      	orrs	r2, r1
 8001904:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001906:	4b44      	ldr	r3, [pc, #272]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001908:	6a1a      	ldr	r2, [r3, #32]
 800190a:	4b43      	ldr	r3, [pc, #268]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800190c:	4945      	ldr	r1, [pc, #276]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800190e:	400a      	ands	r2, r1
 8001910:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001912:	4b41      	ldr	r3, [pc, #260]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2201      	movs	r2, #1
 800191c:	4013      	ands	r3, r2
 800191e:	d013      	beq.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7fe ff6e 	bl	8000800 <HAL_GetTick>
 8001924:	0003      	movs	r3, r0
 8001926:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001928:	e009      	b.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192a:	f7fe ff69 	bl	8000800 <HAL_GetTick>
 800192e:	0002      	movs	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	4a3c      	ldr	r2, [pc, #240]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e067      	b.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193e:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	2202      	movs	r2, #2
 8001944:	4013      	ands	r3, r2
 8001946:	d0f0      	beq.n	800192a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001948:	4b33      	ldr	r3, [pc, #204]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	4a34      	ldr	r2, [pc, #208]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800194e:	4013      	ands	r3, r2
 8001950:	0019      	movs	r1, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001958:	430a      	orrs	r2, r1
 800195a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800195c:	2317      	movs	r3, #23
 800195e:	18fb      	adds	r3, r7, r3
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d105      	bne.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001966:	4b2c      	ldr	r3, [pc, #176]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001968:	69da      	ldr	r2, [r3, #28]
 800196a:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800196c:	492f      	ldr	r1, [pc, #188]	; (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800196e:	400a      	ands	r2, r1
 8001970:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2201      	movs	r2, #1
 8001978:	4013      	ands	r3, r2
 800197a:	d009      	beq.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800197c:	4b26      	ldr	r3, [pc, #152]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001980:	2203      	movs	r2, #3
 8001982:	4393      	bics	r3, r2
 8001984:	0019      	movs	r1, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	4b23      	ldr	r3, [pc, #140]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800198c:	430a      	orrs	r2, r1
 800198e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2202      	movs	r2, #2
 8001996:	4013      	ands	r3, r2
 8001998:	d009      	beq.n	80019ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800199a:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a24      	ldr	r2, [pc, #144]	; (8001a30 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	0019      	movs	r1, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68da      	ldr	r2, [r3, #12]
 80019a8:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019aa:	430a      	orrs	r2, r1
 80019ac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2220      	movs	r2, #32
 80019b4:	4013      	ands	r3, r2
 80019b6:	d009      	beq.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80019b8:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019bc:	2210      	movs	r2, #16
 80019be:	4393      	bics	r3, r2
 80019c0:	0019      	movs	r1, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691a      	ldr	r2, [r3, #16]
 80019c6:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019c8:	430a      	orrs	r2, r1
 80019ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	029b      	lsls	r3, r3, #10
 80019d4:	4013      	ands	r3, r2
 80019d6:	d009      	beq.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80019d8:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019dc:	2280      	movs	r2, #128	; 0x80
 80019de:	4393      	bics	r3, r2
 80019e0:	0019      	movs	r1, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	699a      	ldr	r2, [r3, #24]
 80019e6:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019e8:	430a      	orrs	r2, r1
 80019ea:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	4013      	ands	r3, r2
 80019f6:	d009      	beq.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80019f8:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fc:	2240      	movs	r2, #64	; 0x40
 80019fe:	4393      	bics	r3, r2
 8001a00:	0019      	movs	r1, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695a      	ldr	r2, [r3, #20]
 8001a06:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	0018      	movs	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b006      	add	sp, #24
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40007000 	.word	0x40007000
 8001a20:	fffffcff 	.word	0xfffffcff
 8001a24:	fffeffff 	.word	0xfffeffff
 8001a28:	00001388 	.word	0x00001388
 8001a2c:	efffffff 	.word	0xefffffff
 8001a30:	fffcffff 	.word	0xfffcffff

08001a34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e044      	b.n	8001ad0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d107      	bne.n	8001a5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2270      	movs	r2, #112	; 0x70
 8001a52:	2100      	movs	r1, #0
 8001a54:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	0018      	movs	r0, r3
 8001a5a:	f7fe fdc3 	bl	80005e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2224      	movs	r2, #36	; 0x24
 8001a62:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2101      	movs	r1, #1
 8001a70:	438a      	bics	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	0018      	movs	r0, r3
 8001a78:	f000 fa92 	bl	8001fa0 <UART_SetConfig>
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d101      	bne.n	8001a86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e024      	b.n	8001ad0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	0018      	movs	r0, r3
 8001a92:	f000 fc51 	bl	8002338 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	490d      	ldr	r1, [pc, #52]	; (8001ad8 <HAL_UART_Init+0xa4>)
 8001aa2:	400a      	ands	r2, r1
 8001aa4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	212a      	movs	r1, #42	; 0x2a
 8001ab2:	438a      	bics	r2, r1
 8001ab4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f000 fce9 	bl	80024a0 <UART_CheckIdleState>
 8001ace:	0003      	movs	r3, r0
}
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b002      	add	sp, #8
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	ffffb7ff 	.word	0xffffb7ff

08001adc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	1dbb      	adds	r3, r7, #6
 8001ae8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aee:	2b20      	cmp	r3, #32
 8001af0:	d158      	bne.n	8001ba4 <HAL_UART_Transmit_IT+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_UART_Transmit_IT+0x24>
 8001af8:	1dbb      	adds	r3, r7, #6
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e050      	b.n	8001ba6 <HAL_UART_Transmit_IT+0xca>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	015b      	lsls	r3, r3, #5
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d109      	bne.n	8001b24 <HAL_UART_Transmit_IT+0x48>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d105      	bne.n	8001b24 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d001      	beq.n	8001b24 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e040      	b.n	8001ba6 <HAL_UART_Transmit_IT+0xca>
      }
    }

    __HAL_LOCK(huart);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2270      	movs	r2, #112	; 0x70
 8001b28:	5c9b      	ldrb	r3, [r3, r2]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d101      	bne.n	8001b32 <HAL_UART_Transmit_IT+0x56>
 8001b2e:	2302      	movs	r3, #2
 8001b30:	e039      	b.n	8001ba6 <HAL_UART_Transmit_IT+0xca>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2270      	movs	r2, #112	; 0x70
 8001b36:	2101      	movs	r1, #1
 8001b38:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1dba      	adds	r2, r7, #6
 8001b44:	2150      	movs	r1, #80	; 0x50
 8001b46:	8812      	ldrh	r2, [r2, #0]
 8001b48:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	1dba      	adds	r2, r7, #6
 8001b4e:	2152      	movs	r1, #82	; 0x52
 8001b50:	8812      	ldrh	r2, [r2, #0]
 8001b52:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2221      	movs	r2, #33	; 0x21
 8001b64:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	015b      	lsls	r3, r3, #5
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d107      	bne.n	8001b82 <HAL_UART_Transmit_IT+0xa6>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d103      	bne.n	8001b82 <HAL_UART_Transmit_IT+0xa6>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4a0c      	ldr	r2, [pc, #48]	; (8001bb0 <HAL_UART_Transmit_IT+0xd4>)
 8001b7e:	665a      	str	r2, [r3, #100]	; 0x64
 8001b80:	e002      	b.n	8001b88 <HAL_UART_Transmit_IT+0xac>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4a0b      	ldr	r2, [pc, #44]	; (8001bb4 <HAL_UART_Transmit_IT+0xd8>)
 8001b86:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2270      	movs	r2, #112	; 0x70
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	5499      	strb	r1, [r3, r2]

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2180      	movs	r1, #128	; 0x80
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e000      	b.n	8001ba6 <HAL_UART_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8001ba4:	2302      	movs	r3, #2
  }
}
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b004      	add	sp, #16
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	08002707 	.word	0x08002707
 8001bb4:	08002697 	.word	0x08002697

08001bb8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	1dbb      	adds	r3, r7, #6
 8001bc4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001bca:	2b20      	cmp	r3, #32
 8001bcc:	d000      	beq.n	8001bd0 <HAL_UART_Receive_IT+0x18>
 8001bce:	e09f      	b.n	8001d10 <HAL_UART_Receive_IT+0x158>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_UART_Receive_IT+0x26>
 8001bd6:	1dbb      	adds	r3, r7, #6
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e097      	b.n	8001d12 <HAL_UART_Receive_IT+0x15a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	2380      	movs	r3, #128	; 0x80
 8001be8:	015b      	lsls	r3, r3, #5
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d109      	bne.n	8001c02 <HAL_UART_Receive_IT+0x4a>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d105      	bne.n	8001c02 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d001      	beq.n	8001c02 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e087      	b.n	8001d12 <HAL_UART_Receive_IT+0x15a>
      }
    }

    __HAL_LOCK(huart);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2270      	movs	r2, #112	; 0x70
 8001c06:	5c9b      	ldrb	r3, [r3, r2]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <HAL_UART_Receive_IT+0x58>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e080      	b.n	8001d12 <HAL_UART_Receive_IT+0x15a>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2270      	movs	r2, #112	; 0x70
 8001c14:	2101      	movs	r1, #1
 8001c16:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1dba      	adds	r2, r7, #6
 8001c22:	2158      	movs	r1, #88	; 0x58
 8001c24:	8812      	ldrh	r2, [r2, #0]
 8001c26:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	1dba      	adds	r2, r7, #6
 8001c2c:	215a      	movs	r1, #90	; 0x5a
 8001c2e:	8812      	ldrh	r2, [r2, #0]
 8001c30:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	015b      	lsls	r3, r3, #5
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d10d      	bne.n	8001c60 <HAL_UART_Receive_IT+0xa8>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d104      	bne.n	8001c56 <HAL_UART_Receive_IT+0x9e>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	225c      	movs	r2, #92	; 0x5c
 8001c50:	4932      	ldr	r1, [pc, #200]	; (8001d1c <HAL_UART_Receive_IT+0x164>)
 8001c52:	5299      	strh	r1, [r3, r2]
 8001c54:	e02e      	b.n	8001cb4 <HAL_UART_Receive_IT+0xfc>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	225c      	movs	r2, #92	; 0x5c
 8001c5a:	21ff      	movs	r1, #255	; 0xff
 8001c5c:	5299      	strh	r1, [r3, r2]
 8001c5e:	e029      	b.n	8001cb4 <HAL_UART_Receive_IT+0xfc>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10d      	bne.n	8001c84 <HAL_UART_Receive_IT+0xcc>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d104      	bne.n	8001c7a <HAL_UART_Receive_IT+0xc2>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	225c      	movs	r2, #92	; 0x5c
 8001c74:	21ff      	movs	r1, #255	; 0xff
 8001c76:	5299      	strh	r1, [r3, r2]
 8001c78:	e01c      	b.n	8001cb4 <HAL_UART_Receive_IT+0xfc>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	225c      	movs	r2, #92	; 0x5c
 8001c7e:	217f      	movs	r1, #127	; 0x7f
 8001c80:	5299      	strh	r1, [r3, r2]
 8001c82:	e017      	b.n	8001cb4 <HAL_UART_Receive_IT+0xfc>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	055b      	lsls	r3, r3, #21
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d10d      	bne.n	8001cac <HAL_UART_Receive_IT+0xf4>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d104      	bne.n	8001ca2 <HAL_UART_Receive_IT+0xea>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	225c      	movs	r2, #92	; 0x5c
 8001c9c:	217f      	movs	r1, #127	; 0x7f
 8001c9e:	5299      	strh	r1, [r3, r2]
 8001ca0:	e008      	b.n	8001cb4 <HAL_UART_Receive_IT+0xfc>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	225c      	movs	r2, #92	; 0x5c
 8001ca6:	213f      	movs	r1, #63	; 0x3f
 8001ca8:	5299      	strh	r1, [r3, r2]
 8001caa:	e003      	b.n	8001cb4 <HAL_UART_Receive_IT+0xfc>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	225c      	movs	r2, #92	; 0x5c
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2222      	movs	r2, #34	; 0x22
 8001cbe:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2101      	movs	r1, #1
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	015b      	lsls	r3, r3, #5
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d107      	bne.n	8001cec <HAL_UART_Receive_IT+0x134>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d103      	bne.n	8001cec <HAL_UART_Receive_IT+0x134>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4a0e      	ldr	r2, [pc, #56]	; (8001d20 <HAL_UART_Receive_IT+0x168>)
 8001ce8:	661a      	str	r2, [r3, #96]	; 0x60
 8001cea:	e002      	b.n	8001cf2 <HAL_UART_Receive_IT+0x13a>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4a0d      	ldr	r2, [pc, #52]	; (8001d24 <HAL_UART_Receive_IT+0x16c>)
 8001cf0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2270      	movs	r2, #112	; 0x70
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2190      	movs	r1, #144	; 0x90
 8001d06:	0049      	lsls	r1, r1, #1
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	e000      	b.n	8001d12 <HAL_UART_Receive_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8001d10:	2302      	movs	r3, #2
  }
}
 8001d12:	0018      	movs	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	b004      	add	sp, #16
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	000001ff 	.word	0x000001ff
 8001d20:	08002871 	.word	0x08002871
 8001d24:	080027b5 	.word	0x080027b5

08001d28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b088      	sub	sp, #32
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	4a93      	ldr	r2, [pc, #588]	; (8001f98 <HAL_UART_IRQHandler+0x270>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d112      	bne.n	8001d7c <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	2220      	movs	r2, #32
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d00e      	beq.n	8001d7c <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	2220      	movs	r2, #32
 8001d62:	4013      	ands	r3, r2
 8001d64:	d00a      	beq.n	8001d7c <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d100      	bne.n	8001d70 <HAL_UART_IRQHandler+0x48>
 8001d6e:	e10b      	b.n	8001f88 <HAL_UART_IRQHandler+0x260>
      {
        huart->RxISR(huart);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	0010      	movs	r0, r2
 8001d78:	4798      	blx	r3
      }
      return;
 8001d7a:	e105      	b.n	8001f88 <HAL_UART_IRQHandler+0x260>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d100      	bne.n	8001d84 <HAL_UART_IRQHandler+0x5c>
 8001d82:	e0cd      	b.n	8001f20 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	2201      	movs	r2, #1
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d105      	bne.n	8001d98 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	2390      	movs	r3, #144	; 0x90
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4013      	ands	r3, r2
 8001d94:	d100      	bne.n	8001d98 <HAL_UART_IRQHandler+0x70>
 8001d96:	e0c3      	b.n	8001f20 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d00e      	beq.n	8001dbe <HAL_UART_IRQHandler+0x96>
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	2380      	movs	r3, #128	; 0x80
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4013      	ands	r3, r2
 8001da8:	d009      	beq.n	8001dbe <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2201      	movs	r2, #1
 8001db0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001db6:	2201      	movs	r2, #1
 8001db8:	431a      	orrs	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d00d      	beq.n	8001de2 <HAL_UART_IRQHandler+0xba>
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d009      	beq.n	8001de2 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001dda:	2204      	movs	r2, #4
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	2204      	movs	r2, #4
 8001de6:	4013      	ands	r3, r2
 8001de8:	d00d      	beq.n	8001e06 <HAL_UART_IRQHandler+0xde>
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	2201      	movs	r2, #1
 8001dee:	4013      	ands	r3, r2
 8001df0:	d009      	beq.n	8001e06 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2204      	movs	r2, #4
 8001df8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001dfe:	2202      	movs	r2, #2
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	2208      	movs	r2, #8
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d011      	beq.n	8001e32 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	2220      	movs	r2, #32
 8001e12:	4013      	ands	r3, r2
 8001e14:	d103      	bne.n	8001e1e <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001e1c:	d009      	beq.n	8001e32 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2208      	movs	r2, #8
 8001e24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e2a:	2208      	movs	r2, #8
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	011b      	lsls	r3, r3, #4
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d00f      	beq.n	8001e5c <HAL_UART_IRQHandler+0x134>
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	2380      	movs	r3, #128	; 0x80
 8001e40:	04db      	lsls	r3, r3, #19
 8001e42:	4013      	ands	r3, r2
 8001e44:	d00a      	beq.n	8001e5c <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2280      	movs	r2, #128	; 0x80
 8001e4c:	0112      	lsls	r2, r2, #4
 8001e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e54:	2220      	movs	r2, #32
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d100      	bne.n	8001e66 <HAL_UART_IRQHandler+0x13e>
 8001e64:	e092      	b.n	8001f8c <HAL_UART_IRQHandler+0x264>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	2220      	movs	r2, #32
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d00c      	beq.n	8001e88 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	2220      	movs	r2, #32
 8001e72:	4013      	ands	r3, r2
 8001e74:	d008      	beq.n	8001e88 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d004      	beq.n	8001e88 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	0010      	movs	r0, r2
 8001e86:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e8c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2240      	movs	r2, #64	; 0x40
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b40      	cmp	r3, #64	; 0x40
 8001e9a:	d003      	beq.n	8001ea4 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2228      	movs	r2, #40	; 0x28
 8001ea0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001ea2:	d033      	beq.n	8001f0c <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f000 fbbe 	bl	8002628 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2240      	movs	r2, #64	; 0x40
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b40      	cmp	r3, #64	; 0x40
 8001eb8:	d123      	bne.n	8001f02 <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2140      	movs	r1, #64	; 0x40
 8001ec6:	438a      	bics	r2, r1
 8001ec8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d012      	beq.n	8001ef8 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ed6:	4a31      	ldr	r2, [pc, #196]	; (8001f9c <HAL_UART_IRQHandler+0x274>)
 8001ed8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f7fe fd98 	bl	8000a14 <HAL_DMA_Abort_IT>
 8001ee4:	1e03      	subs	r3, r0, #0
 8001ee6:	d019      	beq.n	8001f1c <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ef6:	e011      	b.n	8001f1c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	0018      	movs	r0, r3
 8001efc:	f7fe fb18 	bl	8000530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f00:	e00c      	b.n	8001f1c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	0018      	movs	r0, r3
 8001f06:	f7fe fb13 	bl	8000530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f0a:	e007      	b.n	8001f1c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f7fe fb0e 	bl	8000530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8001f1a:	e037      	b.n	8001f8c <HAL_UART_IRQHandler+0x264>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f1c:	46c0      	nop			; (mov r8, r8)
    return;
 8001f1e:	e035      	b.n	8001f8c <HAL_UART_IRQHandler+0x264>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	2380      	movs	r3, #128	; 0x80
 8001f24:	035b      	lsls	r3, r3, #13
 8001f26:	4013      	ands	r3, r2
 8001f28:	d00e      	beq.n	8001f48 <HAL_UART_IRQHandler+0x220>
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	03db      	lsls	r3, r3, #15
 8001f30:	4013      	ands	r3, r2
 8001f32:	d009      	beq.n	8001f48 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2280      	movs	r2, #128	; 0x80
 8001f3a:	0352      	lsls	r2, r2, #13
 8001f3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	0018      	movs	r0, r3
 8001f42:	f000 fcf3 	bl	800292c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8001f46:	e024      	b.n	8001f92 <HAL_UART_IRQHandler+0x26a>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	2280      	movs	r2, #128	; 0x80
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d00d      	beq.n	8001f6c <HAL_UART_IRQHandler+0x244>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2280      	movs	r2, #128	; 0x80
 8001f54:	4013      	ands	r3, r2
 8001f56:	d009      	beq.n	8001f6c <HAL_UART_IRQHandler+0x244>
  {
    if (huart->TxISR != NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d017      	beq.n	8001f90 <HAL_UART_IRQHandler+0x268>
    {
      huart->TxISR(huart);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	0010      	movs	r0, r2
 8001f68:	4798      	blx	r3
    }
    return;
 8001f6a:	e011      	b.n	8001f90 <HAL_UART_IRQHandler+0x268>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	2240      	movs	r2, #64	; 0x40
 8001f70:	4013      	ands	r3, r2
 8001f72:	d00e      	beq.n	8001f92 <HAL_UART_IRQHandler+0x26a>
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	2240      	movs	r2, #64	; 0x40
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d00a      	beq.n	8001f92 <HAL_UART_IRQHandler+0x26a>
  {
    UART_EndTransmit_IT(huart);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f000 fbfd 	bl	800277e <UART_EndTransmit_IT>
    return;
 8001f84:	46c0      	nop			; (mov r8, r8)
 8001f86:	e004      	b.n	8001f92 <HAL_UART_IRQHandler+0x26a>
      return;
 8001f88:	46c0      	nop			; (mov r8, r8)
 8001f8a:	e002      	b.n	8001f92 <HAL_UART_IRQHandler+0x26a>
    return;
 8001f8c:	46c0      	nop			; (mov r8, r8)
 8001f8e:	e000      	b.n	8001f92 <HAL_UART_IRQHandler+0x26a>
    return;
 8001f90:	46c0      	nop			; (mov r8, r8)
  }

}
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b008      	add	sp, #32
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	0000080f 	.word	0x0000080f
 8001f9c:	08002669 	.word	0x08002669

08001fa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001fac:	2317      	movs	r3, #23
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4ac5      	ldr	r2, [pc, #788]	; (80022e8 <UART_SetConfig+0x348>)
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	0019      	movs	r1, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4ac0      	ldr	r2, [pc, #768]	; (80022ec <UART_SetConfig+0x34c>)
 8001fea:	4013      	ands	r3, r2
 8001fec:	0019      	movs	r1, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	4ab7      	ldr	r2, [pc, #732]	; (80022f0 <UART_SetConfig+0x350>)
 8002012:	4013      	ands	r3, r2
 8002014:	0019      	movs	r1, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	430a      	orrs	r2, r1
 800201e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4ab3      	ldr	r2, [pc, #716]	; (80022f4 <UART_SetConfig+0x354>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d125      	bne.n	8002076 <UART_SetConfig+0xd6>
 800202a:	4bb3      	ldr	r3, [pc, #716]	; (80022f8 <UART_SetConfig+0x358>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	2203      	movs	r2, #3
 8002030:	4013      	ands	r3, r2
 8002032:	2b01      	cmp	r3, #1
 8002034:	d00f      	beq.n	8002056 <UART_SetConfig+0xb6>
 8002036:	d304      	bcc.n	8002042 <UART_SetConfig+0xa2>
 8002038:	2b02      	cmp	r3, #2
 800203a:	d011      	beq.n	8002060 <UART_SetConfig+0xc0>
 800203c:	2b03      	cmp	r3, #3
 800203e:	d005      	beq.n	800204c <UART_SetConfig+0xac>
 8002040:	e013      	b.n	800206a <UART_SetConfig+0xca>
 8002042:	231f      	movs	r3, #31
 8002044:	18fb      	adds	r3, r7, r3
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
 800204a:	e064      	b.n	8002116 <UART_SetConfig+0x176>
 800204c:	231f      	movs	r3, #31
 800204e:	18fb      	adds	r3, r7, r3
 8002050:	2202      	movs	r2, #2
 8002052:	701a      	strb	r2, [r3, #0]
 8002054:	e05f      	b.n	8002116 <UART_SetConfig+0x176>
 8002056:	231f      	movs	r3, #31
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	2204      	movs	r2, #4
 800205c:	701a      	strb	r2, [r3, #0]
 800205e:	e05a      	b.n	8002116 <UART_SetConfig+0x176>
 8002060:	231f      	movs	r3, #31
 8002062:	18fb      	adds	r3, r7, r3
 8002064:	2208      	movs	r2, #8
 8002066:	701a      	strb	r2, [r3, #0]
 8002068:	e055      	b.n	8002116 <UART_SetConfig+0x176>
 800206a:	231f      	movs	r3, #31
 800206c:	18fb      	adds	r3, r7, r3
 800206e:	2210      	movs	r2, #16
 8002070:	701a      	strb	r2, [r3, #0]
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	e04f      	b.n	8002116 <UART_SetConfig+0x176>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4aa0      	ldr	r2, [pc, #640]	; (80022fc <UART_SetConfig+0x35c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d132      	bne.n	80020e6 <UART_SetConfig+0x146>
 8002080:	4b9d      	ldr	r3, [pc, #628]	; (80022f8 <UART_SetConfig+0x358>)
 8002082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002084:	23c0      	movs	r3, #192	; 0xc0
 8002086:	029b      	lsls	r3, r3, #10
 8002088:	4013      	ands	r3, r2
 800208a:	2280      	movs	r2, #128	; 0x80
 800208c:	0252      	lsls	r2, r2, #9
 800208e:	4293      	cmp	r3, r2
 8002090:	d019      	beq.n	80020c6 <UART_SetConfig+0x126>
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	0252      	lsls	r2, r2, #9
 8002096:	4293      	cmp	r3, r2
 8002098:	d802      	bhi.n	80020a0 <UART_SetConfig+0x100>
 800209a:	2b00      	cmp	r3, #0
 800209c:	d009      	beq.n	80020b2 <UART_SetConfig+0x112>
 800209e:	e01c      	b.n	80020da <UART_SetConfig+0x13a>
 80020a0:	2280      	movs	r2, #128	; 0x80
 80020a2:	0292      	lsls	r2, r2, #10
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d013      	beq.n	80020d0 <UART_SetConfig+0x130>
 80020a8:	22c0      	movs	r2, #192	; 0xc0
 80020aa:	0292      	lsls	r2, r2, #10
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d005      	beq.n	80020bc <UART_SetConfig+0x11c>
 80020b0:	e013      	b.n	80020da <UART_SetConfig+0x13a>
 80020b2:	231f      	movs	r3, #31
 80020b4:	18fb      	adds	r3, r7, r3
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	e02c      	b.n	8002116 <UART_SetConfig+0x176>
 80020bc:	231f      	movs	r3, #31
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	2202      	movs	r2, #2
 80020c2:	701a      	strb	r2, [r3, #0]
 80020c4:	e027      	b.n	8002116 <UART_SetConfig+0x176>
 80020c6:	231f      	movs	r3, #31
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	2204      	movs	r2, #4
 80020cc:	701a      	strb	r2, [r3, #0]
 80020ce:	e022      	b.n	8002116 <UART_SetConfig+0x176>
 80020d0:	231f      	movs	r3, #31
 80020d2:	18fb      	adds	r3, r7, r3
 80020d4:	2208      	movs	r2, #8
 80020d6:	701a      	strb	r2, [r3, #0]
 80020d8:	e01d      	b.n	8002116 <UART_SetConfig+0x176>
 80020da:	231f      	movs	r3, #31
 80020dc:	18fb      	adds	r3, r7, r3
 80020de:	2210      	movs	r2, #16
 80020e0:	701a      	strb	r2, [r3, #0]
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	e017      	b.n	8002116 <UART_SetConfig+0x176>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a85      	ldr	r2, [pc, #532]	; (8002300 <UART_SetConfig+0x360>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d104      	bne.n	80020fa <UART_SetConfig+0x15a>
 80020f0:	231f      	movs	r3, #31
 80020f2:	18fb      	adds	r3, r7, r3
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
 80020f8:	e00d      	b.n	8002116 <UART_SetConfig+0x176>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a81      	ldr	r2, [pc, #516]	; (8002304 <UART_SetConfig+0x364>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d104      	bne.n	800210e <UART_SetConfig+0x16e>
 8002104:	231f      	movs	r3, #31
 8002106:	18fb      	adds	r3, r7, r3
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]
 800210c:	e003      	b.n	8002116 <UART_SetConfig+0x176>
 800210e:	231f      	movs	r3, #31
 8002110:	18fb      	adds	r3, r7, r3
 8002112:	2210      	movs	r2, #16
 8002114:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69da      	ldr	r2, [r3, #28]
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	021b      	lsls	r3, r3, #8
 800211e:	429a      	cmp	r2, r3
 8002120:	d000      	beq.n	8002124 <UART_SetConfig+0x184>
 8002122:	e07d      	b.n	8002220 <UART_SetConfig+0x280>
  {
    switch (clocksource)
 8002124:	231f      	movs	r3, #31
 8002126:	18fb      	adds	r3, r7, r3
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d01c      	beq.n	8002168 <UART_SetConfig+0x1c8>
 800212e:	dc02      	bgt.n	8002136 <UART_SetConfig+0x196>
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <UART_SetConfig+0x1a0>
 8002134:	e04b      	b.n	80021ce <UART_SetConfig+0x22e>
 8002136:	2b04      	cmp	r3, #4
 8002138:	d025      	beq.n	8002186 <UART_SetConfig+0x1e6>
 800213a:	2b08      	cmp	r3, #8
 800213c:	d037      	beq.n	80021ae <UART_SetConfig+0x20e>
 800213e:	e046      	b.n	80021ce <UART_SetConfig+0x22e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002140:	f7ff fb62 	bl	8001808 <HAL_RCC_GetPCLK1Freq>
 8002144:	0003      	movs	r3, r0
 8002146:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	005a      	lsls	r2, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	18d2      	adds	r2, r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	0019      	movs	r1, r3
 800215a:	0010      	movs	r0, r2
 800215c:	f7fd ffd4 	bl	8000108 <__udivsi3>
 8002160:	0003      	movs	r3, r0
 8002162:	b29b      	uxth	r3, r3
 8002164:	61bb      	str	r3, [r7, #24]
        break;
 8002166:	e037      	b.n	80021d8 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	085b      	lsrs	r3, r3, #1
 800216e:	4a66      	ldr	r2, [pc, #408]	; (8002308 <UART_SetConfig+0x368>)
 8002170:	189a      	adds	r2, r3, r2
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	0019      	movs	r1, r3
 8002178:	0010      	movs	r0, r2
 800217a:	f7fd ffc5 	bl	8000108 <__udivsi3>
 800217e:	0003      	movs	r3, r0
 8002180:	b29b      	uxth	r3, r3
 8002182:	61bb      	str	r3, [r7, #24]
        break;
 8002184:	e028      	b.n	80021d8 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002186:	f7ff fab7 	bl	80016f8 <HAL_RCC_GetSysClockFreq>
 800218a:	0003      	movs	r3, r0
 800218c:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	005a      	lsls	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	085b      	lsrs	r3, r3, #1
 8002198:	18d2      	adds	r2, r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	0019      	movs	r1, r3
 80021a0:	0010      	movs	r0, r2
 80021a2:	f7fd ffb1 	bl	8000108 <__udivsi3>
 80021a6:	0003      	movs	r3, r0
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	61bb      	str	r3, [r7, #24]
        break;
 80021ac:	e014      	b.n	80021d8 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	085b      	lsrs	r3, r3, #1
 80021b4:	2280      	movs	r2, #128	; 0x80
 80021b6:	0252      	lsls	r2, r2, #9
 80021b8:	189a      	adds	r2, r3, r2
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	0019      	movs	r1, r3
 80021c0:	0010      	movs	r0, r2
 80021c2:	f7fd ffa1 	bl	8000108 <__udivsi3>
 80021c6:	0003      	movs	r3, r0
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	61bb      	str	r3, [r7, #24]
        break;
 80021cc:	e004      	b.n	80021d8 <UART_SetConfig+0x238>
      default:
        ret = HAL_ERROR;
 80021ce:	2317      	movs	r3, #23
 80021d0:	18fb      	adds	r3, r7, r3
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]
        break;
 80021d6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	2b0f      	cmp	r3, #15
 80021dc:	d91b      	bls.n	8002216 <UART_SetConfig+0x276>
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	4a4a      	ldr	r2, [pc, #296]	; (800230c <UART_SetConfig+0x36c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d817      	bhi.n	8002216 <UART_SetConfig+0x276>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	200a      	movs	r0, #10
 80021ec:	183b      	adds	r3, r7, r0
 80021ee:	210f      	movs	r1, #15
 80021f0:	438a      	bics	r2, r1
 80021f2:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	085b      	lsrs	r3, r3, #1
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	2207      	movs	r2, #7
 80021fc:	4013      	ands	r3, r2
 80021fe:	b299      	uxth	r1, r3
 8002200:	183b      	adds	r3, r7, r0
 8002202:	183a      	adds	r2, r7, r0
 8002204:	8812      	ldrh	r2, [r2, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	183a      	adds	r2, r7, r0
 8002210:	8812      	ldrh	r2, [r2, #0]
 8002212:	60da      	str	r2, [r3, #12]
 8002214:	e082      	b.n	800231c <UART_SetConfig+0x37c>
    }
    else
    {
      ret = HAL_ERROR;
 8002216:	2317      	movs	r3, #23
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	2201      	movs	r2, #1
 800221c:	701a      	strb	r2, [r3, #0]
 800221e:	e07d      	b.n	800231c <UART_SetConfig+0x37c>
    }
  }
  else
  {
    switch (clocksource)
 8002220:	231f      	movs	r3, #31
 8002222:	18fb      	adds	r3, r7, r3
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d01b      	beq.n	8002262 <UART_SetConfig+0x2c2>
 800222a:	dc02      	bgt.n	8002232 <UART_SetConfig+0x292>
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <UART_SetConfig+0x29c>
 8002230:	e049      	b.n	80022c6 <UART_SetConfig+0x326>
 8002232:	2b04      	cmp	r3, #4
 8002234:	d024      	beq.n	8002280 <UART_SetConfig+0x2e0>
 8002236:	2b08      	cmp	r3, #8
 8002238:	d035      	beq.n	80022a6 <UART_SetConfig+0x306>
 800223a:	e044      	b.n	80022c6 <UART_SetConfig+0x326>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800223c:	f7ff fae4 	bl	8001808 <HAL_RCC_GetPCLK1Freq>
 8002240:	0003      	movs	r3, r0
 8002242:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	085a      	lsrs	r2, r3, #1
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	18d2      	adds	r2, r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	0019      	movs	r1, r3
 8002254:	0010      	movs	r0, r2
 8002256:	f7fd ff57 	bl	8000108 <__udivsi3>
 800225a:	0003      	movs	r3, r0
 800225c:	b29b      	uxth	r3, r3
 800225e:	61bb      	str	r3, [r7, #24]
        break;
 8002260:	e036      	b.n	80022d0 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	085b      	lsrs	r3, r3, #1
 8002268:	4a29      	ldr	r2, [pc, #164]	; (8002310 <UART_SetConfig+0x370>)
 800226a:	189a      	adds	r2, r3, r2
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	0019      	movs	r1, r3
 8002272:	0010      	movs	r0, r2
 8002274:	f7fd ff48 	bl	8000108 <__udivsi3>
 8002278:	0003      	movs	r3, r0
 800227a:	b29b      	uxth	r3, r3
 800227c:	61bb      	str	r3, [r7, #24]
        break;
 800227e:	e027      	b.n	80022d0 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002280:	f7ff fa3a 	bl	80016f8 <HAL_RCC_GetSysClockFreq>
 8002284:	0003      	movs	r3, r0
 8002286:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	085a      	lsrs	r2, r3, #1
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	18d2      	adds	r2, r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	0019      	movs	r1, r3
 8002298:	0010      	movs	r0, r2
 800229a:	f7fd ff35 	bl	8000108 <__udivsi3>
 800229e:	0003      	movs	r3, r0
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	61bb      	str	r3, [r7, #24]
        break;
 80022a4:	e014      	b.n	80022d0 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	085b      	lsrs	r3, r3, #1
 80022ac:	2280      	movs	r2, #128	; 0x80
 80022ae:	0212      	lsls	r2, r2, #8
 80022b0:	189a      	adds	r2, r3, r2
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	0019      	movs	r1, r3
 80022b8:	0010      	movs	r0, r2
 80022ba:	f7fd ff25 	bl	8000108 <__udivsi3>
 80022be:	0003      	movs	r3, r0
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	61bb      	str	r3, [r7, #24]
        break;
 80022c4:	e004      	b.n	80022d0 <UART_SetConfig+0x330>
      default:
        ret = HAL_ERROR;
 80022c6:	2317      	movs	r3, #23
 80022c8:	18fb      	adds	r3, r7, r3
 80022ca:	2201      	movs	r2, #1
 80022cc:	701a      	strb	r2, [r3, #0]
        break;
 80022ce:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	2b0f      	cmp	r3, #15
 80022d4:	d91e      	bls.n	8002314 <UART_SetConfig+0x374>
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	4a0c      	ldr	r2, [pc, #48]	; (800230c <UART_SetConfig+0x36c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d81a      	bhi.n	8002314 <UART_SetConfig+0x374>
    {
      huart->Instance->BRR = usartdiv;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	e019      	b.n	800231c <UART_SetConfig+0x37c>
 80022e8:	efff69f3 	.word	0xefff69f3
 80022ec:	ffffcfff 	.word	0xffffcfff
 80022f0:	fffff4ff 	.word	0xfffff4ff
 80022f4:	40013800 	.word	0x40013800
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40004400 	.word	0x40004400
 8002300:	40004800 	.word	0x40004800
 8002304:	40004c00 	.word	0x40004c00
 8002308:	00f42400 	.word	0x00f42400
 800230c:	0000ffff 	.word	0x0000ffff
 8002310:	007a1200 	.word	0x007a1200
    }
    else
    {
      ret = HAL_ERROR;
 8002314:	2317      	movs	r3, #23
 8002316:	18fb      	adds	r3, r7, r3
 8002318:	2201      	movs	r2, #1
 800231a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002328:	2317      	movs	r3, #23
 800232a:	18fb      	adds	r3, r7, r3
 800232c:	781b      	ldrb	r3, [r3, #0]
}
 800232e:	0018      	movs	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	b008      	add	sp, #32
 8002334:	bd80      	pop	{r7, pc}
 8002336:	46c0      	nop			; (mov r8, r8)

08002338 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	2201      	movs	r2, #1
 8002346:	4013      	ands	r3, r2
 8002348:	d00b      	beq.n	8002362 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	4a4a      	ldr	r2, [pc, #296]	; (800247c <UART_AdvFeatureConfig+0x144>)
 8002352:	4013      	ands	r3, r2
 8002354:	0019      	movs	r1, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	2202      	movs	r2, #2
 8002368:	4013      	ands	r3, r2
 800236a:	d00b      	beq.n	8002384 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	4a43      	ldr	r2, [pc, #268]	; (8002480 <UART_AdvFeatureConfig+0x148>)
 8002374:	4013      	ands	r3, r2
 8002376:	0019      	movs	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	2204      	movs	r2, #4
 800238a:	4013      	ands	r3, r2
 800238c:	d00b      	beq.n	80023a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	4a3b      	ldr	r2, [pc, #236]	; (8002484 <UART_AdvFeatureConfig+0x14c>)
 8002396:	4013      	ands	r3, r2
 8002398:	0019      	movs	r1, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	2208      	movs	r2, #8
 80023ac:	4013      	ands	r3, r2
 80023ae:	d00b      	beq.n	80023c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	4a34      	ldr	r2, [pc, #208]	; (8002488 <UART_AdvFeatureConfig+0x150>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	0019      	movs	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	2210      	movs	r2, #16
 80023ce:	4013      	ands	r3, r2
 80023d0:	d00b      	beq.n	80023ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	4a2c      	ldr	r2, [pc, #176]	; (800248c <UART_AdvFeatureConfig+0x154>)
 80023da:	4013      	ands	r3, r2
 80023dc:	0019      	movs	r1, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	2220      	movs	r2, #32
 80023f0:	4013      	ands	r3, r2
 80023f2:	d00b      	beq.n	800240c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	4a25      	ldr	r2, [pc, #148]	; (8002490 <UART_AdvFeatureConfig+0x158>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	0019      	movs	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	2240      	movs	r2, #64	; 0x40
 8002412:	4013      	ands	r3, r2
 8002414:	d01d      	beq.n	8002452 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4a1d      	ldr	r2, [pc, #116]	; (8002494 <UART_AdvFeatureConfig+0x15c>)
 800241e:	4013      	ands	r3, r2
 8002420:	0019      	movs	r1, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002432:	2380      	movs	r3, #128	; 0x80
 8002434:	035b      	lsls	r3, r3, #13
 8002436:	429a      	cmp	r2, r3
 8002438:	d10b      	bne.n	8002452 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4a15      	ldr	r2, [pc, #84]	; (8002498 <UART_AdvFeatureConfig+0x160>)
 8002442:	4013      	ands	r3, r2
 8002444:	0019      	movs	r1, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	2280      	movs	r2, #128	; 0x80
 8002458:	4013      	ands	r3, r2
 800245a:	d00b      	beq.n	8002474 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4a0e      	ldr	r2, [pc, #56]	; (800249c <UART_AdvFeatureConfig+0x164>)
 8002464:	4013      	ands	r3, r2
 8002466:	0019      	movs	r1, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	605a      	str	r2, [r3, #4]
  }
}
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	b002      	add	sp, #8
 800247a:	bd80      	pop	{r7, pc}
 800247c:	fffdffff 	.word	0xfffdffff
 8002480:	fffeffff 	.word	0xfffeffff
 8002484:	fffbffff 	.word	0xfffbffff
 8002488:	ffff7fff 	.word	0xffff7fff
 800248c:	ffffefff 	.word	0xffffefff
 8002490:	ffffdfff 	.word	0xffffdfff
 8002494:	ffefffff 	.word	0xffefffff
 8002498:	ff9fffff 	.word	0xff9fffff
 800249c:	fff7ffff 	.word	0xfff7ffff

080024a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af02      	add	r7, sp, #8
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80024ae:	f7fe f9a7 	bl	8000800 <HAL_GetTick>
 80024b2:	0003      	movs	r3, r0
 80024b4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2208      	movs	r2, #8
 80024be:	4013      	ands	r3, r2
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d10d      	bne.n	80024e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	0399      	lsls	r1, r3, #14
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	4b16      	ldr	r3, [pc, #88]	; (8002528 <UART_CheckIdleState+0x88>)
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	0013      	movs	r3, r2
 80024d2:	2200      	movs	r2, #0
 80024d4:	f000 f82a 	bl	800252c <UART_WaitOnFlagUntilTimeout>
 80024d8:	1e03      	subs	r3, r0, #0
 80024da:	d001      	beq.n	80024e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e01f      	b.n	8002520 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2204      	movs	r2, #4
 80024e8:	4013      	ands	r3, r2
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d10d      	bne.n	800250a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	03d9      	lsls	r1, r3, #15
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <UART_CheckIdleState+0x88>)
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	0013      	movs	r3, r2
 80024fc:	2200      	movs	r2, #0
 80024fe:	f000 f815 	bl	800252c <UART_WaitOnFlagUntilTimeout>
 8002502:	1e03      	subs	r3, r0, #0
 8002504:	d001      	beq.n	800250a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e00a      	b.n	8002520 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2220      	movs	r2, #32
 800250e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2220      	movs	r2, #32
 8002514:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2270      	movs	r2, #112	; 0x70
 800251a:	2100      	movs	r1, #0
 800251c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	0018      	movs	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	b004      	add	sp, #16
 8002526:	bd80      	pop	{r7, pc}
 8002528:	01ffffff 	.word	0x01ffffff

0800252c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	1dfb      	adds	r3, r7, #7
 800253a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800253c:	e05d      	b.n	80025fa <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	3301      	adds	r3, #1
 8002542:	d05a      	beq.n	80025fa <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002544:	f7fe f95c 	bl	8000800 <HAL_GetTick>
 8002548:	0002      	movs	r2, r0
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	429a      	cmp	r2, r3
 8002552:	d302      	bcc.n	800255a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d11b      	bne.n	8002592 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	492f      	ldr	r1, [pc, #188]	; (8002624 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002566:	400a      	ands	r2, r1
 8002568:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2101      	movs	r1, #1
 8002576:	438a      	bics	r2, r1
 8002578:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2220      	movs	r2, #32
 800257e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2270      	movs	r2, #112	; 0x70
 800258a:	2100      	movs	r1, #0
 800258c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e043      	b.n	800261a <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2204      	movs	r2, #4
 800259a:	4013      	ands	r3, r2
 800259c:	d02d      	beq.n	80025fa <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	69da      	ldr	r2, [r3, #28]
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	401a      	ands	r2, r3
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d123      	bne.n	80025fa <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2280      	movs	r2, #128	; 0x80
 80025b8:	0112      	lsls	r2, r2, #4
 80025ba:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4917      	ldr	r1, [pc, #92]	; (8002624 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80025c8:	400a      	ands	r2, r1
 80025ca:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2101      	movs	r1, #1
 80025d8:	438a      	bics	r2, r1
 80025da:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2220      	movs	r2, #32
 80025e0:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2220      	movs	r2, #32
 80025e6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2220      	movs	r2, #32
 80025ec:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2270      	movs	r2, #112	; 0x70
 80025f2:	2100      	movs	r1, #0
 80025f4:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e00f      	b.n	800261a <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	4013      	ands	r3, r2
 8002604:	68ba      	ldr	r2, [r7, #8]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	425a      	negs	r2, r3
 800260a:	4153      	adcs	r3, r2
 800260c:	b2db      	uxtb	r3, r3
 800260e:	001a      	movs	r2, r3
 8002610:	1dfb      	adds	r3, r7, #7
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d092      	beq.n	800253e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	0018      	movs	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	b004      	add	sp, #16
 8002620:	bd80      	pop	{r7, pc}
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	fffffe5f 	.word	0xfffffe5f

08002628 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	490a      	ldr	r1, [pc, #40]	; (8002664 <UART_EndRxTransfer+0x3c>)
 800263c:	400a      	ands	r2, r1
 800263e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2101      	movs	r1, #1
 800264c:	438a      	bics	r2, r1
 800264e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2220      	movs	r2, #32
 8002654:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800265c:	46c0      	nop			; (mov r8, r8)
 800265e:	46bd      	mov	sp, r7
 8002660:	b002      	add	sp, #8
 8002662:	bd80      	pop	{r7, pc}
 8002664:	fffffedf 	.word	0xfffffedf

08002668 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	225a      	movs	r2, #90	; 0x5a
 800267a:	2100      	movs	r1, #0
 800267c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2252      	movs	r2, #82	; 0x52
 8002682:	2100      	movs	r1, #0
 8002684:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	0018      	movs	r0, r3
 800268a:	f7fd ff51 	bl	8000530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	46bd      	mov	sp, r7
 8002692:	b004      	add	sp, #16
 8002694:	bd80      	pop	{r7, pc}

08002696 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a2:	2b21      	cmp	r3, #33	; 0x21
 80026a4:	d12b      	bne.n	80026fe <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2252      	movs	r2, #82	; 0x52
 80026aa:	5a9b      	ldrh	r3, [r3, r2]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d110      	bne.n	80026d4 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2180      	movs	r1, #128	; 0x80
 80026be:	438a      	bics	r2, r1
 80026c0:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2140      	movs	r1, #64	; 0x40
 80026ce:	430a      	orrs	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80026d2:	e014      	b.n	80026fe <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d8:	781a      	ldrb	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	b292      	uxth	r2, r2
 80026e0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2252      	movs	r2, #82	; 0x52
 80026f0:	5a9b      	ldrh	r3, [r3, r2]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b299      	uxth	r1, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2252      	movs	r2, #82	; 0x52
 80026fc:	5299      	strh	r1, [r3, r2]
}
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	46bd      	mov	sp, r7
 8002702:	b002      	add	sp, #8
 8002704:	bd80      	pop	{r7, pc}

08002706 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002712:	2b21      	cmp	r3, #33	; 0x21
 8002714:	d12f      	bne.n	8002776 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2252      	movs	r2, #82	; 0x52
 800271a:	5a9b      	ldrh	r3, [r3, r2]
 800271c:	b29b      	uxth	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d110      	bne.n	8002744 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2180      	movs	r1, #128	; 0x80
 800272e:	438a      	bics	r2, r1
 8002730:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2140      	movs	r1, #64	; 0x40
 800273e:	430a      	orrs	r2, r1
 8002740:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8002742:	e018      	b.n	8002776 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002748:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	881a      	ldrh	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	05d2      	lsls	r2, r2, #23
 8002754:	0dd2      	lsrs	r2, r2, #23
 8002756:	b292      	uxth	r2, r2
 8002758:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275e:	1c9a      	adds	r2, r3, #2
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2252      	movs	r2, #82	; 0x52
 8002768:	5a9b      	ldrh	r3, [r3, r2]
 800276a:	b29b      	uxth	r3, r3
 800276c:	3b01      	subs	r3, #1
 800276e:	b299      	uxth	r1, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2252      	movs	r2, #82	; 0x52
 8002774:	5299      	strh	r1, [r3, r2]
}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	46bd      	mov	sp, r7
 800277a:	b004      	add	sp, #16
 800277c:	bd80      	pop	{r7, pc}

0800277e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2140      	movs	r1, #64	; 0x40
 8002792:	438a      	bics	r2, r1
 8002794:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2220      	movs	r2, #32
 800279a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	0018      	movs	r0, r3
 80027a6:	f7fd fea7 	bl	80004f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	46bd      	mov	sp, r7
 80027ae:	b002      	add	sp, #8
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80027bc:	230e      	movs	r3, #14
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	215c      	movs	r1, #92	; 0x5c
 80027c4:	5a52      	ldrh	r2, [r2, r1]
 80027c6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027cc:	2b22      	cmp	r3, #34	; 0x22
 80027ce:	d140      	bne.n	8002852 <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	210c      	movs	r1, #12
 80027d6:	187b      	adds	r3, r7, r1
 80027d8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80027da:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80027dc:	187b      	adds	r3, r7, r1
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	230e      	movs	r3, #14
 80027e4:	18fb      	adds	r3, r7, r3
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	b2d9      	uxtb	r1, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ee:	400a      	ands	r2, r1
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	225a      	movs	r2, #90	; 0x5a
 8002802:	5a9b      	ldrh	r3, [r3, r2]
 8002804:	b29b      	uxth	r3, r3
 8002806:	3b01      	subs	r3, #1
 8002808:	b299      	uxth	r1, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	225a      	movs	r2, #90	; 0x5a
 800280e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	225a      	movs	r2, #90	; 0x5a
 8002814:	5a9b      	ldrh	r3, [r3, r2]
 8002816:	b29b      	uxth	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	d122      	bne.n	8002862 <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4911      	ldr	r1, [pc, #68]	; (800286c <UART_RxISR_8BIT+0xb8>)
 8002828:	400a      	ands	r2, r1
 800282a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2101      	movs	r1, #1
 8002838:	438a      	bics	r2, r1
 800283a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2220      	movs	r2, #32
 8002840:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	0018      	movs	r0, r3
 800284c:	f7fd fe62 	bl	8000514 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002850:	e007      	b.n	8002862 <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	699a      	ldr	r2, [r3, #24]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2108      	movs	r1, #8
 800285e:	430a      	orrs	r2, r1
 8002860:	619a      	str	r2, [r3, #24]
}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	46bd      	mov	sp, r7
 8002866:	b004      	add	sp, #16
 8002868:	bd80      	pop	{r7, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	fffffedf 	.word	0xfffffedf

08002870 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002878:	230e      	movs	r3, #14
 800287a:	18fb      	adds	r3, r7, r3
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	215c      	movs	r1, #92	; 0x5c
 8002880:	5a52      	ldrh	r2, [r2, r1]
 8002882:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002888:	2b22      	cmp	r3, #34	; 0x22
 800288a:	d140      	bne.n	800290e <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	210c      	movs	r1, #12
 8002892:	187b      	adds	r3, r7, r1
 8002894:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002896:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800289e:	187b      	adds	r3, r7, r1
 80028a0:	220e      	movs	r2, #14
 80028a2:	18ba      	adds	r2, r7, r2
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	8812      	ldrh	r2, [r2, #0]
 80028a8:	4013      	ands	r3, r2
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b4:	1c9a      	adds	r2, r3, #2
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	225a      	movs	r2, #90	; 0x5a
 80028be:	5a9b      	ldrh	r3, [r3, r2]
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b299      	uxth	r1, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	225a      	movs	r2, #90	; 0x5a
 80028ca:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	225a      	movs	r2, #90	; 0x5a
 80028d0:	5a9b      	ldrh	r3, [r3, r2]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d122      	bne.n	800291e <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4911      	ldr	r1, [pc, #68]	; (8002928 <UART_RxISR_16BIT+0xb8>)
 80028e4:	400a      	ands	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2101      	movs	r1, #1
 80028f4:	438a      	bics	r2, r1
 80028f6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2220      	movs	r2, #32
 80028fc:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	0018      	movs	r0, r3
 8002908:	f7fd fe04 	bl	8000514 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800290c:	e007      	b.n	800291e <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	699a      	ldr	r2, [r3, #24]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2108      	movs	r1, #8
 800291a:	430a      	orrs	r2, r1
 800291c:	619a      	str	r2, [r3, #24]
}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	46bd      	mov	sp, r7
 8002922:	b004      	add	sp, #16
 8002924:	bd80      	pop	{r7, pc}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	fffffedf 	.word	0xfffffedf

0800292c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002934:	46c0      	nop			; (mov r8, r8)
 8002936:	46bd      	mov	sp, r7
 8002938:	b002      	add	sp, #8
 800293a:	bd80      	pop	{r7, pc}

0800293c <__libc_init_array>:
 800293c:	b570      	push	{r4, r5, r6, lr}
 800293e:	2600      	movs	r6, #0
 8002940:	4d0c      	ldr	r5, [pc, #48]	; (8002974 <__libc_init_array+0x38>)
 8002942:	4c0d      	ldr	r4, [pc, #52]	; (8002978 <__libc_init_array+0x3c>)
 8002944:	1b64      	subs	r4, r4, r5
 8002946:	10a4      	asrs	r4, r4, #2
 8002948:	42a6      	cmp	r6, r4
 800294a:	d109      	bne.n	8002960 <__libc_init_array+0x24>
 800294c:	2600      	movs	r6, #0
 800294e:	f000 f821 	bl	8002994 <_init>
 8002952:	4d0a      	ldr	r5, [pc, #40]	; (800297c <__libc_init_array+0x40>)
 8002954:	4c0a      	ldr	r4, [pc, #40]	; (8002980 <__libc_init_array+0x44>)
 8002956:	1b64      	subs	r4, r4, r5
 8002958:	10a4      	asrs	r4, r4, #2
 800295a:	42a6      	cmp	r6, r4
 800295c:	d105      	bne.n	800296a <__libc_init_array+0x2e>
 800295e:	bd70      	pop	{r4, r5, r6, pc}
 8002960:	00b3      	lsls	r3, r6, #2
 8002962:	58eb      	ldr	r3, [r5, r3]
 8002964:	4798      	blx	r3
 8002966:	3601      	adds	r6, #1
 8002968:	e7ee      	b.n	8002948 <__libc_init_array+0xc>
 800296a:	00b3      	lsls	r3, r6, #2
 800296c:	58eb      	ldr	r3, [r5, r3]
 800296e:	4798      	blx	r3
 8002970:	3601      	adds	r6, #1
 8002972:	e7f2      	b.n	800295a <__libc_init_array+0x1e>
 8002974:	080029e4 	.word	0x080029e4
 8002978:	080029e4 	.word	0x080029e4
 800297c:	080029e4 	.word	0x080029e4
 8002980:	080029e8 	.word	0x080029e8

08002984 <memset>:
 8002984:	0003      	movs	r3, r0
 8002986:	1812      	adds	r2, r2, r0
 8002988:	4293      	cmp	r3, r2
 800298a:	d100      	bne.n	800298e <memset+0xa>
 800298c:	4770      	bx	lr
 800298e:	7019      	strb	r1, [r3, #0]
 8002990:	3301      	adds	r3, #1
 8002992:	e7f9      	b.n	8002988 <memset+0x4>

08002994 <_init>:
 8002994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800299a:	bc08      	pop	{r3}
 800299c:	469e      	mov	lr, r3
 800299e:	4770      	bx	lr

080029a0 <_fini>:
 80029a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029a6:	bc08      	pop	{r3}
 80029a8:	469e      	mov	lr, r3
 80029aa:	4770      	bx	lr
