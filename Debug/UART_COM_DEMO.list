
UART_COM_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080029b4  080029b4  000129b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029ec  080029ec  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080029ec  080029ec  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029ec  080029ec  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029ec  080029ec  000129ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029f0  080029f0  000129f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080029f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000010  08002a04  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002a04  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000823a  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000172a  00000000  00000000  00028272  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000700  00000000  00000000  000299a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000638  00000000  00000000  0002a0a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000157da  00000000  00000000  0002a6d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006b68  00000000  00000000  0003feb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000771e4  00000000  00000000  00046a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bdbfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000175c  00000000  00000000  000bdc7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800299c 	.word	0x0800299c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800299c 	.word	0x0800299c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000224:	f000 fa96 	bl	8000754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f854 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8da 	bl	80003e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f8a8 	bl	8000384 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Enable interrupts for transmission complete
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_TC);		//Activate Flags RXNE
 8000234:	4b24      	ldr	r3, [pc, #144]	; (80002c8 <main+0xa8>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	681a      	ldr	r2, [r3, #0]
 800023a:	4b23      	ldr	r3, [pc, #140]	; (80002c8 <main+0xa8>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	2140      	movs	r1, #64	; 0x40
 8000240:	430a      	orrs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);		//Activate flags TX
 8000244:	4b20      	ldr	r3, [pc, #128]	; (80002c8 <main+0xa8>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	4b1f      	ldr	r3, [pc, #124]	; (80002c8 <main+0xa8>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	2120      	movs	r1, #32
 8000250:	430a      	orrs	r2, r1
 8000252:	601a      	str	r2, [r3, #0]

  HAL_UART_Transmit_IT(&huart2, (uint8_t*)aTxBuffer, TXBUFFERSIZE);
 8000254:	491d      	ldr	r1, [pc, #116]	; (80002cc <main+0xac>)
 8000256:	4b1c      	ldr	r3, [pc, #112]	; (80002c8 <main+0xa8>)
 8000258:	2202      	movs	r2, #2
 800025a:	0018      	movs	r0, r3
 800025c:	f001 fc42 	bl	8001ae4 <HAL_UART_Transmit_IT>

  aTxBuffer[0] = 2;
 8000260:	4b1a      	ldr	r3, [pc, #104]	; (80002cc <main+0xac>)
 8000262:	2202      	movs	r2, #2
 8000264:	701a      	strb	r2, [r3, #0]
  aTxBuffer[1] = 3;
 8000266:	4b19      	ldr	r3, [pc, #100]	; (80002cc <main+0xac>)
 8000268:	2203      	movs	r2, #3
 800026a:	705a      	strb	r2, [r3, #1]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 // HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	  if (addrVal == 2)
 800026c:	4b18      	ldr	r3, [pc, #96]	; (80002d0 <main+0xb0>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	2b02      	cmp	r3, #2
 8000272:	d1fb      	bne.n	800026c <main+0x4c>
	  {
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000274:	2390      	movs	r3, #144	; 0x90
 8000276:	05db      	lsls	r3, r3, #23
 8000278:	2120      	movs	r1, #32
 800027a:	0018      	movs	r0, r3
 800027c:	f000 fda9 	bl	8000dd2 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 8000280:	20c8      	movs	r0, #200	; 0xc8
 8000282:	f000 facb 	bl	800081c <HAL_Delay>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000286:	2390      	movs	r3, #144	; 0x90
 8000288:	05db      	lsls	r3, r3, #23
 800028a:	2120      	movs	r1, #32
 800028c:	0018      	movs	r0, r3
 800028e:	f000 fda0 	bl	8000dd2 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 8000292:	20c8      	movs	r0, #200	; 0xc8
 8000294:	f000 fac2 	bl	800081c <HAL_Delay>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000298:	2390      	movs	r3, #144	; 0x90
 800029a:	05db      	lsls	r3, r3, #23
 800029c:	2120      	movs	r1, #32
 800029e:	0018      	movs	r0, r3
 80002a0:	f000 fd97 	bl	8000dd2 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 80002a4:	20c8      	movs	r0, #200	; 0xc8
 80002a6:	f000 fab9 	bl	800081c <HAL_Delay>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80002aa:	2390      	movs	r3, #144	; 0x90
 80002ac:	05db      	lsls	r3, r3, #23
 80002ae:	2120      	movs	r1, #32
 80002b0:	0018      	movs	r0, r3
 80002b2:	f000 fd8e 	bl	8000dd2 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 80002b6:	23fa      	movs	r3, #250	; 0xfa
 80002b8:	005b      	lsls	r3, r3, #1
 80002ba:	0018      	movs	r0, r3
 80002bc:	f000 faae 	bl	800081c <HAL_Delay>

		  addrVal = 0;
 80002c0:	4b03      	ldr	r3, [pc, #12]	; (80002d0 <main+0xb0>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	701a      	strb	r2, [r3, #0]
	  if (addrVal == 2)
 80002c6:	e7d1      	b.n	800026c <main+0x4c>
 80002c8:	20000034 	.word	0x20000034
 80002cc:	20000000 	.word	0x20000000
 80002d0:	2000002d 	.word	0x2000002d

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b590      	push	{r4, r7, lr}
 80002d6:	b099      	sub	sp, #100	; 0x64
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	242c      	movs	r4, #44	; 0x2c
 80002dc:	193b      	adds	r3, r7, r4
 80002de:	0018      	movs	r0, r3
 80002e0:	2334      	movs	r3, #52	; 0x34
 80002e2:	001a      	movs	r2, r3
 80002e4:	2100      	movs	r1, #0
 80002e6:	f002 fb51 	bl	800298c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ea:	231c      	movs	r3, #28
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	0018      	movs	r0, r3
 80002f0:	2310      	movs	r3, #16
 80002f2:	001a      	movs	r2, r3
 80002f4:	2100      	movs	r1, #0
 80002f6:	f002 fb49 	bl	800298c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002fa:	003b      	movs	r3, r7
 80002fc:	0018      	movs	r0, r3
 80002fe:	231c      	movs	r3, #28
 8000300:	001a      	movs	r2, r3
 8000302:	2100      	movs	r1, #0
 8000304:	f002 fb42 	bl	800298c <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000308:	0021      	movs	r1, r4
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2202      	movs	r2, #2
 800030e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2201      	movs	r2, #1
 8000314:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2210      	movs	r2, #16
 800031a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2200      	movs	r2, #0
 8000320:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000322:	187b      	adds	r3, r7, r1
 8000324:	0018      	movs	r0, r3
 8000326:	f000 fd8b 	bl	8000e40 <HAL_RCC_OscConfig>
 800032a:	1e03      	subs	r3, r0, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800032e:	f000 f91b 	bl	8000568 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000332:	211c      	movs	r1, #28
 8000334:	187b      	adds	r3, r7, r1
 8000336:	2207      	movs	r2, #7
 8000338:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800033a:	187b      	adds	r3, r7, r1
 800033c:	2200      	movs	r2, #0
 800033e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000340:	187b      	adds	r3, r7, r1
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000346:	187b      	adds	r3, r7, r1
 8000348:	2200      	movs	r2, #0
 800034a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800034c:	187b      	adds	r3, r7, r1
 800034e:	2100      	movs	r1, #0
 8000350:	0018      	movs	r0, r3
 8000352:	f001 f8fb 	bl	800154c <HAL_RCC_ClockConfig>
 8000356:	1e03      	subs	r3, r0, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800035a:	f000 f905 	bl	8000568 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800035e:	003b      	movs	r3, r7
 8000360:	2202      	movs	r2, #2
 8000362:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000364:	003b      	movs	r3, r7
 8000366:	2200      	movs	r2, #0
 8000368:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800036a:	003b      	movs	r3, r7
 800036c:	0018      	movs	r0, r3
 800036e:	f001 fa65 	bl	800183c <HAL_RCCEx_PeriphCLKConfig>
 8000372:	1e03      	subs	r3, r0, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000376:	f000 f8f7 	bl	8000568 <Error_Handler>
  }
}
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	46bd      	mov	sp, r7
 800037e:	b019      	add	sp, #100	; 0x64
 8000380:	bd90      	pop	{r4, r7, pc}
	...

08000384 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000388:	4b14      	ldr	r3, [pc, #80]	; (80003dc <MX_USART2_UART_Init+0x58>)
 800038a:	4a15      	ldr	r2, [pc, #84]	; (80003e0 <MX_USART2_UART_Init+0x5c>)
 800038c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800038e:	4b13      	ldr	r3, [pc, #76]	; (80003dc <MX_USART2_UART_Init+0x58>)
 8000390:	2296      	movs	r2, #150	; 0x96
 8000392:	0192      	lsls	r2, r2, #6
 8000394:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000396:	4b11      	ldr	r3, [pc, #68]	; (80003dc <MX_USART2_UART_Init+0x58>)
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <MX_USART2_UART_Init+0x58>)
 800039e:	2200      	movs	r2, #0
 80003a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003a2:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <MX_USART2_UART_Init+0x58>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003a8:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <MX_USART2_UART_Init+0x58>)
 80003aa:	220c      	movs	r2, #12
 80003ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ae:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <MX_USART2_UART_Init+0x58>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b4:	4b09      	ldr	r3, [pc, #36]	; (80003dc <MX_USART2_UART_Init+0x58>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003ba:	4b08      	ldr	r3, [pc, #32]	; (80003dc <MX_USART2_UART_Init+0x58>)
 80003bc:	2200      	movs	r2, #0
 80003be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <MX_USART2_UART_Init+0x58>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003c6:	4b05      	ldr	r3, [pc, #20]	; (80003dc <MX_USART2_UART_Init+0x58>)
 80003c8:	0018      	movs	r0, r3
 80003ca:	f001 fb37 	bl	8001a3c <HAL_UART_Init>
 80003ce:	1e03      	subs	r3, r0, #0
 80003d0:	d001      	beq.n	80003d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003d2:	f000 f8c9 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	20000034 	.word	0x20000034
 80003e0:	40004400 	.word	0x40004400

080003e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e4:	b590      	push	{r4, r7, lr}
 80003e6:	b089      	sub	sp, #36	; 0x24
 80003e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ea:	240c      	movs	r4, #12
 80003ec:	193b      	adds	r3, r7, r4
 80003ee:	0018      	movs	r0, r3
 80003f0:	2314      	movs	r3, #20
 80003f2:	001a      	movs	r2, r3
 80003f4:	2100      	movs	r1, #0
 80003f6:	f002 fac9 	bl	800298c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003fa:	4b30      	ldr	r3, [pc, #192]	; (80004bc <MX_GPIO_Init+0xd8>)
 80003fc:	695a      	ldr	r2, [r3, #20]
 80003fe:	4b2f      	ldr	r3, [pc, #188]	; (80004bc <MX_GPIO_Init+0xd8>)
 8000400:	2180      	movs	r1, #128	; 0x80
 8000402:	0309      	lsls	r1, r1, #12
 8000404:	430a      	orrs	r2, r1
 8000406:	615a      	str	r2, [r3, #20]
 8000408:	4b2c      	ldr	r3, [pc, #176]	; (80004bc <MX_GPIO_Init+0xd8>)
 800040a:	695a      	ldr	r2, [r3, #20]
 800040c:	2380      	movs	r3, #128	; 0x80
 800040e:	031b      	lsls	r3, r3, #12
 8000410:	4013      	ands	r3, r2
 8000412:	60bb      	str	r3, [r7, #8]
 8000414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000416:	4b29      	ldr	r3, [pc, #164]	; (80004bc <MX_GPIO_Init+0xd8>)
 8000418:	695a      	ldr	r2, [r3, #20]
 800041a:	4b28      	ldr	r3, [pc, #160]	; (80004bc <MX_GPIO_Init+0xd8>)
 800041c:	2180      	movs	r1, #128	; 0x80
 800041e:	03c9      	lsls	r1, r1, #15
 8000420:	430a      	orrs	r2, r1
 8000422:	615a      	str	r2, [r3, #20]
 8000424:	4b25      	ldr	r3, [pc, #148]	; (80004bc <MX_GPIO_Init+0xd8>)
 8000426:	695a      	ldr	r2, [r3, #20]
 8000428:	2380      	movs	r3, #128	; 0x80
 800042a:	03db      	lsls	r3, r3, #15
 800042c:	4013      	ands	r3, r2
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000432:	4b22      	ldr	r3, [pc, #136]	; (80004bc <MX_GPIO_Init+0xd8>)
 8000434:	695a      	ldr	r2, [r3, #20]
 8000436:	4b21      	ldr	r3, [pc, #132]	; (80004bc <MX_GPIO_Init+0xd8>)
 8000438:	2180      	movs	r1, #128	; 0x80
 800043a:	0289      	lsls	r1, r1, #10
 800043c:	430a      	orrs	r2, r1
 800043e:	615a      	str	r2, [r3, #20]
 8000440:	4b1e      	ldr	r3, [pc, #120]	; (80004bc <MX_GPIO_Init+0xd8>)
 8000442:	695a      	ldr	r2, [r3, #20]
 8000444:	2380      	movs	r3, #128	; 0x80
 8000446:	029b      	lsls	r3, r3, #10
 8000448:	4013      	ands	r3, r2
 800044a:	603b      	str	r3, [r7, #0]
 800044c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800044e:	2390      	movs	r3, #144	; 0x90
 8000450:	05db      	lsls	r3, r3, #23
 8000452:	2201      	movs	r2, #1
 8000454:	2120      	movs	r1, #32
 8000456:	0018      	movs	r0, r3
 8000458:	f000 fc9e 	bl	8000d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_USER_Pin */
  GPIO_InitStruct.Pin = BUTTON_USER_Pin;
 800045c:	193b      	adds	r3, r7, r4
 800045e:	2280      	movs	r2, #128	; 0x80
 8000460:	0192      	lsls	r2, r2, #6
 8000462:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000464:	193b      	adds	r3, r7, r4
 8000466:	4a16      	ldr	r2, [pc, #88]	; (80004c0 <MX_GPIO_Init+0xdc>)
 8000468:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	193b      	adds	r3, r7, r4
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_USER_GPIO_Port, &GPIO_InitStruct);
 8000470:	193b      	adds	r3, r7, r4
 8000472:	4a14      	ldr	r2, [pc, #80]	; (80004c4 <MX_GPIO_Init+0xe0>)
 8000474:	0019      	movs	r1, r3
 8000476:	0010      	movs	r0, r2
 8000478:	f000 fb16 	bl	8000aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800047c:	0021      	movs	r1, r4
 800047e:	187b      	adds	r3, r7, r1
 8000480:	2220      	movs	r2, #32
 8000482:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000484:	187b      	adds	r3, r7, r1
 8000486:	2201      	movs	r2, #1
 8000488:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048a:	187b      	adds	r3, r7, r1
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000490:	187b      	adds	r3, r7, r1
 8000492:	2200      	movs	r2, #0
 8000494:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000496:	187a      	adds	r2, r7, r1
 8000498:	2390      	movs	r3, #144	; 0x90
 800049a:	05db      	lsls	r3, r3, #23
 800049c:	0011      	movs	r1, r2
 800049e:	0018      	movs	r0, r3
 80004a0:	f000 fb02 	bl	8000aa8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2100      	movs	r1, #0
 80004a8:	2007      	movs	r0, #7
 80004aa:	f000 fa85 	bl	80009b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80004ae:	2007      	movs	r0, #7
 80004b0:	f000 fa97 	bl	80009e2 <HAL_NVIC_EnableIRQ>

}
 80004b4:	46c0      	nop			; (mov r8, r8)
 80004b6:	46bd      	mov	sp, r7
 80004b8:	b009      	add	sp, #36	; 0x24
 80004ba:	bd90      	pop	{r4, r7, pc}
 80004bc:	40021000 	.word	0x40021000
 80004c0:	10110000 	.word	0x10110000
 80004c4:	48000800 	.word	0x48000800

080004c8 <HAL_UART_TxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Tx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004d0:	2390      	movs	r3, #144	; 0x90
 80004d2:	05db      	lsls	r3, r3, #23
 80004d4:	2200      	movs	r2, #0
 80004d6:	2120      	movs	r1, #32
 80004d8:	0018      	movs	r0, r3
 80004da:	f000 fc5d 	bl	8000d98 <HAL_GPIO_WritePin>

}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	46bd      	mov	sp, r7
 80004e2:	b002      	add	sp, #8
 80004e4:	bd80      	pop	{r7, pc}
	...

080004e8 <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80004f0:	2390      	movs	r3, #144	; 0x90
 80004f2:	05db      	lsls	r3, r3, #23
 80004f4:	2120      	movs	r1, #32
 80004f6:	0018      	movs	r0, r3
 80004f8:	f000 fc6b 	bl	8000dd2 <HAL_GPIO_TogglePin>
	statusVal = aRxBuffer[1];
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <HAL_UART_RxCpltCallback+0x2c>)
 80004fe:	785a      	ldrb	r2, [r3, #1]
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <HAL_UART_RxCpltCallback+0x30>)
 8000502:	701a      	strb	r2, [r3, #0]
	addrVal = aRxBuffer[0];
 8000504:	4b03      	ldr	r3, [pc, #12]	; (8000514 <HAL_UART_RxCpltCallback+0x2c>)
 8000506:	781a      	ldrb	r2, [r3, #0]
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <HAL_UART_RxCpltCallback+0x34>)
 800050a:	701a      	strb	r2, [r3, #0]
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b002      	add	sp, #8
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000030 	.word	0x20000030
 8000518:	2000002c 	.word	0x2000002c
 800051c:	2000002d 	.word	0x2000002d

08000520 <HAL_UART_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart2)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
    Error_Handler();
 8000528:	f000 f81e 	bl	8000568 <Error_Handler>
}
 800052c:	46c0      	nop			; (mov r8, r8)
 800052e:	46bd      	mov	sp, r7
 8000530:	b002      	add	sp, #8
 8000532:	bd80      	pop	{r7, pc}

08000534 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	0002      	movs	r2, r0
 800053c:	1dbb      	adds	r3, r7, #6
 800053e:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == BUTTON_USER_Pin)
 8000540:	1dbb      	adds	r3, r7, #6
 8000542:	881a      	ldrh	r2, [r3, #0]
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	019b      	lsls	r3, r3, #6
 8000548:	429a      	cmp	r2, r3
 800054a:	d105      	bne.n	8000558 <HAL_GPIO_EXTI_Callback+0x24>
  {
	  HAL_UART_Transmit_IT(&huart2, (uint8_t*)aTxBuffer, TXBUFFERSIZE);
 800054c:	4904      	ldr	r1, [pc, #16]	; (8000560 <HAL_GPIO_EXTI_Callback+0x2c>)
 800054e:	4b05      	ldr	r3, [pc, #20]	; (8000564 <HAL_GPIO_EXTI_Callback+0x30>)
 8000550:	2202      	movs	r2, #2
 8000552:	0018      	movs	r0, r3
 8000554:	f001 fac6 	bl	8001ae4 <HAL_UART_Transmit_IT>
  }
}
 8000558:	46c0      	nop			; (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	b002      	add	sp, #8
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000000 	.word	0x20000000
 8000564:	20000034 	.word	0x20000034

08000568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	  /* Turn LED2 on */
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800056c:	2390      	movs	r3, #144	; 0x90
 800056e:	05db      	lsls	r3, r3, #23
 8000570:	2201      	movs	r2, #1
 8000572:	2120      	movs	r1, #32
 8000574:	0018      	movs	r0, r3
 8000576:	f000 fc0f 	bl	8000d98 <HAL_GPIO_WritePin>
	    while(1)
	  {
	    /* Error if LED2 is slowly blinking (1 sec. period) */
	    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800057a:	2390      	movs	r3, #144	; 0x90
 800057c:	05db      	lsls	r3, r3, #23
 800057e:	2120      	movs	r1, #32
 8000580:	0018      	movs	r0, r3
 8000582:	f000 fc26 	bl	8000dd2 <HAL_GPIO_TogglePin>
	    HAL_Delay(1000);
 8000586:	23fa      	movs	r3, #250	; 0xfa
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	0018      	movs	r0, r3
 800058c:	f000 f946 	bl	800081c <HAL_Delay>
	    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000590:	e7f3      	b.n	800057a <Error_Handler+0x12>
	...

08000594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800059a:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <HAL_MspInit+0x44>)
 800059c:	699a      	ldr	r2, [r3, #24]
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <HAL_MspInit+0x44>)
 80005a0:	2101      	movs	r1, #1
 80005a2:	430a      	orrs	r2, r1
 80005a4:	619a      	str	r2, [r3, #24]
 80005a6:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <HAL_MspInit+0x44>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	2201      	movs	r2, #1
 80005ac:	4013      	ands	r3, r2
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b2:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <HAL_MspInit+0x44>)
 80005b4:	69da      	ldr	r2, [r3, #28]
 80005b6:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <HAL_MspInit+0x44>)
 80005b8:	2180      	movs	r1, #128	; 0x80
 80005ba:	0549      	lsls	r1, r1, #21
 80005bc:	430a      	orrs	r2, r1
 80005be:	61da      	str	r2, [r3, #28]
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <HAL_MspInit+0x44>)
 80005c2:	69da      	ldr	r2, [r3, #28]
 80005c4:	2380      	movs	r3, #128	; 0x80
 80005c6:	055b      	lsls	r3, r3, #21
 80005c8:	4013      	ands	r3, r2
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	b002      	add	sp, #8
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	40021000 	.word	0x40021000

080005dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	2314      	movs	r3, #20
 80005e6:	18fb      	adds	r3, r7, r3
 80005e8:	0018      	movs	r0, r3
 80005ea:	2314      	movs	r3, #20
 80005ec:	001a      	movs	r2, r3
 80005ee:	2100      	movs	r1, #0
 80005f0:	f002 f9cc 	bl	800298c <memset>
  if(huart->Instance==USART2)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a20      	ldr	r2, [pc, #128]	; (800067c <HAL_UART_MspInit+0xa0>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d13a      	bne.n	8000674 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005fe:	4b20      	ldr	r3, [pc, #128]	; (8000680 <HAL_UART_MspInit+0xa4>)
 8000600:	69da      	ldr	r2, [r3, #28]
 8000602:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <HAL_UART_MspInit+0xa4>)
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	0289      	lsls	r1, r1, #10
 8000608:	430a      	orrs	r2, r1
 800060a:	61da      	str	r2, [r3, #28]
 800060c:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <HAL_UART_MspInit+0xa4>)
 800060e:	69da      	ldr	r2, [r3, #28]
 8000610:	2380      	movs	r3, #128	; 0x80
 8000612:	029b      	lsls	r3, r3, #10
 8000614:	4013      	ands	r3, r2
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b19      	ldr	r3, [pc, #100]	; (8000680 <HAL_UART_MspInit+0xa4>)
 800061c:	695a      	ldr	r2, [r3, #20]
 800061e:	4b18      	ldr	r3, [pc, #96]	; (8000680 <HAL_UART_MspInit+0xa4>)
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	0289      	lsls	r1, r1, #10
 8000624:	430a      	orrs	r2, r1
 8000626:	615a      	str	r2, [r3, #20]
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <HAL_UART_MspInit+0xa4>)
 800062a:	695a      	ldr	r2, [r3, #20]
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	029b      	lsls	r3, r3, #10
 8000630:	4013      	ands	r3, r2
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000636:	2114      	movs	r1, #20
 8000638:	187b      	adds	r3, r7, r1
 800063a:	220c      	movs	r2, #12
 800063c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2202      	movs	r2, #2
 8000642:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2203      	movs	r2, #3
 800064e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2201      	movs	r2, #1
 8000654:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000656:	187a      	adds	r2, r7, r1
 8000658:	2390      	movs	r3, #144	; 0x90
 800065a:	05db      	lsls	r3, r3, #23
 800065c:	0011      	movs	r1, r2
 800065e:	0018      	movs	r0, r3
 8000660:	f000 fa22 	bl	8000aa8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000664:	2200      	movs	r2, #0
 8000666:	2100      	movs	r1, #0
 8000668:	201c      	movs	r0, #28
 800066a:	f000 f9a5 	bl	80009b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800066e:	201c      	movs	r0, #28
 8000670:	f000 f9b7 	bl	80009e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000674:	46c0      	nop			; (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	b00a      	add	sp, #40	; 0x28
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40004400 	.word	0x40004400
 8000680:	40021000 	.word	0x40021000

08000684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000692:	e7fe      	b.n	8000692 <HardFault_Handler+0x4>

08000694 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000698:	46c0      	nop			; (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ac:	f000 f89a 	bl	80007e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80006ba:	2380      	movs	r3, #128	; 0x80
 80006bc:	019b      	lsls	r3, r3, #6
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 fba2 	bl	8000e08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <USART2_IRQHandler+0x20>)
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 fb2c 	bl	8001d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  HAL_UART_Receive_IT(&huart2, aRxBuffer, RXBUFFERSIZE);
 80006d8:	4905      	ldr	r1, [pc, #20]	; (80006f0 <USART2_IRQHandler+0x24>)
 80006da:	4b04      	ldr	r3, [pc, #16]	; (80006ec <USART2_IRQHandler+0x20>)
 80006dc:	2202      	movs	r2, #2
 80006de:	0018      	movs	r0, r3
 80006e0:	f001 fa6e 	bl	8001bc0 <HAL_UART_Receive_IT>
  //HAL_UART_Transmit_IT(&huart2, (uint8_t*)aTxBuffer, TXBUFFERSIZE);

  /* USER CODE END USART2_IRQn 1 */
}
 80006e4:	46c0      	nop			; (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	20000034 	.word	0x20000034
 80006f0:	20000030 	.word	0x20000030

080006f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000700:	480d      	ldr	r0, [pc, #52]	; (8000738 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000702:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000704:	480d      	ldr	r0, [pc, #52]	; (800073c <LoopForever+0x6>)
  ldr r1, =_edata
 8000706:	490e      	ldr	r1, [pc, #56]	; (8000740 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000708:	4a0e      	ldr	r2, [pc, #56]	; (8000744 <LoopForever+0xe>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800070c:	e002      	b.n	8000714 <LoopCopyDataInit>

0800070e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000712:	3304      	adds	r3, #4

08000714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000718:	d3f9      	bcc.n	800070e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071a:	4a0b      	ldr	r2, [pc, #44]	; (8000748 <LoopForever+0x12>)
  ldr r4, =_ebss
 800071c:	4c0b      	ldr	r4, [pc, #44]	; (800074c <LoopForever+0x16>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000720:	e001      	b.n	8000726 <LoopFillZerobss>

08000722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000724:	3204      	adds	r2, #4

08000726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000728:	d3fb      	bcc.n	8000722 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800072a:	f7ff ffe3 	bl	80006f4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800072e:	f002 f909 	bl	8002944 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000732:	f7ff fd75 	bl	8000220 <main>

08000736 <LoopForever>:

LoopForever:
    b LoopForever
 8000736:	e7fe      	b.n	8000736 <LoopForever>
  ldr   r0, =_estack
 8000738:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800073c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000740:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000744:	080029f4 	.word	0x080029f4
  ldr r2, =_sbss
 8000748:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800074c:	200000b8 	.word	0x200000b8

08000750 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000750:	e7fe      	b.n	8000750 <ADC1_COMP_IRQHandler>
	...

08000754 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <HAL_Init+0x24>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <HAL_Init+0x24>)
 800075e:	2110      	movs	r1, #16
 8000760:	430a      	orrs	r2, r1
 8000762:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000764:	2000      	movs	r0, #0
 8000766:	f000 f809 	bl	800077c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800076a:	f7ff ff13 	bl	8000594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800076e:	2300      	movs	r3, #0
}
 8000770:	0018      	movs	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	40022000 	.word	0x40022000

0800077c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <HAL_InitTick+0x5c>)
 8000786:	681c      	ldr	r4, [r3, #0]
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <HAL_InitTick+0x60>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	0019      	movs	r1, r3
 800078e:	23fa      	movs	r3, #250	; 0xfa
 8000790:	0098      	lsls	r0, r3, #2
 8000792:	f7ff fcb9 	bl	8000108 <__udivsi3>
 8000796:	0003      	movs	r3, r0
 8000798:	0019      	movs	r1, r3
 800079a:	0020      	movs	r0, r4
 800079c:	f7ff fcb4 	bl	8000108 <__udivsi3>
 80007a0:	0003      	movs	r3, r0
 80007a2:	0018      	movs	r0, r3
 80007a4:	f000 f92d 	bl	8000a02 <HAL_SYSTICK_Config>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007ac:	2301      	movs	r3, #1
 80007ae:	e00f      	b.n	80007d0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b03      	cmp	r3, #3
 80007b4:	d80b      	bhi.n	80007ce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b6:	6879      	ldr	r1, [r7, #4]
 80007b8:	2301      	movs	r3, #1
 80007ba:	425b      	negs	r3, r3
 80007bc:	2200      	movs	r2, #0
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 f8fa 	bl	80009b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <HAL_InitTick+0x64>)
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007ca:	2300      	movs	r3, #0
 80007cc:	e000      	b.n	80007d0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
}
 80007d0:	0018      	movs	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	b003      	add	sp, #12
 80007d6:	bd90      	pop	{r4, r7, pc}
 80007d8:	20000004 	.word	0x20000004
 80007dc:	2000000c 	.word	0x2000000c
 80007e0:	20000008 	.word	0x20000008

080007e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <HAL_IncTick+0x1c>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	001a      	movs	r2, r3
 80007ee:	4b05      	ldr	r3, [pc, #20]	; (8000804 <HAL_IncTick+0x20>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	18d2      	adds	r2, r2, r3
 80007f4:	4b03      	ldr	r3, [pc, #12]	; (8000804 <HAL_IncTick+0x20>)
 80007f6:	601a      	str	r2, [r3, #0]
}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	2000000c 	.word	0x2000000c
 8000804:	200000b4 	.word	0x200000b4

08000808 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  return uwTick;
 800080c:	4b02      	ldr	r3, [pc, #8]	; (8000818 <HAL_GetTick+0x10>)
 800080e:	681b      	ldr	r3, [r3, #0]
}
 8000810:	0018      	movs	r0, r3
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	200000b4 	.word	0x200000b4

0800081c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000824:	f7ff fff0 	bl	8000808 <HAL_GetTick>
 8000828:	0003      	movs	r3, r0
 800082a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	3301      	adds	r3, #1
 8000834:	d005      	beq.n	8000842 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <HAL_Delay+0x40>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	001a      	movs	r2, r3
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	189b      	adds	r3, r3, r2
 8000840:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	f7ff ffe0 	bl	8000808 <HAL_GetTick>
 8000848:	0002      	movs	r2, r0
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	429a      	cmp	r2, r3
 8000852:	d8f7      	bhi.n	8000844 <HAL_Delay+0x28>
  {
  }
}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	b004      	add	sp, #16
 800085a:	bd80      	pop	{r7, pc}
 800085c:	2000000c 	.word	0x2000000c

08000860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	0002      	movs	r2, r0
 8000868:	1dfb      	adds	r3, r7, #7
 800086a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800086c:	1dfb      	adds	r3, r7, #7
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b7f      	cmp	r3, #127	; 0x7f
 8000872:	d809      	bhi.n	8000888 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000874:	1dfb      	adds	r3, r7, #7
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	001a      	movs	r2, r3
 800087a:	231f      	movs	r3, #31
 800087c:	401a      	ands	r2, r3
 800087e:	4b04      	ldr	r3, [pc, #16]	; (8000890 <__NVIC_EnableIRQ+0x30>)
 8000880:	2101      	movs	r1, #1
 8000882:	4091      	lsls	r1, r2
 8000884:	000a      	movs	r2, r1
 8000886:	601a      	str	r2, [r3, #0]
  }
}
 8000888:	46c0      	nop			; (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	b002      	add	sp, #8
 800088e:	bd80      	pop	{r7, pc}
 8000890:	e000e100 	.word	0xe000e100

08000894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	0002      	movs	r2, r0
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	1dfb      	adds	r3, r7, #7
 80008a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b7f      	cmp	r3, #127	; 0x7f
 80008a8:	d828      	bhi.n	80008fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008aa:	4a2f      	ldr	r2, [pc, #188]	; (8000968 <__NVIC_SetPriority+0xd4>)
 80008ac:	1dfb      	adds	r3, r7, #7
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	b25b      	sxtb	r3, r3
 80008b2:	089b      	lsrs	r3, r3, #2
 80008b4:	33c0      	adds	r3, #192	; 0xc0
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	589b      	ldr	r3, [r3, r2]
 80008ba:	1dfa      	adds	r2, r7, #7
 80008bc:	7812      	ldrb	r2, [r2, #0]
 80008be:	0011      	movs	r1, r2
 80008c0:	2203      	movs	r2, #3
 80008c2:	400a      	ands	r2, r1
 80008c4:	00d2      	lsls	r2, r2, #3
 80008c6:	21ff      	movs	r1, #255	; 0xff
 80008c8:	4091      	lsls	r1, r2
 80008ca:	000a      	movs	r2, r1
 80008cc:	43d2      	mvns	r2, r2
 80008ce:	401a      	ands	r2, r3
 80008d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	019b      	lsls	r3, r3, #6
 80008d6:	22ff      	movs	r2, #255	; 0xff
 80008d8:	401a      	ands	r2, r3
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	0018      	movs	r0, r3
 80008e0:	2303      	movs	r3, #3
 80008e2:	4003      	ands	r3, r0
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e8:	481f      	ldr	r0, [pc, #124]	; (8000968 <__NVIC_SetPriority+0xd4>)
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	089b      	lsrs	r3, r3, #2
 80008f2:	430a      	orrs	r2, r1
 80008f4:	33c0      	adds	r3, #192	; 0xc0
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008fa:	e031      	b.n	8000960 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008fc:	4a1b      	ldr	r2, [pc, #108]	; (800096c <__NVIC_SetPriority+0xd8>)
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	0019      	movs	r1, r3
 8000904:	230f      	movs	r3, #15
 8000906:	400b      	ands	r3, r1
 8000908:	3b08      	subs	r3, #8
 800090a:	089b      	lsrs	r3, r3, #2
 800090c:	3306      	adds	r3, #6
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	18d3      	adds	r3, r2, r3
 8000912:	3304      	adds	r3, #4
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	1dfa      	adds	r2, r7, #7
 8000918:	7812      	ldrb	r2, [r2, #0]
 800091a:	0011      	movs	r1, r2
 800091c:	2203      	movs	r2, #3
 800091e:	400a      	ands	r2, r1
 8000920:	00d2      	lsls	r2, r2, #3
 8000922:	21ff      	movs	r1, #255	; 0xff
 8000924:	4091      	lsls	r1, r2
 8000926:	000a      	movs	r2, r1
 8000928:	43d2      	mvns	r2, r2
 800092a:	401a      	ands	r2, r3
 800092c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	019b      	lsls	r3, r3, #6
 8000932:	22ff      	movs	r2, #255	; 0xff
 8000934:	401a      	ands	r2, r3
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	0018      	movs	r0, r3
 800093c:	2303      	movs	r3, #3
 800093e:	4003      	ands	r3, r0
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000944:	4809      	ldr	r0, [pc, #36]	; (800096c <__NVIC_SetPriority+0xd8>)
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	001c      	movs	r4, r3
 800094c:	230f      	movs	r3, #15
 800094e:	4023      	ands	r3, r4
 8000950:	3b08      	subs	r3, #8
 8000952:	089b      	lsrs	r3, r3, #2
 8000954:	430a      	orrs	r2, r1
 8000956:	3306      	adds	r3, #6
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	18c3      	adds	r3, r0, r3
 800095c:	3304      	adds	r3, #4
 800095e:	601a      	str	r2, [r3, #0]
}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	b003      	add	sp, #12
 8000966:	bd90      	pop	{r4, r7, pc}
 8000968:	e000e100 	.word	0xe000e100
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3b01      	subs	r3, #1
 800097c:	4a0c      	ldr	r2, [pc, #48]	; (80009b0 <SysTick_Config+0x40>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d901      	bls.n	8000986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000982:	2301      	movs	r3, #1
 8000984:	e010      	b.n	80009a8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <SysTick_Config+0x44>)
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	3a01      	subs	r2, #1
 800098c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800098e:	2301      	movs	r3, #1
 8000990:	425b      	negs	r3, r3
 8000992:	2103      	movs	r1, #3
 8000994:	0018      	movs	r0, r3
 8000996:	f7ff ff7d 	bl	8000894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <SysTick_Config+0x44>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009a0:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <SysTick_Config+0x44>)
 80009a2:	2207      	movs	r2, #7
 80009a4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	0018      	movs	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b002      	add	sp, #8
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	00ffffff 	.word	0x00ffffff
 80009b4:	e000e010 	.word	0xe000e010

080009b8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
 80009c2:	210f      	movs	r1, #15
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	1c02      	adds	r2, r0, #0
 80009c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b25b      	sxtb	r3, r3
 80009d2:	0011      	movs	r1, r2
 80009d4:	0018      	movs	r0, r3
 80009d6:	f7ff ff5d 	bl	8000894 <__NVIC_SetPriority>
}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	b004      	add	sp, #16
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	0002      	movs	r2, r0
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b25b      	sxtb	r3, r3
 80009f4:	0018      	movs	r0, r3
 80009f6:	f7ff ff33 	bl	8000860 <__NVIC_EnableIRQ>
}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b002      	add	sp, #8
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f7ff ffaf 	bl	8000970 <SysTick_Config>
 8000a12:	0003      	movs	r3, r0
}
 8000a14:	0018      	movs	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b002      	add	sp, #8
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a24:	230f      	movs	r3, #15
 8000a26:	18fb      	adds	r3, r7, r3
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2221      	movs	r2, #33	; 0x21
 8000a30:	5c9b      	ldrb	r3, [r3, r2]
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d007      	beq.n	8000a48 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2204      	movs	r2, #4
 8000a3c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a3e:	230f      	movs	r3, #15
 8000a40:	18fb      	adds	r3, r7, r3
 8000a42:	2201      	movs	r2, #1
 8000a44:	701a      	strb	r2, [r3, #0]
 8000a46:	e028      	b.n	8000a9a <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	210e      	movs	r1, #14
 8000a54:	438a      	bics	r2, r1
 8000a56:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2101      	movs	r1, #1
 8000a64:	438a      	bics	r2, r1
 8000a66:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a70:	2101      	movs	r1, #1
 8000a72:	4091      	lsls	r1, r2
 8000a74:	000a      	movs	r2, r1
 8000a76:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2221      	movs	r2, #33	; 0x21
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2220      	movs	r2, #32
 8000a84:	2100      	movs	r1, #0
 8000a86:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d004      	beq.n	8000a9a <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	0010      	movs	r0, r2
 8000a98:	4798      	blx	r3
    } 
  }
  return status;
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	18fb      	adds	r3, r7, r3
 8000a9e:	781b      	ldrb	r3, [r3, #0]
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b004      	add	sp, #16
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab6:	e155      	b.n	8000d64 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2101      	movs	r1, #1
 8000abe:	697a      	ldr	r2, [r7, #20]
 8000ac0:	4091      	lsls	r1, r2
 8000ac2:	000a      	movs	r2, r1
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d100      	bne.n	8000ad0 <HAL_GPIO_Init+0x28>
 8000ace:	e146      	b.n	8000d5e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d00b      	beq.n	8000af0 <HAL_GPIO_Init+0x48>
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d007      	beq.n	8000af0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ae4:	2b11      	cmp	r3, #17
 8000ae6:	d003      	beq.n	8000af0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	2b12      	cmp	r3, #18
 8000aee:	d130      	bne.n	8000b52 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	2203      	movs	r2, #3
 8000afc:	409a      	lsls	r2, r3
 8000afe:	0013      	movs	r3, r2
 8000b00:	43da      	mvns	r2, r3
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	4013      	ands	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	68da      	ldr	r2, [r3, #12]
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	409a      	lsls	r2, r3
 8000b12:	0013      	movs	r3, r2
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b26:	2201      	movs	r2, #1
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	409a      	lsls	r2, r3
 8000b2c:	0013      	movs	r3, r2
 8000b2e:	43da      	mvns	r2, r3
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	4013      	ands	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	091b      	lsrs	r3, r3, #4
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	401a      	ands	r2, r3
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	409a      	lsls	r2, r3
 8000b44:	0013      	movs	r3, r2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	409a      	lsls	r2, r3
 8000b60:	0013      	movs	r3, r2
 8000b62:	43da      	mvns	r2, r3
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	4013      	ands	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	689a      	ldr	r2, [r3, #8]
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	409a      	lsls	r2, r3
 8000b74:	0013      	movs	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d003      	beq.n	8000b92 <HAL_GPIO_Init+0xea>
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	2b12      	cmp	r3, #18
 8000b90:	d123      	bne.n	8000bda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	08da      	lsrs	r2, r3, #3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3208      	adds	r2, #8
 8000b9a:	0092      	lsls	r2, r2, #2
 8000b9c:	58d3      	ldr	r3, [r2, r3]
 8000b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	2207      	movs	r2, #7
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	220f      	movs	r2, #15
 8000baa:	409a      	lsls	r2, r3
 8000bac:	0013      	movs	r3, r2
 8000bae:	43da      	mvns	r2, r3
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	691a      	ldr	r2, [r3, #16]
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	2107      	movs	r1, #7
 8000bbe:	400b      	ands	r3, r1
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	409a      	lsls	r2, r3
 8000bc4:	0013      	movs	r3, r2
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	08da      	lsrs	r2, r3, #3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3208      	adds	r2, #8
 8000bd4:	0092      	lsls	r2, r2, #2
 8000bd6:	6939      	ldr	r1, [r7, #16]
 8000bd8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	2203      	movs	r2, #3
 8000be6:	409a      	lsls	r2, r3
 8000be8:	0013      	movs	r3, r2
 8000bea:	43da      	mvns	r2, r3
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	401a      	ands	r2, r3
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	409a      	lsls	r2, r3
 8000c00:	0013      	movs	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685a      	ldr	r2, [r3, #4]
 8000c12:	2380      	movs	r3, #128	; 0x80
 8000c14:	055b      	lsls	r3, r3, #21
 8000c16:	4013      	ands	r3, r2
 8000c18:	d100      	bne.n	8000c1c <HAL_GPIO_Init+0x174>
 8000c1a:	e0a0      	b.n	8000d5e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1c:	4b57      	ldr	r3, [pc, #348]	; (8000d7c <HAL_GPIO_Init+0x2d4>)
 8000c1e:	699a      	ldr	r2, [r3, #24]
 8000c20:	4b56      	ldr	r3, [pc, #344]	; (8000d7c <HAL_GPIO_Init+0x2d4>)
 8000c22:	2101      	movs	r1, #1
 8000c24:	430a      	orrs	r2, r1
 8000c26:	619a      	str	r2, [r3, #24]
 8000c28:	4b54      	ldr	r3, [pc, #336]	; (8000d7c <HAL_GPIO_Init+0x2d4>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	4013      	ands	r3, r2
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c34:	4a52      	ldr	r2, [pc, #328]	; (8000d80 <HAL_GPIO_Init+0x2d8>)
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	089b      	lsrs	r3, r3, #2
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	589b      	ldr	r3, [r3, r2]
 8000c40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	2203      	movs	r2, #3
 8000c46:	4013      	ands	r3, r2
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	220f      	movs	r2, #15
 8000c4c:	409a      	lsls	r2, r3
 8000c4e:	0013      	movs	r3, r2
 8000c50:	43da      	mvns	r2, r3
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	2390      	movs	r3, #144	; 0x90
 8000c5c:	05db      	lsls	r3, r3, #23
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d019      	beq.n	8000c96 <HAL_GPIO_Init+0x1ee>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a47      	ldr	r2, [pc, #284]	; (8000d84 <HAL_GPIO_Init+0x2dc>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d013      	beq.n	8000c92 <HAL_GPIO_Init+0x1ea>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a46      	ldr	r2, [pc, #280]	; (8000d88 <HAL_GPIO_Init+0x2e0>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d00d      	beq.n	8000c8e <HAL_GPIO_Init+0x1e6>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a45      	ldr	r2, [pc, #276]	; (8000d8c <HAL_GPIO_Init+0x2e4>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d007      	beq.n	8000c8a <HAL_GPIO_Init+0x1e2>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a44      	ldr	r2, [pc, #272]	; (8000d90 <HAL_GPIO_Init+0x2e8>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d101      	bne.n	8000c86 <HAL_GPIO_Init+0x1de>
 8000c82:	2304      	movs	r3, #4
 8000c84:	e008      	b.n	8000c98 <HAL_GPIO_Init+0x1f0>
 8000c86:	2305      	movs	r3, #5
 8000c88:	e006      	b.n	8000c98 <HAL_GPIO_Init+0x1f0>
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e004      	b.n	8000c98 <HAL_GPIO_Init+0x1f0>
 8000c8e:	2302      	movs	r3, #2
 8000c90:	e002      	b.n	8000c98 <HAL_GPIO_Init+0x1f0>
 8000c92:	2301      	movs	r3, #1
 8000c94:	e000      	b.n	8000c98 <HAL_GPIO_Init+0x1f0>
 8000c96:	2300      	movs	r3, #0
 8000c98:	697a      	ldr	r2, [r7, #20]
 8000c9a:	2103      	movs	r1, #3
 8000c9c:	400a      	ands	r2, r1
 8000c9e:	0092      	lsls	r2, r2, #2
 8000ca0:	4093      	lsls	r3, r2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ca8:	4935      	ldr	r1, [pc, #212]	; (8000d80 <HAL_GPIO_Init+0x2d8>)
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	089b      	lsrs	r3, r3, #2
 8000cae:	3302      	adds	r3, #2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cb6:	4b37      	ldr	r3, [pc, #220]	; (8000d94 <HAL_GPIO_Init+0x2ec>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	43da      	mvns	r2, r3
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	025b      	lsls	r3, r3, #9
 8000cce:	4013      	ands	r3, r2
 8000cd0:	d003      	beq.n	8000cda <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cda:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <HAL_GPIO_Init+0x2ec>)
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ce0:	4b2c      	ldr	r3, [pc, #176]	; (8000d94 <HAL_GPIO_Init+0x2ec>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	43da      	mvns	r2, r3
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685a      	ldr	r2, [r3, #4]
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	029b      	lsls	r3, r3, #10
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	d003      	beq.n	8000d04 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d04:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <HAL_GPIO_Init+0x2ec>)
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d0a:	4b22      	ldr	r3, [pc, #136]	; (8000d94 <HAL_GPIO_Init+0x2ec>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	43da      	mvns	r2, r3
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685a      	ldr	r2, [r3, #4]
 8000d1e:	2380      	movs	r3, #128	; 0x80
 8000d20:	035b      	lsls	r3, r3, #13
 8000d22:	4013      	ands	r3, r2
 8000d24:	d003      	beq.n	8000d2e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d2e:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <HAL_GPIO_Init+0x2ec>)
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d34:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <HAL_GPIO_Init+0x2ec>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	43da      	mvns	r2, r3
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685a      	ldr	r2, [r3, #4]
 8000d48:	2380      	movs	r3, #128	; 0x80
 8000d4a:	039b      	lsls	r3, r3, #14
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	d003      	beq.n	8000d58 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <HAL_GPIO_Init+0x2ec>)
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	40da      	lsrs	r2, r3
 8000d6c:	1e13      	subs	r3, r2, #0
 8000d6e:	d000      	beq.n	8000d72 <HAL_GPIO_Init+0x2ca>
 8000d70:	e6a2      	b.n	8000ab8 <HAL_GPIO_Init+0x10>
  } 
}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b006      	add	sp, #24
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40010000 	.word	0x40010000
 8000d84:	48000400 	.word	0x48000400
 8000d88:	48000800 	.word	0x48000800
 8000d8c:	48000c00 	.word	0x48000c00
 8000d90:	48001000 	.word	0x48001000
 8000d94:	40010400 	.word	0x40010400

08000d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	0008      	movs	r0, r1
 8000da2:	0011      	movs	r1, r2
 8000da4:	1cbb      	adds	r3, r7, #2
 8000da6:	1c02      	adds	r2, r0, #0
 8000da8:	801a      	strh	r2, [r3, #0]
 8000daa:	1c7b      	adds	r3, r7, #1
 8000dac:	1c0a      	adds	r2, r1, #0
 8000dae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000db0:	1c7b      	adds	r3, r7, #1
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d004      	beq.n	8000dc2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000db8:	1cbb      	adds	r3, r7, #2
 8000dba:	881a      	ldrh	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dc0:	e003      	b.n	8000dca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dc2:	1cbb      	adds	r3, r7, #2
 8000dc4:	881a      	ldrh	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b002      	add	sp, #8
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b084      	sub	sp, #16
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	000a      	movs	r2, r1
 8000ddc:	1cbb      	adds	r3, r7, #2
 8000dde:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	695b      	ldr	r3, [r3, #20]
 8000de4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000de6:	1cbb      	adds	r3, r7, #2
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	4013      	ands	r3, r2
 8000dee:	041a      	lsls	r2, r3, #16
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	43db      	mvns	r3, r3
 8000df4:	1cb9      	adds	r1, r7, #2
 8000df6:	8809      	ldrh	r1, [r1, #0]
 8000df8:	400b      	ands	r3, r1
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	619a      	str	r2, [r3, #24]
}
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b004      	add	sp, #16
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	0002      	movs	r2, r0
 8000e10:	1dbb      	adds	r3, r7, #6
 8000e12:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	1dba      	adds	r2, r7, #6
 8000e1a:	8812      	ldrh	r2, [r2, #0]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	d008      	beq.n	8000e32 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000e22:	1dba      	adds	r2, r7, #6
 8000e24:	8812      	ldrh	r2, [r2, #0]
 8000e26:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e28:	1dbb      	adds	r3, r7, #6
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f7ff fb81 	bl	8000534 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b002      	add	sp, #8
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	40010400 	.word	0x40010400

08000e40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d102      	bne.n	8000e54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	f000 fb76 	bl	8001540 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2201      	movs	r2, #1
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	d100      	bne.n	8000e60 <HAL_RCC_OscConfig+0x20>
 8000e5e:	e08e      	b.n	8000f7e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e60:	4bc5      	ldr	r3, [pc, #788]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	220c      	movs	r2, #12
 8000e66:	4013      	ands	r3, r2
 8000e68:	2b04      	cmp	r3, #4
 8000e6a:	d00e      	beq.n	8000e8a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e6c:	4bc2      	ldr	r3, [pc, #776]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	220c      	movs	r2, #12
 8000e72:	4013      	ands	r3, r2
 8000e74:	2b08      	cmp	r3, #8
 8000e76:	d117      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x68>
 8000e78:	4bbf      	ldr	r3, [pc, #764]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000e7a:	685a      	ldr	r2, [r3, #4]
 8000e7c:	23c0      	movs	r3, #192	; 0xc0
 8000e7e:	025b      	lsls	r3, r3, #9
 8000e80:	401a      	ands	r2, r3
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	025b      	lsls	r3, r3, #9
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d10e      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e8a:	4bbb      	ldr	r3, [pc, #748]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	2380      	movs	r3, #128	; 0x80
 8000e90:	029b      	lsls	r3, r3, #10
 8000e92:	4013      	ands	r3, r2
 8000e94:	d100      	bne.n	8000e98 <HAL_RCC_OscConfig+0x58>
 8000e96:	e071      	b.n	8000f7c <HAL_RCC_OscConfig+0x13c>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d000      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x62>
 8000ea0:	e06c      	b.n	8000f7c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	f000 fb4c 	bl	8001540 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d107      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x80>
 8000eb0:	4bb1      	ldr	r3, [pc, #708]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4bb0      	ldr	r3, [pc, #704]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000eb6:	2180      	movs	r1, #128	; 0x80
 8000eb8:	0249      	lsls	r1, r1, #9
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	e02f      	b.n	8000f20 <HAL_RCC_OscConfig+0xe0>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d10c      	bne.n	8000ee2 <HAL_RCC_OscConfig+0xa2>
 8000ec8:	4bab      	ldr	r3, [pc, #684]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4baa      	ldr	r3, [pc, #680]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000ece:	49ab      	ldr	r1, [pc, #684]	; (800117c <HAL_RCC_OscConfig+0x33c>)
 8000ed0:	400a      	ands	r2, r1
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	4ba8      	ldr	r3, [pc, #672]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4ba7      	ldr	r3, [pc, #668]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000eda:	49a9      	ldr	r1, [pc, #676]	; (8001180 <HAL_RCC_OscConfig+0x340>)
 8000edc:	400a      	ands	r2, r1
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	e01e      	b.n	8000f20 <HAL_RCC_OscConfig+0xe0>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2b05      	cmp	r3, #5
 8000ee8:	d10e      	bne.n	8000f08 <HAL_RCC_OscConfig+0xc8>
 8000eea:	4ba3      	ldr	r3, [pc, #652]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	4ba2      	ldr	r3, [pc, #648]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000ef0:	2180      	movs	r1, #128	; 0x80
 8000ef2:	02c9      	lsls	r1, r1, #11
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	4b9f      	ldr	r3, [pc, #636]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b9e      	ldr	r3, [pc, #632]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000efe:	2180      	movs	r1, #128	; 0x80
 8000f00:	0249      	lsls	r1, r1, #9
 8000f02:	430a      	orrs	r2, r1
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	e00b      	b.n	8000f20 <HAL_RCC_OscConfig+0xe0>
 8000f08:	4b9b      	ldr	r3, [pc, #620]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b9a      	ldr	r3, [pc, #616]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000f0e:	499b      	ldr	r1, [pc, #620]	; (800117c <HAL_RCC_OscConfig+0x33c>)
 8000f10:	400a      	ands	r2, r1
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	4b98      	ldr	r3, [pc, #608]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b97      	ldr	r3, [pc, #604]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000f1a:	4999      	ldr	r1, [pc, #612]	; (8001180 <HAL_RCC_OscConfig+0x340>)
 8000f1c:	400a      	ands	r2, r1
 8000f1e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d014      	beq.n	8000f52 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f28:	f7ff fc6e 	bl	8000808 <HAL_GetTick>
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f30:	e008      	b.n	8000f44 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f32:	f7ff fc69 	bl	8000808 <HAL_GetTick>
 8000f36:	0002      	movs	r2, r0
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2b64      	cmp	r3, #100	; 0x64
 8000f3e:	d901      	bls.n	8000f44 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e2fd      	b.n	8001540 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f44:	4b8c      	ldr	r3, [pc, #560]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	029b      	lsls	r3, r3, #10
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	d0f0      	beq.n	8000f32 <HAL_RCC_OscConfig+0xf2>
 8000f50:	e015      	b.n	8000f7e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f52:	f7ff fc59 	bl	8000808 <HAL_GetTick>
 8000f56:	0003      	movs	r3, r0
 8000f58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f5a:	e008      	b.n	8000f6e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f5c:	f7ff fc54 	bl	8000808 <HAL_GetTick>
 8000f60:	0002      	movs	r2, r0
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b64      	cmp	r3, #100	; 0x64
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e2e8      	b.n	8001540 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f6e:	4b82      	ldr	r3, [pc, #520]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	2380      	movs	r3, #128	; 0x80
 8000f74:	029b      	lsls	r3, r3, #10
 8000f76:	4013      	ands	r3, r2
 8000f78:	d1f0      	bne.n	8000f5c <HAL_RCC_OscConfig+0x11c>
 8000f7a:	e000      	b.n	8000f7e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f7c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2202      	movs	r2, #2
 8000f84:	4013      	ands	r3, r2
 8000f86:	d100      	bne.n	8000f8a <HAL_RCC_OscConfig+0x14a>
 8000f88:	e06c      	b.n	8001064 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f8a:	4b7b      	ldr	r3, [pc, #492]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	220c      	movs	r2, #12
 8000f90:	4013      	ands	r3, r2
 8000f92:	d00e      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f94:	4b78      	ldr	r3, [pc, #480]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	220c      	movs	r2, #12
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	2b08      	cmp	r3, #8
 8000f9e:	d11f      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x1a0>
 8000fa0:	4b75      	ldr	r3, [pc, #468]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	23c0      	movs	r3, #192	; 0xc0
 8000fa6:	025b      	lsls	r3, r3, #9
 8000fa8:	401a      	ands	r2, r3
 8000faa:	2380      	movs	r3, #128	; 0x80
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d116      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fb2:	4b71      	ldr	r3, [pc, #452]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	4013      	ands	r3, r2
 8000fba:	d005      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x188>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d001      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e2bb      	b.n	8001540 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc8:	4b6b      	ldr	r3, [pc, #428]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	22f8      	movs	r2, #248	; 0xf8
 8000fce:	4393      	bics	r3, r2
 8000fd0:	0019      	movs	r1, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	00da      	lsls	r2, r3, #3
 8000fd8:	4b67      	ldr	r3, [pc, #412]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fde:	e041      	b.n	8001064 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d024      	beq.n	8001032 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fe8:	4b63      	ldr	r3, [pc, #396]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b62      	ldr	r3, [pc, #392]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8000fee:	2101      	movs	r1, #1
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fc08 	bl	8000808 <HAL_GetTick>
 8000ff8:	0003      	movs	r3, r0
 8000ffa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ffc:	e008      	b.n	8001010 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ffe:	f7ff fc03 	bl	8000808 <HAL_GetTick>
 8001002:	0002      	movs	r2, r0
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e297      	b.n	8001540 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001010:	4b59      	ldr	r3, [pc, #356]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2202      	movs	r2, #2
 8001016:	4013      	ands	r3, r2
 8001018:	d0f1      	beq.n	8000ffe <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800101a:	4b57      	ldr	r3, [pc, #348]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	22f8      	movs	r2, #248	; 0xf8
 8001020:	4393      	bics	r3, r2
 8001022:	0019      	movs	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	00da      	lsls	r2, r3, #3
 800102a:	4b53      	ldr	r3, [pc, #332]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 800102c:	430a      	orrs	r2, r1
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	e018      	b.n	8001064 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001032:	4b51      	ldr	r3, [pc, #324]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	4b50      	ldr	r3, [pc, #320]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8001038:	2101      	movs	r1, #1
 800103a:	438a      	bics	r2, r1
 800103c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103e:	f7ff fbe3 	bl	8000808 <HAL_GetTick>
 8001042:	0003      	movs	r3, r0
 8001044:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001048:	f7ff fbde 	bl	8000808 <HAL_GetTick>
 800104c:	0002      	movs	r2, r0
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e272      	b.n	8001540 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800105a:	4b47      	ldr	r3, [pc, #284]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2202      	movs	r2, #2
 8001060:	4013      	ands	r3, r2
 8001062:	d1f1      	bne.n	8001048 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2208      	movs	r2, #8
 800106a:	4013      	ands	r3, r2
 800106c:	d036      	beq.n	80010dc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d019      	beq.n	80010aa <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001076:	4b40      	ldr	r3, [pc, #256]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8001078:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800107a:	4b3f      	ldr	r3, [pc, #252]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 800107c:	2101      	movs	r1, #1
 800107e:	430a      	orrs	r2, r1
 8001080:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001082:	f7ff fbc1 	bl	8000808 <HAL_GetTick>
 8001086:	0003      	movs	r3, r0
 8001088:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800108a:	e008      	b.n	800109e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800108c:	f7ff fbbc 	bl	8000808 <HAL_GetTick>
 8001090:	0002      	movs	r2, r0
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d901      	bls.n	800109e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e250      	b.n	8001540 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800109e:	4b36      	ldr	r3, [pc, #216]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a2:	2202      	movs	r2, #2
 80010a4:	4013      	ands	r3, r2
 80010a6:	d0f1      	beq.n	800108c <HAL_RCC_OscConfig+0x24c>
 80010a8:	e018      	b.n	80010dc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010aa:	4b33      	ldr	r3, [pc, #204]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 80010ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010ae:	4b32      	ldr	r3, [pc, #200]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 80010b0:	2101      	movs	r1, #1
 80010b2:	438a      	bics	r2, r1
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b6:	f7ff fba7 	bl	8000808 <HAL_GetTick>
 80010ba:	0003      	movs	r3, r0
 80010bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010be:	e008      	b.n	80010d2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010c0:	f7ff fba2 	bl	8000808 <HAL_GetTick>
 80010c4:	0002      	movs	r2, r0
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e236      	b.n	8001540 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010d2:	4b29      	ldr	r3, [pc, #164]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 80010d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d6:	2202      	movs	r2, #2
 80010d8:	4013      	ands	r3, r2
 80010da:	d1f1      	bne.n	80010c0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2204      	movs	r2, #4
 80010e2:	4013      	ands	r3, r2
 80010e4:	d100      	bne.n	80010e8 <HAL_RCC_OscConfig+0x2a8>
 80010e6:	e0b5      	b.n	8001254 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010e8:	231f      	movs	r3, #31
 80010ea:	18fb      	adds	r3, r7, r3
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010f0:	4b21      	ldr	r3, [pc, #132]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 80010f2:	69da      	ldr	r2, [r3, #28]
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	055b      	lsls	r3, r3, #21
 80010f8:	4013      	ands	r3, r2
 80010fa:	d111      	bne.n	8001120 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010fc:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 80010fe:	69da      	ldr	r2, [r3, #28]
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8001102:	2180      	movs	r1, #128	; 0x80
 8001104:	0549      	lsls	r1, r1, #21
 8001106:	430a      	orrs	r2, r1
 8001108:	61da      	str	r2, [r3, #28]
 800110a:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 800110c:	69da      	ldr	r2, [r3, #28]
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	055b      	lsls	r3, r3, #21
 8001112:	4013      	ands	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001118:	231f      	movs	r3, #31
 800111a:	18fb      	adds	r3, r7, r3
 800111c:	2201      	movs	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001120:	4b18      	ldr	r3, [pc, #96]	; (8001184 <HAL_RCC_OscConfig+0x344>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4013      	ands	r3, r2
 800112a:	d11a      	bne.n	8001162 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800112c:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_RCC_OscConfig+0x344>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <HAL_RCC_OscConfig+0x344>)
 8001132:	2180      	movs	r1, #128	; 0x80
 8001134:	0049      	lsls	r1, r1, #1
 8001136:	430a      	orrs	r2, r1
 8001138:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800113a:	f7ff fb65 	bl	8000808 <HAL_GetTick>
 800113e:	0003      	movs	r3, r0
 8001140:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001144:	f7ff fb60 	bl	8000808 <HAL_GetTick>
 8001148:	0002      	movs	r2, r0
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b64      	cmp	r3, #100	; 0x64
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e1f4      	b.n	8001540 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_RCC_OscConfig+0x344>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	2380      	movs	r3, #128	; 0x80
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4013      	ands	r3, r2
 8001160:	d0f0      	beq.n	8001144 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d10e      	bne.n	8001188 <HAL_RCC_OscConfig+0x348>
 800116a:	4b03      	ldr	r3, [pc, #12]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 800116c:	6a1a      	ldr	r2, [r3, #32]
 800116e:	4b02      	ldr	r3, [pc, #8]	; (8001178 <HAL_RCC_OscConfig+0x338>)
 8001170:	2101      	movs	r1, #1
 8001172:	430a      	orrs	r2, r1
 8001174:	621a      	str	r2, [r3, #32]
 8001176:	e035      	b.n	80011e4 <HAL_RCC_OscConfig+0x3a4>
 8001178:	40021000 	.word	0x40021000
 800117c:	fffeffff 	.word	0xfffeffff
 8001180:	fffbffff 	.word	0xfffbffff
 8001184:	40007000 	.word	0x40007000
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d10c      	bne.n	80011aa <HAL_RCC_OscConfig+0x36a>
 8001190:	4bca      	ldr	r3, [pc, #808]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 8001192:	6a1a      	ldr	r2, [r3, #32]
 8001194:	4bc9      	ldr	r3, [pc, #804]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 8001196:	2101      	movs	r1, #1
 8001198:	438a      	bics	r2, r1
 800119a:	621a      	str	r2, [r3, #32]
 800119c:	4bc7      	ldr	r3, [pc, #796]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 800119e:	6a1a      	ldr	r2, [r3, #32]
 80011a0:	4bc6      	ldr	r3, [pc, #792]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 80011a2:	2104      	movs	r1, #4
 80011a4:	438a      	bics	r2, r1
 80011a6:	621a      	str	r2, [r3, #32]
 80011a8:	e01c      	b.n	80011e4 <HAL_RCC_OscConfig+0x3a4>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	2b05      	cmp	r3, #5
 80011b0:	d10c      	bne.n	80011cc <HAL_RCC_OscConfig+0x38c>
 80011b2:	4bc2      	ldr	r3, [pc, #776]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 80011b4:	6a1a      	ldr	r2, [r3, #32]
 80011b6:	4bc1      	ldr	r3, [pc, #772]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 80011b8:	2104      	movs	r1, #4
 80011ba:	430a      	orrs	r2, r1
 80011bc:	621a      	str	r2, [r3, #32]
 80011be:	4bbf      	ldr	r3, [pc, #764]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 80011c0:	6a1a      	ldr	r2, [r3, #32]
 80011c2:	4bbe      	ldr	r3, [pc, #760]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 80011c4:	2101      	movs	r1, #1
 80011c6:	430a      	orrs	r2, r1
 80011c8:	621a      	str	r2, [r3, #32]
 80011ca:	e00b      	b.n	80011e4 <HAL_RCC_OscConfig+0x3a4>
 80011cc:	4bbb      	ldr	r3, [pc, #748]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 80011ce:	6a1a      	ldr	r2, [r3, #32]
 80011d0:	4bba      	ldr	r3, [pc, #744]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 80011d2:	2101      	movs	r1, #1
 80011d4:	438a      	bics	r2, r1
 80011d6:	621a      	str	r2, [r3, #32]
 80011d8:	4bb8      	ldr	r3, [pc, #736]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 80011da:	6a1a      	ldr	r2, [r3, #32]
 80011dc:	4bb7      	ldr	r3, [pc, #732]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 80011de:	2104      	movs	r1, #4
 80011e0:	438a      	bics	r2, r1
 80011e2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d014      	beq.n	8001216 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ec:	f7ff fb0c 	bl	8000808 <HAL_GetTick>
 80011f0:	0003      	movs	r3, r0
 80011f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f4:	e009      	b.n	800120a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011f6:	f7ff fb07 	bl	8000808 <HAL_GetTick>
 80011fa:	0002      	movs	r2, r0
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	4aaf      	ldr	r2, [pc, #700]	; (80014c0 <HAL_RCC_OscConfig+0x680>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e19a      	b.n	8001540 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800120a:	4bac      	ldr	r3, [pc, #688]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	2202      	movs	r2, #2
 8001210:	4013      	ands	r3, r2
 8001212:	d0f0      	beq.n	80011f6 <HAL_RCC_OscConfig+0x3b6>
 8001214:	e013      	b.n	800123e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001216:	f7ff faf7 	bl	8000808 <HAL_GetTick>
 800121a:	0003      	movs	r3, r0
 800121c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800121e:	e009      	b.n	8001234 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001220:	f7ff faf2 	bl	8000808 <HAL_GetTick>
 8001224:	0002      	movs	r2, r0
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	4aa5      	ldr	r2, [pc, #660]	; (80014c0 <HAL_RCC_OscConfig+0x680>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e185      	b.n	8001540 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001234:	4ba1      	ldr	r3, [pc, #644]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	2202      	movs	r2, #2
 800123a:	4013      	ands	r3, r2
 800123c:	d1f0      	bne.n	8001220 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800123e:	231f      	movs	r3, #31
 8001240:	18fb      	adds	r3, r7, r3
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d105      	bne.n	8001254 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001248:	4b9c      	ldr	r3, [pc, #624]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 800124a:	69da      	ldr	r2, [r3, #28]
 800124c:	4b9b      	ldr	r3, [pc, #620]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 800124e:	499d      	ldr	r1, [pc, #628]	; (80014c4 <HAL_RCC_OscConfig+0x684>)
 8001250:	400a      	ands	r2, r1
 8001252:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2210      	movs	r2, #16
 800125a:	4013      	ands	r3, r2
 800125c:	d063      	beq.n	8001326 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d12a      	bne.n	80012bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001266:	4b95      	ldr	r3, [pc, #596]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 8001268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800126a:	4b94      	ldr	r3, [pc, #592]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 800126c:	2104      	movs	r1, #4
 800126e:	430a      	orrs	r2, r1
 8001270:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001272:	4b92      	ldr	r3, [pc, #584]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 8001274:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001276:	4b91      	ldr	r3, [pc, #580]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 8001278:	2101      	movs	r1, #1
 800127a:	430a      	orrs	r2, r1
 800127c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127e:	f7ff fac3 	bl	8000808 <HAL_GetTick>
 8001282:	0003      	movs	r3, r0
 8001284:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001288:	f7ff fabe 	bl	8000808 <HAL_GetTick>
 800128c:	0002      	movs	r2, r0
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e152      	b.n	8001540 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800129a:	4b88      	ldr	r3, [pc, #544]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 800129c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800129e:	2202      	movs	r2, #2
 80012a0:	4013      	ands	r3, r2
 80012a2:	d0f1      	beq.n	8001288 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012a4:	4b85      	ldr	r3, [pc, #532]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 80012a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a8:	22f8      	movs	r2, #248	; 0xf8
 80012aa:	4393      	bics	r3, r2
 80012ac:	0019      	movs	r1, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	00da      	lsls	r2, r3, #3
 80012b4:	4b81      	ldr	r3, [pc, #516]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 80012b6:	430a      	orrs	r2, r1
 80012b8:	635a      	str	r2, [r3, #52]	; 0x34
 80012ba:	e034      	b.n	8001326 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	3305      	adds	r3, #5
 80012c2:	d111      	bne.n	80012e8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80012c4:	4b7d      	ldr	r3, [pc, #500]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 80012c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012c8:	4b7c      	ldr	r3, [pc, #496]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 80012ca:	2104      	movs	r1, #4
 80012cc:	438a      	bics	r2, r1
 80012ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012d0:	4b7a      	ldr	r3, [pc, #488]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 80012d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d4:	22f8      	movs	r2, #248	; 0xf8
 80012d6:	4393      	bics	r3, r2
 80012d8:	0019      	movs	r1, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	00da      	lsls	r2, r3, #3
 80012e0:	4b76      	ldr	r3, [pc, #472]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 80012e2:	430a      	orrs	r2, r1
 80012e4:	635a      	str	r2, [r3, #52]	; 0x34
 80012e6:	e01e      	b.n	8001326 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80012e8:	4b74      	ldr	r3, [pc, #464]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 80012ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ec:	4b73      	ldr	r3, [pc, #460]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 80012ee:	2104      	movs	r1, #4
 80012f0:	430a      	orrs	r2, r1
 80012f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80012f4:	4b71      	ldr	r3, [pc, #452]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 80012f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012f8:	4b70      	ldr	r3, [pc, #448]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 80012fa:	2101      	movs	r1, #1
 80012fc:	438a      	bics	r2, r1
 80012fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001300:	f7ff fa82 	bl	8000808 <HAL_GetTick>
 8001304:	0003      	movs	r3, r0
 8001306:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800130a:	f7ff fa7d 	bl	8000808 <HAL_GetTick>
 800130e:	0002      	movs	r2, r0
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e111      	b.n	8001540 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800131c:	4b67      	ldr	r3, [pc, #412]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 800131e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001320:	2202      	movs	r2, #2
 8001322:	4013      	ands	r3, r2
 8001324:	d1f1      	bne.n	800130a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2220      	movs	r2, #32
 800132c:	4013      	ands	r3, r2
 800132e:	d05c      	beq.n	80013ea <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001330:	4b62      	ldr	r3, [pc, #392]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	220c      	movs	r2, #12
 8001336:	4013      	ands	r3, r2
 8001338:	2b0c      	cmp	r3, #12
 800133a:	d00e      	beq.n	800135a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800133c:	4b5f      	ldr	r3, [pc, #380]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	220c      	movs	r2, #12
 8001342:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001344:	2b08      	cmp	r3, #8
 8001346:	d114      	bne.n	8001372 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001348:	4b5c      	ldr	r3, [pc, #368]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	23c0      	movs	r3, #192	; 0xc0
 800134e:	025b      	lsls	r3, r3, #9
 8001350:	401a      	ands	r2, r3
 8001352:	23c0      	movs	r3, #192	; 0xc0
 8001354:	025b      	lsls	r3, r3, #9
 8001356:	429a      	cmp	r2, r3
 8001358:	d10b      	bne.n	8001372 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800135a:	4b58      	ldr	r3, [pc, #352]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 800135c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800135e:	2380      	movs	r3, #128	; 0x80
 8001360:	025b      	lsls	r3, r3, #9
 8001362:	4013      	ands	r3, r2
 8001364:	d040      	beq.n	80013e8 <HAL_RCC_OscConfig+0x5a8>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d03c      	beq.n	80013e8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e0e6      	b.n	8001540 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d01b      	beq.n	80013b2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800137a:	4b50      	ldr	r3, [pc, #320]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 800137c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800137e:	4b4f      	ldr	r3, [pc, #316]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 8001380:	2180      	movs	r1, #128	; 0x80
 8001382:	0249      	lsls	r1, r1, #9
 8001384:	430a      	orrs	r2, r1
 8001386:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fa3e 	bl	8000808 <HAL_GetTick>
 800138c:	0003      	movs	r3, r0
 800138e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001392:	f7ff fa39 	bl	8000808 <HAL_GetTick>
 8001396:	0002      	movs	r2, r0
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e0cd      	b.n	8001540 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80013a4:	4b45      	ldr	r3, [pc, #276]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 80013a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	025b      	lsls	r3, r3, #9
 80013ac:	4013      	ands	r3, r2
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCC_OscConfig+0x552>
 80013b0:	e01b      	b.n	80013ea <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80013b2:	4b42      	ldr	r3, [pc, #264]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 80013b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013b6:	4b41      	ldr	r3, [pc, #260]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 80013b8:	4943      	ldr	r1, [pc, #268]	; (80014c8 <HAL_RCC_OscConfig+0x688>)
 80013ba:	400a      	ands	r2, r1
 80013bc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013be:	f7ff fa23 	bl	8000808 <HAL_GetTick>
 80013c2:	0003      	movs	r3, r0
 80013c4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013c8:	f7ff fa1e 	bl	8000808 <HAL_GetTick>
 80013cc:	0002      	movs	r2, r0
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e0b2      	b.n	8001540 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80013da:	4b38      	ldr	r3, [pc, #224]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 80013dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013de:	2380      	movs	r3, #128	; 0x80
 80013e0:	025b      	lsls	r3, r3, #9
 80013e2:	4013      	ands	r3, r2
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x588>
 80013e6:	e000      	b.n	80013ea <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80013e8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d100      	bne.n	80013f4 <HAL_RCC_OscConfig+0x5b4>
 80013f2:	e0a4      	b.n	800153e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013f4:	4b31      	ldr	r3, [pc, #196]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	220c      	movs	r2, #12
 80013fa:	4013      	ands	r3, r2
 80013fc:	2b08      	cmp	r3, #8
 80013fe:	d100      	bne.n	8001402 <HAL_RCC_OscConfig+0x5c2>
 8001400:	e078      	b.n	80014f4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	2b02      	cmp	r3, #2
 8001408:	d14c      	bne.n	80014a4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800140a:	4b2c      	ldr	r3, [pc, #176]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4b2b      	ldr	r3, [pc, #172]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 8001410:	492e      	ldr	r1, [pc, #184]	; (80014cc <HAL_RCC_OscConfig+0x68c>)
 8001412:	400a      	ands	r2, r1
 8001414:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001416:	f7ff f9f7 	bl	8000808 <HAL_GetTick>
 800141a:	0003      	movs	r3, r0
 800141c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001420:	f7ff f9f2 	bl	8000808 <HAL_GetTick>
 8001424:	0002      	movs	r2, r0
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e086      	b.n	8001540 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001432:	4b22      	ldr	r3, [pc, #136]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	2380      	movs	r3, #128	; 0x80
 8001438:	049b      	lsls	r3, r3, #18
 800143a:	4013      	ands	r3, r2
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800143e:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 8001440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001442:	220f      	movs	r2, #15
 8001444:	4393      	bics	r3, r2
 8001446:	0019      	movs	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 800144e:	430a      	orrs	r2, r1
 8001450:	62da      	str	r2, [r3, #44]	; 0x2c
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	4a1e      	ldr	r2, [pc, #120]	; (80014d0 <HAL_RCC_OscConfig+0x690>)
 8001458:	4013      	ands	r3, r2
 800145a:	0019      	movs	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001464:	431a      	orrs	r2, r3
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 8001468:	430a      	orrs	r2, r1
 800146a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800146c:	4b13      	ldr	r3, [pc, #76]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 8001472:	2180      	movs	r1, #128	; 0x80
 8001474:	0449      	lsls	r1, r1, #17
 8001476:	430a      	orrs	r2, r1
 8001478:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147a:	f7ff f9c5 	bl	8000808 <HAL_GetTick>
 800147e:	0003      	movs	r3, r0
 8001480:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001484:	f7ff f9c0 	bl	8000808 <HAL_GetTick>
 8001488:	0002      	movs	r2, r0
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e054      	b.n	8001540 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	2380      	movs	r3, #128	; 0x80
 800149c:	049b      	lsls	r3, r3, #18
 800149e:	4013      	ands	r3, r2
 80014a0:	d0f0      	beq.n	8001484 <HAL_RCC_OscConfig+0x644>
 80014a2:	e04c      	b.n	800153e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <HAL_RCC_OscConfig+0x67c>)
 80014aa:	4908      	ldr	r1, [pc, #32]	; (80014cc <HAL_RCC_OscConfig+0x68c>)
 80014ac:	400a      	ands	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff f9aa 	bl	8000808 <HAL_GetTick>
 80014b4:	0003      	movs	r3, r0
 80014b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b8:	e015      	b.n	80014e6 <HAL_RCC_OscConfig+0x6a6>
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	40021000 	.word	0x40021000
 80014c0:	00001388 	.word	0x00001388
 80014c4:	efffffff 	.word	0xefffffff
 80014c8:	fffeffff 	.word	0xfffeffff
 80014cc:	feffffff 	.word	0xfeffffff
 80014d0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d4:	f7ff f998 	bl	8000808 <HAL_GetTick>
 80014d8:	0002      	movs	r2, r0
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e02c      	b.n	8001540 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <HAL_RCC_OscConfig+0x708>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	2380      	movs	r3, #128	; 0x80
 80014ec:	049b      	lsls	r3, r3, #18
 80014ee:	4013      	ands	r3, r2
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0x694>
 80014f2:	e024      	b.n	800153e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d101      	bne.n	8001500 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e01f      	b.n	8001540 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HAL_RCC_OscConfig+0x708>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <HAL_RCC_OscConfig+0x708>)
 8001508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	23c0      	movs	r3, #192	; 0xc0
 8001510:	025b      	lsls	r3, r3, #9
 8001512:	401a      	ands	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001518:	429a      	cmp	r2, r3
 800151a:	d10e      	bne.n	800153a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	220f      	movs	r2, #15
 8001520:	401a      	ands	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001526:	429a      	cmp	r2, r3
 8001528:	d107      	bne.n	800153a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	23f0      	movs	r3, #240	; 0xf0
 800152e:	039b      	lsls	r3, r3, #14
 8001530:	401a      	ands	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001536:	429a      	cmp	r2, r3
 8001538:	d001      	beq.n	800153e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	0018      	movs	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	b008      	add	sp, #32
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40021000 	.word	0x40021000

0800154c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e0bf      	b.n	80016e0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001560:	4b61      	ldr	r3, [pc, #388]	; (80016e8 <HAL_RCC_ClockConfig+0x19c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2201      	movs	r2, #1
 8001566:	4013      	ands	r3, r2
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d911      	bls.n	8001592 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156e:	4b5e      	ldr	r3, [pc, #376]	; (80016e8 <HAL_RCC_ClockConfig+0x19c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2201      	movs	r2, #1
 8001574:	4393      	bics	r3, r2
 8001576:	0019      	movs	r1, r3
 8001578:	4b5b      	ldr	r3, [pc, #364]	; (80016e8 <HAL_RCC_ClockConfig+0x19c>)
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001580:	4b59      	ldr	r3, [pc, #356]	; (80016e8 <HAL_RCC_ClockConfig+0x19c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2201      	movs	r2, #1
 8001586:	4013      	ands	r3, r2
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d001      	beq.n	8001592 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e0a6      	b.n	80016e0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2202      	movs	r2, #2
 8001598:	4013      	ands	r3, r2
 800159a:	d015      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2204      	movs	r2, #4
 80015a2:	4013      	ands	r3, r2
 80015a4:	d006      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015a6:	4b51      	ldr	r3, [pc, #324]	; (80016ec <HAL_RCC_ClockConfig+0x1a0>)
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	4b50      	ldr	r3, [pc, #320]	; (80016ec <HAL_RCC_ClockConfig+0x1a0>)
 80015ac:	21e0      	movs	r1, #224	; 0xe0
 80015ae:	00c9      	lsls	r1, r1, #3
 80015b0:	430a      	orrs	r2, r1
 80015b2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015b4:	4b4d      	ldr	r3, [pc, #308]	; (80016ec <HAL_RCC_ClockConfig+0x1a0>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	22f0      	movs	r2, #240	; 0xf0
 80015ba:	4393      	bics	r3, r2
 80015bc:	0019      	movs	r1, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	4b4a      	ldr	r3, [pc, #296]	; (80016ec <HAL_RCC_ClockConfig+0x1a0>)
 80015c4:	430a      	orrs	r2, r1
 80015c6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2201      	movs	r2, #1
 80015ce:	4013      	ands	r3, r2
 80015d0:	d04c      	beq.n	800166c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d107      	bne.n	80015ea <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015da:	4b44      	ldr	r3, [pc, #272]	; (80016ec <HAL_RCC_ClockConfig+0x1a0>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	2380      	movs	r3, #128	; 0x80
 80015e0:	029b      	lsls	r3, r3, #10
 80015e2:	4013      	ands	r3, r2
 80015e4:	d120      	bne.n	8001628 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e07a      	b.n	80016e0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d107      	bne.n	8001602 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f2:	4b3e      	ldr	r3, [pc, #248]	; (80016ec <HAL_RCC_ClockConfig+0x1a0>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	2380      	movs	r3, #128	; 0x80
 80015f8:	049b      	lsls	r3, r3, #18
 80015fa:	4013      	ands	r3, r2
 80015fc:	d114      	bne.n	8001628 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e06e      	b.n	80016e0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b03      	cmp	r3, #3
 8001608:	d107      	bne.n	800161a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800160a:	4b38      	ldr	r3, [pc, #224]	; (80016ec <HAL_RCC_ClockConfig+0x1a0>)
 800160c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	025b      	lsls	r3, r3, #9
 8001612:	4013      	ands	r3, r2
 8001614:	d108      	bne.n	8001628 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e062      	b.n	80016e0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161a:	4b34      	ldr	r3, [pc, #208]	; (80016ec <HAL_RCC_ClockConfig+0x1a0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2202      	movs	r2, #2
 8001620:	4013      	ands	r3, r2
 8001622:	d101      	bne.n	8001628 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e05b      	b.n	80016e0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001628:	4b30      	ldr	r3, [pc, #192]	; (80016ec <HAL_RCC_ClockConfig+0x1a0>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2203      	movs	r2, #3
 800162e:	4393      	bics	r3, r2
 8001630:	0019      	movs	r1, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	4b2d      	ldr	r3, [pc, #180]	; (80016ec <HAL_RCC_ClockConfig+0x1a0>)
 8001638:	430a      	orrs	r2, r1
 800163a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800163c:	f7ff f8e4 	bl	8000808 <HAL_GetTick>
 8001640:	0003      	movs	r3, r0
 8001642:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001644:	e009      	b.n	800165a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001646:	f7ff f8df 	bl	8000808 <HAL_GetTick>
 800164a:	0002      	movs	r2, r0
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	4a27      	ldr	r2, [pc, #156]	; (80016f0 <HAL_RCC_ClockConfig+0x1a4>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d901      	bls.n	800165a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e042      	b.n	80016e0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165a:	4b24      	ldr	r3, [pc, #144]	; (80016ec <HAL_RCC_ClockConfig+0x1a0>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	220c      	movs	r2, #12
 8001660:	401a      	ands	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	429a      	cmp	r2, r3
 800166a:	d1ec      	bne.n	8001646 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800166c:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <HAL_RCC_ClockConfig+0x19c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2201      	movs	r2, #1
 8001672:	4013      	ands	r3, r2
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d211      	bcs.n	800169e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167a:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <HAL_RCC_ClockConfig+0x19c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2201      	movs	r2, #1
 8001680:	4393      	bics	r3, r2
 8001682:	0019      	movs	r1, r3
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <HAL_RCC_ClockConfig+0x19c>)
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800168c:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <HAL_RCC_ClockConfig+0x19c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2201      	movs	r2, #1
 8001692:	4013      	ands	r3, r2
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	d001      	beq.n	800169e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e020      	b.n	80016e0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2204      	movs	r2, #4
 80016a4:	4013      	ands	r3, r2
 80016a6:	d009      	beq.n	80016bc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016a8:	4b10      	ldr	r3, [pc, #64]	; (80016ec <HAL_RCC_ClockConfig+0x1a0>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	4a11      	ldr	r2, [pc, #68]	; (80016f4 <HAL_RCC_ClockConfig+0x1a8>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	0019      	movs	r1, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68da      	ldr	r2, [r3, #12]
 80016b6:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <HAL_RCC_ClockConfig+0x1a0>)
 80016b8:	430a      	orrs	r2, r1
 80016ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80016bc:	f000 f820 	bl	8001700 <HAL_RCC_GetSysClockFreq>
 80016c0:	0001      	movs	r1, r0
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <HAL_RCC_ClockConfig+0x1a0>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	091b      	lsrs	r3, r3, #4
 80016c8:	220f      	movs	r2, #15
 80016ca:	4013      	ands	r3, r2
 80016cc:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <HAL_RCC_ClockConfig+0x1ac>)
 80016ce:	5cd3      	ldrb	r3, [r2, r3]
 80016d0:	000a      	movs	r2, r1
 80016d2:	40da      	lsrs	r2, r3
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_RCC_ClockConfig+0x1b0>)
 80016d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016d8:	2000      	movs	r0, #0
 80016da:	f7ff f84f 	bl	800077c <HAL_InitTick>
  
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	0018      	movs	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b004      	add	sp, #16
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40022000 	.word	0x40022000
 80016ec:	40021000 	.word	0x40021000
 80016f0:	00001388 	.word	0x00001388
 80016f4:	fffff8ff 	.word	0xfffff8ff
 80016f8:	080029d4 	.word	0x080029d4
 80016fc:	20000004 	.word	0x20000004

08001700 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001700:	b590      	push	{r4, r7, lr}
 8001702:	b08f      	sub	sp, #60	; 0x3c
 8001704:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001706:	2314      	movs	r3, #20
 8001708:	18fb      	adds	r3, r7, r3
 800170a:	4a37      	ldr	r2, [pc, #220]	; (80017e8 <HAL_RCC_GetSysClockFreq+0xe8>)
 800170c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800170e:	c313      	stmia	r3!, {r0, r1, r4}
 8001710:	6812      	ldr	r2, [r2, #0]
 8001712:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	4a35      	ldr	r2, [pc, #212]	; (80017ec <HAL_RCC_GetSysClockFreq+0xec>)
 8001718:	ca13      	ldmia	r2!, {r0, r1, r4}
 800171a:	c313      	stmia	r3!, {r0, r1, r4}
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001724:	2300      	movs	r3, #0
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
 8001728:	2300      	movs	r3, #0
 800172a:	637b      	str	r3, [r7, #52]	; 0x34
 800172c:	2300      	movs	r3, #0
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001730:	2300      	movs	r3, #0
 8001732:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001734:	4b2e      	ldr	r3, [pc, #184]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800173a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173c:	220c      	movs	r2, #12
 800173e:	4013      	ands	r3, r2
 8001740:	2b08      	cmp	r3, #8
 8001742:	d006      	beq.n	8001752 <HAL_RCC_GetSysClockFreq+0x52>
 8001744:	2b0c      	cmp	r3, #12
 8001746:	d043      	beq.n	80017d0 <HAL_RCC_GetSysClockFreq+0xd0>
 8001748:	2b04      	cmp	r3, #4
 800174a:	d144      	bne.n	80017d6 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800174c:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <HAL_RCC_GetSysClockFreq+0xf4>)
 800174e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001750:	e044      	b.n	80017dc <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001754:	0c9b      	lsrs	r3, r3, #18
 8001756:	220f      	movs	r2, #15
 8001758:	4013      	ands	r3, r2
 800175a:	2214      	movs	r2, #20
 800175c:	18ba      	adds	r2, r7, r2
 800175e:	5cd3      	ldrb	r3, [r2, r3]
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001762:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001766:	220f      	movs	r2, #15
 8001768:	4013      	ands	r3, r2
 800176a:	1d3a      	adds	r2, r7, #4
 800176c:	5cd3      	ldrb	r3, [r2, r3]
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001772:	23c0      	movs	r3, #192	; 0xc0
 8001774:	025b      	lsls	r3, r3, #9
 8001776:	401a      	ands	r2, r3
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	025b      	lsls	r3, r3, #9
 800177c:	429a      	cmp	r2, r3
 800177e:	d109      	bne.n	8001794 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001782:	481c      	ldr	r0, [pc, #112]	; (80017f4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001784:	f7fe fcc0 	bl	8000108 <__udivsi3>
 8001788:	0003      	movs	r3, r0
 800178a:	001a      	movs	r2, r3
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	4353      	muls	r3, r2
 8001790:	637b      	str	r3, [r7, #52]	; 0x34
 8001792:	e01a      	b.n	80017ca <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001796:	23c0      	movs	r3, #192	; 0xc0
 8001798:	025b      	lsls	r3, r3, #9
 800179a:	401a      	ands	r2, r3
 800179c:	23c0      	movs	r3, #192	; 0xc0
 800179e:	025b      	lsls	r3, r3, #9
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d109      	bne.n	80017b8 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80017a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017a6:	4814      	ldr	r0, [pc, #80]	; (80017f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017a8:	f7fe fcae 	bl	8000108 <__udivsi3>
 80017ac:	0003      	movs	r3, r0
 80017ae:	001a      	movs	r2, r3
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	4353      	muls	r3, r2
 80017b4:	637b      	str	r3, [r7, #52]	; 0x34
 80017b6:	e008      	b.n	80017ca <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80017b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017ba:	480e      	ldr	r0, [pc, #56]	; (80017f4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80017bc:	f7fe fca4 	bl	8000108 <__udivsi3>
 80017c0:	0003      	movs	r3, r0
 80017c2:	001a      	movs	r2, r3
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	4353      	muls	r3, r2
 80017c8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80017ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017ce:	e005      	b.n	80017dc <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017d4:	e002      	b.n	80017dc <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017d6:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80017d8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017da:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80017dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80017de:	0018      	movs	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b00f      	add	sp, #60	; 0x3c
 80017e4:	bd90      	pop	{r4, r7, pc}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	080029b4 	.word	0x080029b4
 80017ec:	080029c4 	.word	0x080029c4
 80017f0:	40021000 	.word	0x40021000
 80017f4:	007a1200 	.word	0x007a1200
 80017f8:	02dc6c00 	.word	0x02dc6c00

080017fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001800:	4b02      	ldr	r3, [pc, #8]	; (800180c <HAL_RCC_GetHCLKFreq+0x10>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	0018      	movs	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	20000004 	.word	0x20000004

08001810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001814:	f7ff fff2 	bl	80017fc <HAL_RCC_GetHCLKFreq>
 8001818:	0001      	movs	r1, r0
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_RCC_GetPCLK1Freq+0x24>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	0a1b      	lsrs	r3, r3, #8
 8001820:	2207      	movs	r2, #7
 8001822:	4013      	ands	r3, r2
 8001824:	4a04      	ldr	r2, [pc, #16]	; (8001838 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001826:	5cd3      	ldrb	r3, [r2, r3]
 8001828:	40d9      	lsrs	r1, r3
 800182a:	000b      	movs	r3, r1
}    
 800182c:	0018      	movs	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	40021000 	.word	0x40021000
 8001838:	080029e4 	.word	0x080029e4

0800183c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	025b      	lsls	r3, r3, #9
 8001854:	4013      	ands	r3, r2
 8001856:	d100      	bne.n	800185a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001858:	e08f      	b.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800185a:	2317      	movs	r3, #23
 800185c:	18fb      	adds	r3, r7, r3
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001862:	4b6f      	ldr	r3, [pc, #444]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001864:	69da      	ldr	r2, [r3, #28]
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	055b      	lsls	r3, r3, #21
 800186a:	4013      	ands	r3, r2
 800186c:	d111      	bne.n	8001892 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	4b6c      	ldr	r3, [pc, #432]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001870:	69da      	ldr	r2, [r3, #28]
 8001872:	4b6b      	ldr	r3, [pc, #428]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001874:	2180      	movs	r1, #128	; 0x80
 8001876:	0549      	lsls	r1, r1, #21
 8001878:	430a      	orrs	r2, r1
 800187a:	61da      	str	r2, [r3, #28]
 800187c:	4b68      	ldr	r3, [pc, #416]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800187e:	69da      	ldr	r2, [r3, #28]
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	055b      	lsls	r3, r3, #21
 8001884:	4013      	ands	r3, r2
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800188a:	2317      	movs	r3, #23
 800188c:	18fb      	adds	r3, r7, r3
 800188e:	2201      	movs	r2, #1
 8001890:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001892:	4b64      	ldr	r3, [pc, #400]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4013      	ands	r3, r2
 800189c:	d11a      	bne.n	80018d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800189e:	4b61      	ldr	r3, [pc, #388]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4b60      	ldr	r3, [pc, #384]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80018a4:	2180      	movs	r1, #128	; 0x80
 80018a6:	0049      	lsls	r1, r1, #1
 80018a8:	430a      	orrs	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ac:	f7fe ffac 	bl	8000808 <HAL_GetTick>
 80018b0:	0003      	movs	r3, r0
 80018b2:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b4:	e008      	b.n	80018c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b6:	f7fe ffa7 	bl	8000808 <HAL_GetTick>
 80018ba:	0002      	movs	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b64      	cmp	r3, #100	; 0x64
 80018c2:	d901      	bls.n	80018c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e0a6      	b.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c8:	4b56      	ldr	r3, [pc, #344]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4013      	ands	r3, r2
 80018d2:	d0f0      	beq.n	80018b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018d4:	4b52      	ldr	r3, [pc, #328]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018d6:	6a1a      	ldr	r2, [r3, #32]
 80018d8:	23c0      	movs	r3, #192	; 0xc0
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4013      	ands	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d034      	beq.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	23c0      	movs	r3, #192	; 0xc0
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4013      	ands	r3, r2
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d02c      	beq.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018f6:	4b4a      	ldr	r3, [pc, #296]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	4a4b      	ldr	r2, [pc, #300]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001900:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001902:	6a1a      	ldr	r2, [r3, #32]
 8001904:	4b46      	ldr	r3, [pc, #280]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001906:	2180      	movs	r1, #128	; 0x80
 8001908:	0249      	lsls	r1, r1, #9
 800190a:	430a      	orrs	r2, r1
 800190c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800190e:	4b44      	ldr	r3, [pc, #272]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001910:	6a1a      	ldr	r2, [r3, #32]
 8001912:	4b43      	ldr	r3, [pc, #268]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001914:	4945      	ldr	r1, [pc, #276]	; (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001916:	400a      	ands	r2, r1
 8001918:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800191a:	4b41      	ldr	r3, [pc, #260]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2201      	movs	r2, #1
 8001924:	4013      	ands	r3, r2
 8001926:	d013      	beq.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001928:	f7fe ff6e 	bl	8000808 <HAL_GetTick>
 800192c:	0003      	movs	r3, r0
 800192e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001930:	e009      	b.n	8001946 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001932:	f7fe ff69 	bl	8000808 <HAL_GetTick>
 8001936:	0002      	movs	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	4a3c      	ldr	r2, [pc, #240]	; (8001a30 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d901      	bls.n	8001946 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e067      	b.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001946:	4b36      	ldr	r3, [pc, #216]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	2202      	movs	r2, #2
 800194c:	4013      	ands	r3, r2
 800194e:	d0f0      	beq.n	8001932 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001950:	4b33      	ldr	r3, [pc, #204]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	4a34      	ldr	r2, [pc, #208]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001956:	4013      	ands	r3, r2
 8001958:	0019      	movs	r1, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	4b30      	ldr	r3, [pc, #192]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001960:	430a      	orrs	r2, r1
 8001962:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001964:	2317      	movs	r3, #23
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d105      	bne.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800196e:	4b2c      	ldr	r3, [pc, #176]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001970:	69da      	ldr	r2, [r3, #28]
 8001972:	4b2b      	ldr	r3, [pc, #172]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001974:	492f      	ldr	r1, [pc, #188]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001976:	400a      	ands	r2, r1
 8001978:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2201      	movs	r2, #1
 8001980:	4013      	ands	r3, r2
 8001982:	d009      	beq.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001984:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001988:	2203      	movs	r2, #3
 800198a:	4393      	bics	r3, r2
 800198c:	0019      	movs	r1, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	4b23      	ldr	r3, [pc, #140]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001994:	430a      	orrs	r2, r1
 8001996:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2202      	movs	r2, #2
 800199e:	4013      	ands	r3, r2
 80019a0:	d009      	beq.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80019a2:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a24      	ldr	r2, [pc, #144]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	0019      	movs	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019b2:	430a      	orrs	r2, r1
 80019b4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2220      	movs	r2, #32
 80019bc:	4013      	ands	r3, r2
 80019be:	d009      	beq.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80019c0:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c4:	2210      	movs	r2, #16
 80019c6:	4393      	bics	r3, r2
 80019c8:	0019      	movs	r1, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691a      	ldr	r2, [r3, #16]
 80019ce:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019d0:	430a      	orrs	r2, r1
 80019d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	029b      	lsls	r3, r3, #10
 80019dc:	4013      	ands	r3, r2
 80019de:	d009      	beq.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	2280      	movs	r2, #128	; 0x80
 80019e6:	4393      	bics	r3, r2
 80019e8:	0019      	movs	r1, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699a      	ldr	r2, [r3, #24]
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019f0:	430a      	orrs	r2, r1
 80019f2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4013      	ands	r3, r2
 80019fe:	d009      	beq.n	8001a14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	2240      	movs	r2, #64	; 0x40
 8001a06:	4393      	bics	r3, r2
 8001a08:	0019      	movs	r1, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695a      	ldr	r2, [r3, #20]
 8001a0e:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a10:	430a      	orrs	r2, r1
 8001a12:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	0018      	movs	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	b006      	add	sp, #24
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40007000 	.word	0x40007000
 8001a28:	fffffcff 	.word	0xfffffcff
 8001a2c:	fffeffff 	.word	0xfffeffff
 8001a30:	00001388 	.word	0x00001388
 8001a34:	efffffff 	.word	0xefffffff
 8001a38:	fffcffff 	.word	0xfffcffff

08001a3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e044      	b.n	8001ad8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d107      	bne.n	8001a66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2270      	movs	r2, #112	; 0x70
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	0018      	movs	r0, r3
 8001a62:	f7fe fdbb 	bl	80005dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2224      	movs	r2, #36	; 0x24
 8001a6a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2101      	movs	r1, #1
 8001a78:	438a      	bics	r2, r1
 8001a7a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f000 fa92 	bl	8001fa8 <UART_SetConfig>
 8001a84:	0003      	movs	r3, r0
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e024      	b.n	8001ad8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f000 fc51 	bl	8002340 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	490d      	ldr	r1, [pc, #52]	; (8001ae0 <HAL_UART_Init+0xa4>)
 8001aaa:	400a      	ands	r2, r1
 8001aac:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	212a      	movs	r1, #42	; 0x2a
 8001aba:	438a      	bics	r2, r1
 8001abc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2101      	movs	r1, #1
 8001aca:	430a      	orrs	r2, r1
 8001acc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f000 fce9 	bl	80024a8 <UART_CheckIdleState>
 8001ad6:	0003      	movs	r3, r0
}
 8001ad8:	0018      	movs	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b002      	add	sp, #8
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	ffffb7ff 	.word	0xffffb7ff

08001ae4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	1dbb      	adds	r3, r7, #6
 8001af0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001af6:	2b20      	cmp	r3, #32
 8001af8:	d158      	bne.n	8001bac <HAL_UART_Transmit_IT+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_UART_Transmit_IT+0x24>
 8001b00:	1dbb      	adds	r3, r7, #6
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e050      	b.n	8001bae <HAL_UART_Transmit_IT+0xca>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	015b      	lsls	r3, r3, #5
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d109      	bne.n	8001b2c <HAL_UART_Transmit_IT+0x48>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d105      	bne.n	8001b2c <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	2201      	movs	r2, #1
 8001b24:	4013      	ands	r3, r2
 8001b26:	d001      	beq.n	8001b2c <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e040      	b.n	8001bae <HAL_UART_Transmit_IT+0xca>
      }
    }

    __HAL_LOCK(huart);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2270      	movs	r2, #112	; 0x70
 8001b30:	5c9b      	ldrb	r3, [r3, r2]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d101      	bne.n	8001b3a <HAL_UART_Transmit_IT+0x56>
 8001b36:	2302      	movs	r3, #2
 8001b38:	e039      	b.n	8001bae <HAL_UART_Transmit_IT+0xca>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2270      	movs	r2, #112	; 0x70
 8001b3e:	2101      	movs	r1, #1
 8001b40:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	68ba      	ldr	r2, [r7, #8]
 8001b46:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1dba      	adds	r2, r7, #6
 8001b4c:	2150      	movs	r1, #80	; 0x50
 8001b4e:	8812      	ldrh	r2, [r2, #0]
 8001b50:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1dba      	adds	r2, r7, #6
 8001b56:	2152      	movs	r1, #82	; 0x52
 8001b58:	8812      	ldrh	r2, [r2, #0]
 8001b5a:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2221      	movs	r2, #33	; 0x21
 8001b6c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	015b      	lsls	r3, r3, #5
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d107      	bne.n	8001b8a <HAL_UART_Transmit_IT+0xa6>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d103      	bne.n	8001b8a <HAL_UART_Transmit_IT+0xa6>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4a0c      	ldr	r2, [pc, #48]	; (8001bb8 <HAL_UART_Transmit_IT+0xd4>)
 8001b86:	665a      	str	r2, [r3, #100]	; 0x64
 8001b88:	e002      	b.n	8001b90 <HAL_UART_Transmit_IT+0xac>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <HAL_UART_Transmit_IT+0xd8>)
 8001b8e:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2270      	movs	r2, #112	; 0x70
 8001b94:	2100      	movs	r1, #0
 8001b96:	5499      	strb	r1, [r3, r2]

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2180      	movs	r1, #128	; 0x80
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	e000      	b.n	8001bae <HAL_UART_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8001bac:	2302      	movs	r3, #2
  }
}
 8001bae:	0018      	movs	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b004      	add	sp, #16
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	0800270f 	.word	0x0800270f
 8001bbc:	0800269f 	.word	0x0800269f

08001bc0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	1dbb      	adds	r3, r7, #6
 8001bcc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001bd2:	2b20      	cmp	r3, #32
 8001bd4:	d000      	beq.n	8001bd8 <HAL_UART_Receive_IT+0x18>
 8001bd6:	e09f      	b.n	8001d18 <HAL_UART_Receive_IT+0x158>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_UART_Receive_IT+0x26>
 8001bde:	1dbb      	adds	r3, r7, #6
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e097      	b.n	8001d1a <HAL_UART_Receive_IT+0x15a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	015b      	lsls	r3, r3, #5
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d109      	bne.n	8001c0a <HAL_UART_Receive_IT+0x4a>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d105      	bne.n	8001c0a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	2201      	movs	r2, #1
 8001c02:	4013      	ands	r3, r2
 8001c04:	d001      	beq.n	8001c0a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e087      	b.n	8001d1a <HAL_UART_Receive_IT+0x15a>
      }
    }

    __HAL_LOCK(huart);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2270      	movs	r2, #112	; 0x70
 8001c0e:	5c9b      	ldrb	r3, [r3, r2]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_UART_Receive_IT+0x58>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e080      	b.n	8001d1a <HAL_UART_Receive_IT+0x15a>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2270      	movs	r2, #112	; 0x70
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	1dba      	adds	r2, r7, #6
 8001c2a:	2158      	movs	r1, #88	; 0x58
 8001c2c:	8812      	ldrh	r2, [r2, #0]
 8001c2e:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	1dba      	adds	r2, r7, #6
 8001c34:	215a      	movs	r1, #90	; 0x5a
 8001c36:	8812      	ldrh	r2, [r2, #0]
 8001c38:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	015b      	lsls	r3, r3, #5
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d10d      	bne.n	8001c68 <HAL_UART_Receive_IT+0xa8>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d104      	bne.n	8001c5e <HAL_UART_Receive_IT+0x9e>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	225c      	movs	r2, #92	; 0x5c
 8001c58:	4932      	ldr	r1, [pc, #200]	; (8001d24 <HAL_UART_Receive_IT+0x164>)
 8001c5a:	5299      	strh	r1, [r3, r2]
 8001c5c:	e02e      	b.n	8001cbc <HAL_UART_Receive_IT+0xfc>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	225c      	movs	r2, #92	; 0x5c
 8001c62:	21ff      	movs	r1, #255	; 0xff
 8001c64:	5299      	strh	r1, [r3, r2]
 8001c66:	e029      	b.n	8001cbc <HAL_UART_Receive_IT+0xfc>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10d      	bne.n	8001c8c <HAL_UART_Receive_IT+0xcc>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d104      	bne.n	8001c82 <HAL_UART_Receive_IT+0xc2>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	225c      	movs	r2, #92	; 0x5c
 8001c7c:	21ff      	movs	r1, #255	; 0xff
 8001c7e:	5299      	strh	r1, [r3, r2]
 8001c80:	e01c      	b.n	8001cbc <HAL_UART_Receive_IT+0xfc>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	225c      	movs	r2, #92	; 0x5c
 8001c86:	217f      	movs	r1, #127	; 0x7f
 8001c88:	5299      	strh	r1, [r3, r2]
 8001c8a:	e017      	b.n	8001cbc <HAL_UART_Receive_IT+0xfc>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	055b      	lsls	r3, r3, #21
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d10d      	bne.n	8001cb4 <HAL_UART_Receive_IT+0xf4>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d104      	bne.n	8001caa <HAL_UART_Receive_IT+0xea>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	225c      	movs	r2, #92	; 0x5c
 8001ca4:	217f      	movs	r1, #127	; 0x7f
 8001ca6:	5299      	strh	r1, [r3, r2]
 8001ca8:	e008      	b.n	8001cbc <HAL_UART_Receive_IT+0xfc>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	225c      	movs	r2, #92	; 0x5c
 8001cae:	213f      	movs	r1, #63	; 0x3f
 8001cb0:	5299      	strh	r1, [r3, r2]
 8001cb2:	e003      	b.n	8001cbc <HAL_UART_Receive_IT+0xfc>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	225c      	movs	r2, #92	; 0x5c
 8001cb8:	2100      	movs	r1, #0
 8001cba:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2222      	movs	r2, #34	; 0x22
 8001cc6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	015b      	lsls	r3, r3, #5
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d107      	bne.n	8001cf4 <HAL_UART_Receive_IT+0x134>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d103      	bne.n	8001cf4 <HAL_UART_Receive_IT+0x134>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4a0e      	ldr	r2, [pc, #56]	; (8001d28 <HAL_UART_Receive_IT+0x168>)
 8001cf0:	661a      	str	r2, [r3, #96]	; 0x60
 8001cf2:	e002      	b.n	8001cfa <HAL_UART_Receive_IT+0x13a>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4a0d      	ldr	r2, [pc, #52]	; (8001d2c <HAL_UART_Receive_IT+0x16c>)
 8001cf8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2270      	movs	r2, #112	; 0x70
 8001cfe:	2100      	movs	r1, #0
 8001d00:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2190      	movs	r1, #144	; 0x90
 8001d0e:	0049      	lsls	r1, r1, #1
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	e000      	b.n	8001d1a <HAL_UART_Receive_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8001d18:	2302      	movs	r3, #2
  }
}
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b004      	add	sp, #16
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	000001ff 	.word	0x000001ff
 8001d28:	08002879 	.word	0x08002879
 8001d2c:	080027bd 	.word	0x080027bd

08001d30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	4a93      	ldr	r2, [pc, #588]	; (8001fa0 <HAL_UART_IRQHandler+0x270>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d112      	bne.n	8001d84 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	2220      	movs	r2, #32
 8001d62:	4013      	ands	r3, r2
 8001d64:	d00e      	beq.n	8001d84 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	2220      	movs	r2, #32
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d00a      	beq.n	8001d84 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d100      	bne.n	8001d78 <HAL_UART_IRQHandler+0x48>
 8001d76:	e10b      	b.n	8001f90 <HAL_UART_IRQHandler+0x260>
      {
        huart->RxISR(huart);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	0010      	movs	r0, r2
 8001d80:	4798      	blx	r3
      }
      return;
 8001d82:	e105      	b.n	8001f90 <HAL_UART_IRQHandler+0x260>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d100      	bne.n	8001d8c <HAL_UART_IRQHandler+0x5c>
 8001d8a:	e0cd      	b.n	8001f28 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	4013      	ands	r3, r2
 8001d92:	d105      	bne.n	8001da0 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	2390      	movs	r3, #144	; 0x90
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d100      	bne.n	8001da0 <HAL_UART_IRQHandler+0x70>
 8001d9e:	e0c3      	b.n	8001f28 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	2201      	movs	r2, #1
 8001da4:	4013      	ands	r3, r2
 8001da6:	d00e      	beq.n	8001dc6 <HAL_UART_IRQHandler+0x96>
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	2380      	movs	r3, #128	; 0x80
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4013      	ands	r3, r2
 8001db0:	d009      	beq.n	8001dc6 <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2201      	movs	r2, #1
 8001db8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d00d      	beq.n	8001dea <HAL_UART_IRQHandler+0xba>
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d009      	beq.n	8001dea <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001de2:	2204      	movs	r2, #4
 8001de4:	431a      	orrs	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	2204      	movs	r2, #4
 8001dee:	4013      	ands	r3, r2
 8001df0:	d00d      	beq.n	8001e0e <HAL_UART_IRQHandler+0xde>
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2201      	movs	r2, #1
 8001df6:	4013      	ands	r3, r2
 8001df8:	d009      	beq.n	8001e0e <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2204      	movs	r2, #4
 8001e00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e06:	2202      	movs	r2, #2
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	2208      	movs	r2, #8
 8001e12:	4013      	ands	r3, r2
 8001e14:	d011      	beq.n	8001e3a <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	2220      	movs	r2, #32
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d103      	bne.n	8001e26 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	2201      	movs	r2, #1
 8001e22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001e24:	d009      	beq.n	8001e3a <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2208      	movs	r2, #8
 8001e2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e32:	2208      	movs	r2, #8
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	4013      	ands	r3, r2
 8001e42:	d00f      	beq.n	8001e64 <HAL_UART_IRQHandler+0x134>
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	04db      	lsls	r3, r3, #19
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d00a      	beq.n	8001e64 <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2280      	movs	r2, #128	; 0x80
 8001e54:	0112      	lsls	r2, r2, #4
 8001e56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d100      	bne.n	8001e6e <HAL_UART_IRQHandler+0x13e>
 8001e6c:	e092      	b.n	8001f94 <HAL_UART_IRQHandler+0x264>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	2220      	movs	r2, #32
 8001e72:	4013      	ands	r3, r2
 8001e74:	d00c      	beq.n	8001e90 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	2220      	movs	r2, #32
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d008      	beq.n	8001e90 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d004      	beq.n	8001e90 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	0010      	movs	r0, r2
 8001e8e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e94:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2240      	movs	r2, #64	; 0x40
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b40      	cmp	r3, #64	; 0x40
 8001ea2:	d003      	beq.n	8001eac <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2228      	movs	r2, #40	; 0x28
 8001ea8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001eaa:	d033      	beq.n	8001f14 <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f000 fbbe 	bl	8002630 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2240      	movs	r2, #64	; 0x40
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b40      	cmp	r3, #64	; 0x40
 8001ec0:	d123      	bne.n	8001f0a <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2140      	movs	r1, #64	; 0x40
 8001ece:	438a      	bics	r2, r1
 8001ed0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d012      	beq.n	8001f00 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ede:	4a31      	ldr	r2, [pc, #196]	; (8001fa4 <HAL_UART_IRQHandler+0x274>)
 8001ee0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f7fe fd98 	bl	8000a1c <HAL_DMA_Abort_IT>
 8001eec:	1e03      	subs	r3, r0, #0
 8001eee:	d019      	beq.n	8001f24 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001efa:	0018      	movs	r0, r3
 8001efc:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001efe:	e011      	b.n	8001f24 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	0018      	movs	r0, r3
 8001f04:	f7fe fb0c 	bl	8000520 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f08:	e00c      	b.n	8001f24 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f7fe fb07 	bl	8000520 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f12:	e007      	b.n	8001f24 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	0018      	movs	r0, r3
 8001f18:	f7fe fb02 	bl	8000520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8001f22:	e037      	b.n	8001f94 <HAL_UART_IRQHandler+0x264>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f24:	46c0      	nop			; (mov r8, r8)
    return;
 8001f26:	e035      	b.n	8001f94 <HAL_UART_IRQHandler+0x264>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001f28:	69fa      	ldr	r2, [r7, #28]
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	035b      	lsls	r3, r3, #13
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d00e      	beq.n	8001f50 <HAL_UART_IRQHandler+0x220>
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	03db      	lsls	r3, r3, #15
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d009      	beq.n	8001f50 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2280      	movs	r2, #128	; 0x80
 8001f42:	0352      	lsls	r2, r2, #13
 8001f44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f000 fcf3 	bl	8002934 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8001f4e:	e024      	b.n	8001f9a <HAL_UART_IRQHandler+0x26a>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	2280      	movs	r2, #128	; 0x80
 8001f54:	4013      	ands	r3, r2
 8001f56:	d00d      	beq.n	8001f74 <HAL_UART_IRQHandler+0x244>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	2280      	movs	r2, #128	; 0x80
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d009      	beq.n	8001f74 <HAL_UART_IRQHandler+0x244>
  {
    if (huart->TxISR != NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d017      	beq.n	8001f98 <HAL_UART_IRQHandler+0x268>
    {
      huart->TxISR(huart);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	0010      	movs	r0, r2
 8001f70:	4798      	blx	r3
    }
    return;
 8001f72:	e011      	b.n	8001f98 <HAL_UART_IRQHandler+0x268>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	2240      	movs	r2, #64	; 0x40
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d00e      	beq.n	8001f9a <HAL_UART_IRQHandler+0x26a>
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	2240      	movs	r2, #64	; 0x40
 8001f80:	4013      	ands	r3, r2
 8001f82:	d00a      	beq.n	8001f9a <HAL_UART_IRQHandler+0x26a>
  {
    UART_EndTransmit_IT(huart);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	0018      	movs	r0, r3
 8001f88:	f000 fbfd 	bl	8002786 <UART_EndTransmit_IT>
    return;
 8001f8c:	46c0      	nop			; (mov r8, r8)
 8001f8e:	e004      	b.n	8001f9a <HAL_UART_IRQHandler+0x26a>
      return;
 8001f90:	46c0      	nop			; (mov r8, r8)
 8001f92:	e002      	b.n	8001f9a <HAL_UART_IRQHandler+0x26a>
    return;
 8001f94:	46c0      	nop			; (mov r8, r8)
 8001f96:	e000      	b.n	8001f9a <HAL_UART_IRQHandler+0x26a>
    return;
 8001f98:	46c0      	nop			; (mov r8, r8)
  }

}
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b008      	add	sp, #32
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	0000080f 	.word	0x0000080f
 8001fa4:	08002671 	.word	0x08002671

08001fa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001fb4:	2317      	movs	r3, #23
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4ac5      	ldr	r2, [pc, #788]	; (80022f0 <UART_SetConfig+0x348>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	0019      	movs	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	4ac0      	ldr	r2, [pc, #768]	; (80022f4 <UART_SetConfig+0x34c>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	0019      	movs	r1, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4313      	orrs	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	4ab7      	ldr	r2, [pc, #732]	; (80022f8 <UART_SetConfig+0x350>)
 800201a:	4013      	ands	r3, r2
 800201c:	0019      	movs	r1, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	430a      	orrs	r2, r1
 8002026:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4ab3      	ldr	r2, [pc, #716]	; (80022fc <UART_SetConfig+0x354>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d125      	bne.n	800207e <UART_SetConfig+0xd6>
 8002032:	4bb3      	ldr	r3, [pc, #716]	; (8002300 <UART_SetConfig+0x358>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	2203      	movs	r2, #3
 8002038:	4013      	ands	r3, r2
 800203a:	2b01      	cmp	r3, #1
 800203c:	d00f      	beq.n	800205e <UART_SetConfig+0xb6>
 800203e:	d304      	bcc.n	800204a <UART_SetConfig+0xa2>
 8002040:	2b02      	cmp	r3, #2
 8002042:	d011      	beq.n	8002068 <UART_SetConfig+0xc0>
 8002044:	2b03      	cmp	r3, #3
 8002046:	d005      	beq.n	8002054 <UART_SetConfig+0xac>
 8002048:	e013      	b.n	8002072 <UART_SetConfig+0xca>
 800204a:	231f      	movs	r3, #31
 800204c:	18fb      	adds	r3, r7, r3
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
 8002052:	e064      	b.n	800211e <UART_SetConfig+0x176>
 8002054:	231f      	movs	r3, #31
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	2202      	movs	r2, #2
 800205a:	701a      	strb	r2, [r3, #0]
 800205c:	e05f      	b.n	800211e <UART_SetConfig+0x176>
 800205e:	231f      	movs	r3, #31
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	2204      	movs	r2, #4
 8002064:	701a      	strb	r2, [r3, #0]
 8002066:	e05a      	b.n	800211e <UART_SetConfig+0x176>
 8002068:	231f      	movs	r3, #31
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	2208      	movs	r2, #8
 800206e:	701a      	strb	r2, [r3, #0]
 8002070:	e055      	b.n	800211e <UART_SetConfig+0x176>
 8002072:	231f      	movs	r3, #31
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	2210      	movs	r2, #16
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	e04f      	b.n	800211e <UART_SetConfig+0x176>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4aa0      	ldr	r2, [pc, #640]	; (8002304 <UART_SetConfig+0x35c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d132      	bne.n	80020ee <UART_SetConfig+0x146>
 8002088:	4b9d      	ldr	r3, [pc, #628]	; (8002300 <UART_SetConfig+0x358>)
 800208a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800208c:	23c0      	movs	r3, #192	; 0xc0
 800208e:	029b      	lsls	r3, r3, #10
 8002090:	4013      	ands	r3, r2
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	0252      	lsls	r2, r2, #9
 8002096:	4293      	cmp	r3, r2
 8002098:	d019      	beq.n	80020ce <UART_SetConfig+0x126>
 800209a:	2280      	movs	r2, #128	; 0x80
 800209c:	0252      	lsls	r2, r2, #9
 800209e:	4293      	cmp	r3, r2
 80020a0:	d802      	bhi.n	80020a8 <UART_SetConfig+0x100>
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d009      	beq.n	80020ba <UART_SetConfig+0x112>
 80020a6:	e01c      	b.n	80020e2 <UART_SetConfig+0x13a>
 80020a8:	2280      	movs	r2, #128	; 0x80
 80020aa:	0292      	lsls	r2, r2, #10
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d013      	beq.n	80020d8 <UART_SetConfig+0x130>
 80020b0:	22c0      	movs	r2, #192	; 0xc0
 80020b2:	0292      	lsls	r2, r2, #10
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d005      	beq.n	80020c4 <UART_SetConfig+0x11c>
 80020b8:	e013      	b.n	80020e2 <UART_SetConfig+0x13a>
 80020ba:	231f      	movs	r3, #31
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
 80020c2:	e02c      	b.n	800211e <UART_SetConfig+0x176>
 80020c4:	231f      	movs	r3, #31
 80020c6:	18fb      	adds	r3, r7, r3
 80020c8:	2202      	movs	r2, #2
 80020ca:	701a      	strb	r2, [r3, #0]
 80020cc:	e027      	b.n	800211e <UART_SetConfig+0x176>
 80020ce:	231f      	movs	r3, #31
 80020d0:	18fb      	adds	r3, r7, r3
 80020d2:	2204      	movs	r2, #4
 80020d4:	701a      	strb	r2, [r3, #0]
 80020d6:	e022      	b.n	800211e <UART_SetConfig+0x176>
 80020d8:	231f      	movs	r3, #31
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	2208      	movs	r2, #8
 80020de:	701a      	strb	r2, [r3, #0]
 80020e0:	e01d      	b.n	800211e <UART_SetConfig+0x176>
 80020e2:	231f      	movs	r3, #31
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	2210      	movs	r2, #16
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	e017      	b.n	800211e <UART_SetConfig+0x176>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a85      	ldr	r2, [pc, #532]	; (8002308 <UART_SetConfig+0x360>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d104      	bne.n	8002102 <UART_SetConfig+0x15a>
 80020f8:	231f      	movs	r3, #31
 80020fa:	18fb      	adds	r3, r7, r3
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
 8002100:	e00d      	b.n	800211e <UART_SetConfig+0x176>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a81      	ldr	r2, [pc, #516]	; (800230c <UART_SetConfig+0x364>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d104      	bne.n	8002116 <UART_SetConfig+0x16e>
 800210c:	231f      	movs	r3, #31
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]
 8002114:	e003      	b.n	800211e <UART_SetConfig+0x176>
 8002116:	231f      	movs	r3, #31
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	2210      	movs	r2, #16
 800211c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69da      	ldr	r2, [r3, #28]
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	021b      	lsls	r3, r3, #8
 8002126:	429a      	cmp	r2, r3
 8002128:	d000      	beq.n	800212c <UART_SetConfig+0x184>
 800212a:	e07d      	b.n	8002228 <UART_SetConfig+0x280>
  {
    switch (clocksource)
 800212c:	231f      	movs	r3, #31
 800212e:	18fb      	adds	r3, r7, r3
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d01c      	beq.n	8002170 <UART_SetConfig+0x1c8>
 8002136:	dc02      	bgt.n	800213e <UART_SetConfig+0x196>
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <UART_SetConfig+0x1a0>
 800213c:	e04b      	b.n	80021d6 <UART_SetConfig+0x22e>
 800213e:	2b04      	cmp	r3, #4
 8002140:	d025      	beq.n	800218e <UART_SetConfig+0x1e6>
 8002142:	2b08      	cmp	r3, #8
 8002144:	d037      	beq.n	80021b6 <UART_SetConfig+0x20e>
 8002146:	e046      	b.n	80021d6 <UART_SetConfig+0x22e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002148:	f7ff fb62 	bl	8001810 <HAL_RCC_GetPCLK1Freq>
 800214c:	0003      	movs	r3, r0
 800214e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	005a      	lsls	r2, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	085b      	lsrs	r3, r3, #1
 800215a:	18d2      	adds	r2, r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	0019      	movs	r1, r3
 8002162:	0010      	movs	r0, r2
 8002164:	f7fd ffd0 	bl	8000108 <__udivsi3>
 8002168:	0003      	movs	r3, r0
 800216a:	b29b      	uxth	r3, r3
 800216c:	61bb      	str	r3, [r7, #24]
        break;
 800216e:	e037      	b.n	80021e0 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	085b      	lsrs	r3, r3, #1
 8002176:	4a66      	ldr	r2, [pc, #408]	; (8002310 <UART_SetConfig+0x368>)
 8002178:	189a      	adds	r2, r3, r2
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	0019      	movs	r1, r3
 8002180:	0010      	movs	r0, r2
 8002182:	f7fd ffc1 	bl	8000108 <__udivsi3>
 8002186:	0003      	movs	r3, r0
 8002188:	b29b      	uxth	r3, r3
 800218a:	61bb      	str	r3, [r7, #24]
        break;
 800218c:	e028      	b.n	80021e0 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800218e:	f7ff fab7 	bl	8001700 <HAL_RCC_GetSysClockFreq>
 8002192:	0003      	movs	r3, r0
 8002194:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	005a      	lsls	r2, r3, #1
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	085b      	lsrs	r3, r3, #1
 80021a0:	18d2      	adds	r2, r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	0019      	movs	r1, r3
 80021a8:	0010      	movs	r0, r2
 80021aa:	f7fd ffad 	bl	8000108 <__udivsi3>
 80021ae:	0003      	movs	r3, r0
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	61bb      	str	r3, [r7, #24]
        break;
 80021b4:	e014      	b.n	80021e0 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	085b      	lsrs	r3, r3, #1
 80021bc:	2280      	movs	r2, #128	; 0x80
 80021be:	0252      	lsls	r2, r2, #9
 80021c0:	189a      	adds	r2, r3, r2
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	0019      	movs	r1, r3
 80021c8:	0010      	movs	r0, r2
 80021ca:	f7fd ff9d 	bl	8000108 <__udivsi3>
 80021ce:	0003      	movs	r3, r0
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	61bb      	str	r3, [r7, #24]
        break;
 80021d4:	e004      	b.n	80021e0 <UART_SetConfig+0x238>
      default:
        ret = HAL_ERROR;
 80021d6:	2317      	movs	r3, #23
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
        break;
 80021de:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	2b0f      	cmp	r3, #15
 80021e4:	d91b      	bls.n	800221e <UART_SetConfig+0x276>
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	4a4a      	ldr	r2, [pc, #296]	; (8002314 <UART_SetConfig+0x36c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d817      	bhi.n	800221e <UART_SetConfig+0x276>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	200a      	movs	r0, #10
 80021f4:	183b      	adds	r3, r7, r0
 80021f6:	210f      	movs	r1, #15
 80021f8:	438a      	bics	r2, r1
 80021fa:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	085b      	lsrs	r3, r3, #1
 8002200:	b29b      	uxth	r3, r3
 8002202:	2207      	movs	r2, #7
 8002204:	4013      	ands	r3, r2
 8002206:	b299      	uxth	r1, r3
 8002208:	183b      	adds	r3, r7, r0
 800220a:	183a      	adds	r2, r7, r0
 800220c:	8812      	ldrh	r2, [r2, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	183a      	adds	r2, r7, r0
 8002218:	8812      	ldrh	r2, [r2, #0]
 800221a:	60da      	str	r2, [r3, #12]
 800221c:	e082      	b.n	8002324 <UART_SetConfig+0x37c>
    }
    else
    {
      ret = HAL_ERROR;
 800221e:	2317      	movs	r3, #23
 8002220:	18fb      	adds	r3, r7, r3
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	e07d      	b.n	8002324 <UART_SetConfig+0x37c>
    }
  }
  else
  {
    switch (clocksource)
 8002228:	231f      	movs	r3, #31
 800222a:	18fb      	adds	r3, r7, r3
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d01b      	beq.n	800226a <UART_SetConfig+0x2c2>
 8002232:	dc02      	bgt.n	800223a <UART_SetConfig+0x292>
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <UART_SetConfig+0x29c>
 8002238:	e049      	b.n	80022ce <UART_SetConfig+0x326>
 800223a:	2b04      	cmp	r3, #4
 800223c:	d024      	beq.n	8002288 <UART_SetConfig+0x2e0>
 800223e:	2b08      	cmp	r3, #8
 8002240:	d035      	beq.n	80022ae <UART_SetConfig+0x306>
 8002242:	e044      	b.n	80022ce <UART_SetConfig+0x326>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002244:	f7ff fae4 	bl	8001810 <HAL_RCC_GetPCLK1Freq>
 8002248:	0003      	movs	r3, r0
 800224a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	085a      	lsrs	r2, r3, #1
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	18d2      	adds	r2, r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	0019      	movs	r1, r3
 800225c:	0010      	movs	r0, r2
 800225e:	f7fd ff53 	bl	8000108 <__udivsi3>
 8002262:	0003      	movs	r3, r0
 8002264:	b29b      	uxth	r3, r3
 8002266:	61bb      	str	r3, [r7, #24]
        break;
 8002268:	e036      	b.n	80022d8 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	085b      	lsrs	r3, r3, #1
 8002270:	4a29      	ldr	r2, [pc, #164]	; (8002318 <UART_SetConfig+0x370>)
 8002272:	189a      	adds	r2, r3, r2
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	0019      	movs	r1, r3
 800227a:	0010      	movs	r0, r2
 800227c:	f7fd ff44 	bl	8000108 <__udivsi3>
 8002280:	0003      	movs	r3, r0
 8002282:	b29b      	uxth	r3, r3
 8002284:	61bb      	str	r3, [r7, #24]
        break;
 8002286:	e027      	b.n	80022d8 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002288:	f7ff fa3a 	bl	8001700 <HAL_RCC_GetSysClockFreq>
 800228c:	0003      	movs	r3, r0
 800228e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	085a      	lsrs	r2, r3, #1
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	18d2      	adds	r2, r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	0019      	movs	r1, r3
 80022a0:	0010      	movs	r0, r2
 80022a2:	f7fd ff31 	bl	8000108 <__udivsi3>
 80022a6:	0003      	movs	r3, r0
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	61bb      	str	r3, [r7, #24]
        break;
 80022ac:	e014      	b.n	80022d8 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	085b      	lsrs	r3, r3, #1
 80022b4:	2280      	movs	r2, #128	; 0x80
 80022b6:	0212      	lsls	r2, r2, #8
 80022b8:	189a      	adds	r2, r3, r2
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	0019      	movs	r1, r3
 80022c0:	0010      	movs	r0, r2
 80022c2:	f7fd ff21 	bl	8000108 <__udivsi3>
 80022c6:	0003      	movs	r3, r0
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	61bb      	str	r3, [r7, #24]
        break;
 80022cc:	e004      	b.n	80022d8 <UART_SetConfig+0x330>
      default:
        ret = HAL_ERROR;
 80022ce:	2317      	movs	r3, #23
 80022d0:	18fb      	adds	r3, r7, r3
 80022d2:	2201      	movs	r2, #1
 80022d4:	701a      	strb	r2, [r3, #0]
        break;
 80022d6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	2b0f      	cmp	r3, #15
 80022dc:	d91e      	bls.n	800231c <UART_SetConfig+0x374>
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	4a0c      	ldr	r2, [pc, #48]	; (8002314 <UART_SetConfig+0x36c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d81a      	bhi.n	800231c <UART_SetConfig+0x374>
    {
      huart->Instance->BRR = usartdiv;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	e019      	b.n	8002324 <UART_SetConfig+0x37c>
 80022f0:	efff69f3 	.word	0xefff69f3
 80022f4:	ffffcfff 	.word	0xffffcfff
 80022f8:	fffff4ff 	.word	0xfffff4ff
 80022fc:	40013800 	.word	0x40013800
 8002300:	40021000 	.word	0x40021000
 8002304:	40004400 	.word	0x40004400
 8002308:	40004800 	.word	0x40004800
 800230c:	40004c00 	.word	0x40004c00
 8002310:	00f42400 	.word	0x00f42400
 8002314:	0000ffff 	.word	0x0000ffff
 8002318:	007a1200 	.word	0x007a1200
    }
    else
    {
      ret = HAL_ERROR;
 800231c:	2317      	movs	r3, #23
 800231e:	18fb      	adds	r3, r7, r3
 8002320:	2201      	movs	r2, #1
 8002322:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002330:	2317      	movs	r3, #23
 8002332:	18fb      	adds	r3, r7, r3
 8002334:	781b      	ldrb	r3, [r3, #0]
}
 8002336:	0018      	movs	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	b008      	add	sp, #32
 800233c:	bd80      	pop	{r7, pc}
 800233e:	46c0      	nop			; (mov r8, r8)

08002340 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	2201      	movs	r2, #1
 800234e:	4013      	ands	r3, r2
 8002350:	d00b      	beq.n	800236a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	4a4a      	ldr	r2, [pc, #296]	; (8002484 <UART_AdvFeatureConfig+0x144>)
 800235a:	4013      	ands	r3, r2
 800235c:	0019      	movs	r1, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	2202      	movs	r2, #2
 8002370:	4013      	ands	r3, r2
 8002372:	d00b      	beq.n	800238c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4a43      	ldr	r2, [pc, #268]	; (8002488 <UART_AdvFeatureConfig+0x148>)
 800237c:	4013      	ands	r3, r2
 800237e:	0019      	movs	r1, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	2204      	movs	r2, #4
 8002392:	4013      	ands	r3, r2
 8002394:	d00b      	beq.n	80023ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	4a3b      	ldr	r2, [pc, #236]	; (800248c <UART_AdvFeatureConfig+0x14c>)
 800239e:	4013      	ands	r3, r2
 80023a0:	0019      	movs	r1, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	2208      	movs	r2, #8
 80023b4:	4013      	ands	r3, r2
 80023b6:	d00b      	beq.n	80023d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	4a34      	ldr	r2, [pc, #208]	; (8002490 <UART_AdvFeatureConfig+0x150>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	0019      	movs	r1, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	2210      	movs	r2, #16
 80023d6:	4013      	ands	r3, r2
 80023d8:	d00b      	beq.n	80023f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4a2c      	ldr	r2, [pc, #176]	; (8002494 <UART_AdvFeatureConfig+0x154>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	0019      	movs	r1, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	2220      	movs	r2, #32
 80023f8:	4013      	ands	r3, r2
 80023fa:	d00b      	beq.n	8002414 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	4a25      	ldr	r2, [pc, #148]	; (8002498 <UART_AdvFeatureConfig+0x158>)
 8002404:	4013      	ands	r3, r2
 8002406:	0019      	movs	r1, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	2240      	movs	r2, #64	; 0x40
 800241a:	4013      	ands	r3, r2
 800241c:	d01d      	beq.n	800245a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	4a1d      	ldr	r2, [pc, #116]	; (800249c <UART_AdvFeatureConfig+0x15c>)
 8002426:	4013      	ands	r3, r2
 8002428:	0019      	movs	r1, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	035b      	lsls	r3, r3, #13
 800243e:	429a      	cmp	r2, r3
 8002440:	d10b      	bne.n	800245a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	4a15      	ldr	r2, [pc, #84]	; (80024a0 <UART_AdvFeatureConfig+0x160>)
 800244a:	4013      	ands	r3, r2
 800244c:	0019      	movs	r1, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	2280      	movs	r2, #128	; 0x80
 8002460:	4013      	ands	r3, r2
 8002462:	d00b      	beq.n	800247c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	4a0e      	ldr	r2, [pc, #56]	; (80024a4 <UART_AdvFeatureConfig+0x164>)
 800246c:	4013      	ands	r3, r2
 800246e:	0019      	movs	r1, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	605a      	str	r2, [r3, #4]
  }
}
 800247c:	46c0      	nop			; (mov r8, r8)
 800247e:	46bd      	mov	sp, r7
 8002480:	b002      	add	sp, #8
 8002482:	bd80      	pop	{r7, pc}
 8002484:	fffdffff 	.word	0xfffdffff
 8002488:	fffeffff 	.word	0xfffeffff
 800248c:	fffbffff 	.word	0xfffbffff
 8002490:	ffff7fff 	.word	0xffff7fff
 8002494:	ffffefff 	.word	0xffffefff
 8002498:	ffffdfff 	.word	0xffffdfff
 800249c:	ffefffff 	.word	0xffefffff
 80024a0:	ff9fffff 	.word	0xff9fffff
 80024a4:	fff7ffff 	.word	0xfff7ffff

080024a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80024b6:	f7fe f9a7 	bl	8000808 <HAL_GetTick>
 80024ba:	0003      	movs	r3, r0
 80024bc:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2208      	movs	r2, #8
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d10d      	bne.n	80024e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	2380      	movs	r3, #128	; 0x80
 80024d0:	0399      	lsls	r1, r3, #14
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	4b16      	ldr	r3, [pc, #88]	; (8002530 <UART_CheckIdleState+0x88>)
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	0013      	movs	r3, r2
 80024da:	2200      	movs	r2, #0
 80024dc:	f000 f82a 	bl	8002534 <UART_WaitOnFlagUntilTimeout>
 80024e0:	1e03      	subs	r3, r0, #0
 80024e2:	d001      	beq.n	80024e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e01f      	b.n	8002528 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2204      	movs	r2, #4
 80024f0:	4013      	ands	r3, r2
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d10d      	bne.n	8002512 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	2380      	movs	r3, #128	; 0x80
 80024fa:	03d9      	lsls	r1, r3, #15
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <UART_CheckIdleState+0x88>)
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	0013      	movs	r3, r2
 8002504:	2200      	movs	r2, #0
 8002506:	f000 f815 	bl	8002534 <UART_WaitOnFlagUntilTimeout>
 800250a:	1e03      	subs	r3, r0, #0
 800250c:	d001      	beq.n	8002512 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e00a      	b.n	8002528 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2220      	movs	r2, #32
 8002516:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2220      	movs	r2, #32
 800251c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2270      	movs	r2, #112	; 0x70
 8002522:	2100      	movs	r1, #0
 8002524:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	0018      	movs	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	b004      	add	sp, #16
 800252e:	bd80      	pop	{r7, pc}
 8002530:	01ffffff 	.word	0x01ffffff

08002534 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	1dfb      	adds	r3, r7, #7
 8002542:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002544:	e05d      	b.n	8002602 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	3301      	adds	r3, #1
 800254a:	d05a      	beq.n	8002602 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800254c:	f7fe f95c 	bl	8000808 <HAL_GetTick>
 8002550:	0002      	movs	r2, r0
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	429a      	cmp	r2, r3
 800255a:	d302      	bcc.n	8002562 <UART_WaitOnFlagUntilTimeout+0x2e>
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d11b      	bne.n	800259a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	492f      	ldr	r1, [pc, #188]	; (800262c <UART_WaitOnFlagUntilTimeout+0xf8>)
 800256e:	400a      	ands	r2, r1
 8002570:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2101      	movs	r1, #1
 800257e:	438a      	bics	r2, r1
 8002580:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2220      	movs	r2, #32
 8002586:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2220      	movs	r2, #32
 800258c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2270      	movs	r2, #112	; 0x70
 8002592:	2100      	movs	r1, #0
 8002594:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e043      	b.n	8002622 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2204      	movs	r2, #4
 80025a2:	4013      	ands	r3, r2
 80025a4:	d02d      	beq.n	8002602 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	69da      	ldr	r2, [r3, #28]
 80025ac:	2380      	movs	r3, #128	; 0x80
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	401a      	ands	r2, r3
 80025b2:	2380      	movs	r3, #128	; 0x80
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d123      	bne.n	8002602 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2280      	movs	r2, #128	; 0x80
 80025c0:	0112      	lsls	r2, r2, #4
 80025c2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4917      	ldr	r1, [pc, #92]	; (800262c <UART_WaitOnFlagUntilTimeout+0xf8>)
 80025d0:	400a      	ands	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2101      	movs	r1, #1
 80025e0:	438a      	bics	r2, r1
 80025e2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2220      	movs	r2, #32
 80025e8:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2220      	movs	r2, #32
 80025ee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2220      	movs	r2, #32
 80025f4:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2270      	movs	r2, #112	; 0x70
 80025fa:	2100      	movs	r1, #0
 80025fc:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e00f      	b.n	8002622 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	4013      	ands	r3, r2
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	425a      	negs	r2, r3
 8002612:	4153      	adcs	r3, r2
 8002614:	b2db      	uxtb	r3, r3
 8002616:	001a      	movs	r2, r3
 8002618:	1dfb      	adds	r3, r7, #7
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d092      	beq.n	8002546 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	0018      	movs	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	b004      	add	sp, #16
 8002628:	bd80      	pop	{r7, pc}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	fffffe5f 	.word	0xfffffe5f

08002630 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	490a      	ldr	r1, [pc, #40]	; (800266c <UART_EndRxTransfer+0x3c>)
 8002644:	400a      	ands	r2, r1
 8002646:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2101      	movs	r1, #1
 8002654:	438a      	bics	r2, r1
 8002656:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2220      	movs	r2, #32
 800265c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	661a      	str	r2, [r3, #96]	; 0x60
}
 8002664:	46c0      	nop			; (mov r8, r8)
 8002666:	46bd      	mov	sp, r7
 8002668:	b002      	add	sp, #8
 800266a:	bd80      	pop	{r7, pc}
 800266c:	fffffedf 	.word	0xfffffedf

08002670 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	225a      	movs	r2, #90	; 0x5a
 8002682:	2100      	movs	r1, #0
 8002684:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2252      	movs	r2, #82	; 0x52
 800268a:	2100      	movs	r1, #0
 800268c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	0018      	movs	r0, r3
 8002692:	f7fd ff45 	bl	8000520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	46bd      	mov	sp, r7
 800269a:	b004      	add	sp, #16
 800269c:	bd80      	pop	{r7, pc}

0800269e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026aa:	2b21      	cmp	r3, #33	; 0x21
 80026ac:	d12b      	bne.n	8002706 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2252      	movs	r2, #82	; 0x52
 80026b2:	5a9b      	ldrh	r3, [r3, r2]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d110      	bne.n	80026dc <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2180      	movs	r1, #128	; 0x80
 80026c6:	438a      	bics	r2, r1
 80026c8:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2140      	movs	r1, #64	; 0x40
 80026d6:	430a      	orrs	r2, r1
 80026d8:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80026da:	e014      	b.n	8002706 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e0:	781a      	ldrb	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	b292      	uxth	r2, r2
 80026e8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2252      	movs	r2, #82	; 0x52
 80026f8:	5a9b      	ldrh	r3, [r3, r2]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b299      	uxth	r1, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2252      	movs	r2, #82	; 0x52
 8002704:	5299      	strh	r1, [r3, r2]
}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	46bd      	mov	sp, r7
 800270a:	b002      	add	sp, #8
 800270c:	bd80      	pop	{r7, pc}

0800270e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271a:	2b21      	cmp	r3, #33	; 0x21
 800271c:	d12f      	bne.n	800277e <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2252      	movs	r2, #82	; 0x52
 8002722:	5a9b      	ldrh	r3, [r3, r2]
 8002724:	b29b      	uxth	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d110      	bne.n	800274c <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2180      	movs	r1, #128	; 0x80
 8002736:	438a      	bics	r2, r1
 8002738:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2140      	movs	r1, #64	; 0x40
 8002746:	430a      	orrs	r2, r1
 8002748:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800274a:	e018      	b.n	800277e <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002750:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	881a      	ldrh	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	05d2      	lsls	r2, r2, #23
 800275c:	0dd2      	lsrs	r2, r2, #23
 800275e:	b292      	uxth	r2, r2
 8002760:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002766:	1c9a      	adds	r2, r3, #2
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2252      	movs	r2, #82	; 0x52
 8002770:	5a9b      	ldrh	r3, [r3, r2]
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b299      	uxth	r1, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2252      	movs	r2, #82	; 0x52
 800277c:	5299      	strh	r1, [r3, r2]
}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	46bd      	mov	sp, r7
 8002782:	b004      	add	sp, #16
 8002784:	bd80      	pop	{r7, pc}

08002786 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2140      	movs	r1, #64	; 0x40
 800279a:	438a      	bics	r2, r1
 800279c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2220      	movs	r2, #32
 80027a2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	0018      	movs	r0, r3
 80027ae:	f7fd fe8b 	bl	80004c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	46bd      	mov	sp, r7
 80027b6:	b002      	add	sp, #8
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80027c4:	230e      	movs	r3, #14
 80027c6:	18fb      	adds	r3, r7, r3
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	215c      	movs	r1, #92	; 0x5c
 80027cc:	5a52      	ldrh	r2, [r2, r1]
 80027ce:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027d4:	2b22      	cmp	r3, #34	; 0x22
 80027d6:	d140      	bne.n	800285a <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	210c      	movs	r1, #12
 80027de:	187b      	adds	r3, r7, r1
 80027e0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80027e2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80027e4:	187b      	adds	r3, r7, r1
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	230e      	movs	r3, #14
 80027ec:	18fb      	adds	r3, r7, r3
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	b2d9      	uxtb	r1, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f6:	400a      	ands	r2, r1
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	225a      	movs	r2, #90	; 0x5a
 800280a:	5a9b      	ldrh	r3, [r3, r2]
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b299      	uxth	r1, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	225a      	movs	r2, #90	; 0x5a
 8002816:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	225a      	movs	r2, #90	; 0x5a
 800281c:	5a9b      	ldrh	r3, [r3, r2]
 800281e:	b29b      	uxth	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d122      	bne.n	800286a <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4911      	ldr	r1, [pc, #68]	; (8002874 <UART_RxISR_8BIT+0xb8>)
 8002830:	400a      	ands	r2, r1
 8002832:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2101      	movs	r1, #1
 8002840:	438a      	bics	r2, r1
 8002842:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2220      	movs	r2, #32
 8002848:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	0018      	movs	r0, r3
 8002854:	f7fd fe48 	bl	80004e8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002858:	e007      	b.n	800286a <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	699a      	ldr	r2, [r3, #24]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2108      	movs	r1, #8
 8002866:	430a      	orrs	r2, r1
 8002868:	619a      	str	r2, [r3, #24]
}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	46bd      	mov	sp, r7
 800286e:	b004      	add	sp, #16
 8002870:	bd80      	pop	{r7, pc}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	fffffedf 	.word	0xfffffedf

08002878 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002880:	230e      	movs	r3, #14
 8002882:	18fb      	adds	r3, r7, r3
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	215c      	movs	r1, #92	; 0x5c
 8002888:	5a52      	ldrh	r2, [r2, r1]
 800288a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002890:	2b22      	cmp	r3, #34	; 0x22
 8002892:	d140      	bne.n	8002916 <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	210c      	movs	r1, #12
 800289a:	187b      	adds	r3, r7, r1
 800289c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800289e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80028a6:	187b      	adds	r3, r7, r1
 80028a8:	220e      	movs	r2, #14
 80028aa:	18ba      	adds	r2, r7, r2
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	8812      	ldrh	r2, [r2, #0]
 80028b0:	4013      	ands	r3, r2
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028bc:	1c9a      	adds	r2, r3, #2
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	225a      	movs	r2, #90	; 0x5a
 80028c6:	5a9b      	ldrh	r3, [r3, r2]
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b299      	uxth	r1, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	225a      	movs	r2, #90	; 0x5a
 80028d2:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	225a      	movs	r2, #90	; 0x5a
 80028d8:	5a9b      	ldrh	r3, [r3, r2]
 80028da:	b29b      	uxth	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d122      	bne.n	8002926 <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4911      	ldr	r1, [pc, #68]	; (8002930 <UART_RxISR_16BIT+0xb8>)
 80028ec:	400a      	ands	r2, r1
 80028ee:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2101      	movs	r1, #1
 80028fc:	438a      	bics	r2, r1
 80028fe:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2220      	movs	r2, #32
 8002904:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	0018      	movs	r0, r3
 8002910:	f7fd fdea 	bl	80004e8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002914:	e007      	b.n	8002926 <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	699a      	ldr	r2, [r3, #24]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2108      	movs	r1, #8
 8002922:	430a      	orrs	r2, r1
 8002924:	619a      	str	r2, [r3, #24]
}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	46bd      	mov	sp, r7
 800292a:	b004      	add	sp, #16
 800292c:	bd80      	pop	{r7, pc}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	fffffedf 	.word	0xfffffedf

08002934 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800293c:	46c0      	nop			; (mov r8, r8)
 800293e:	46bd      	mov	sp, r7
 8002940:	b002      	add	sp, #8
 8002942:	bd80      	pop	{r7, pc}

08002944 <__libc_init_array>:
 8002944:	b570      	push	{r4, r5, r6, lr}
 8002946:	2600      	movs	r6, #0
 8002948:	4d0c      	ldr	r5, [pc, #48]	; (800297c <__libc_init_array+0x38>)
 800294a:	4c0d      	ldr	r4, [pc, #52]	; (8002980 <__libc_init_array+0x3c>)
 800294c:	1b64      	subs	r4, r4, r5
 800294e:	10a4      	asrs	r4, r4, #2
 8002950:	42a6      	cmp	r6, r4
 8002952:	d109      	bne.n	8002968 <__libc_init_array+0x24>
 8002954:	2600      	movs	r6, #0
 8002956:	f000 f821 	bl	800299c <_init>
 800295a:	4d0a      	ldr	r5, [pc, #40]	; (8002984 <__libc_init_array+0x40>)
 800295c:	4c0a      	ldr	r4, [pc, #40]	; (8002988 <__libc_init_array+0x44>)
 800295e:	1b64      	subs	r4, r4, r5
 8002960:	10a4      	asrs	r4, r4, #2
 8002962:	42a6      	cmp	r6, r4
 8002964:	d105      	bne.n	8002972 <__libc_init_array+0x2e>
 8002966:	bd70      	pop	{r4, r5, r6, pc}
 8002968:	00b3      	lsls	r3, r6, #2
 800296a:	58eb      	ldr	r3, [r5, r3]
 800296c:	4798      	blx	r3
 800296e:	3601      	adds	r6, #1
 8002970:	e7ee      	b.n	8002950 <__libc_init_array+0xc>
 8002972:	00b3      	lsls	r3, r6, #2
 8002974:	58eb      	ldr	r3, [r5, r3]
 8002976:	4798      	blx	r3
 8002978:	3601      	adds	r6, #1
 800297a:	e7f2      	b.n	8002962 <__libc_init_array+0x1e>
 800297c:	080029ec 	.word	0x080029ec
 8002980:	080029ec 	.word	0x080029ec
 8002984:	080029ec 	.word	0x080029ec
 8002988:	080029f0 	.word	0x080029f0

0800298c <memset>:
 800298c:	0003      	movs	r3, r0
 800298e:	1812      	adds	r2, r2, r0
 8002990:	4293      	cmp	r3, r2
 8002992:	d100      	bne.n	8002996 <memset+0xa>
 8002994:	4770      	bx	lr
 8002996:	7019      	strb	r1, [r3, #0]
 8002998:	3301      	adds	r3, #1
 800299a:	e7f9      	b.n	8002990 <memset+0x4>

0800299c <_init>:
 800299c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029a2:	bc08      	pop	{r3}
 80029a4:	469e      	mov	lr, r3
 80029a6:	4770      	bx	lr

080029a8 <_fini>:
 80029a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ae:	bc08      	pop	{r3}
 80029b0:	469e      	mov	lr, r3
 80029b2:	4770      	bx	lr
